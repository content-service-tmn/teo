!function(t){var s;window.UIkit2&&(s=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-nestable",["uikit"],function(){return s||t(UIkit2)})}(function(v){"use strict";var o,a="ontouchstart"in window,h=v.$html,E=[],i=v.$win,n=a?"touchstart":"mousedown",r=a?"touchmove":"mousemove",d=a?"touchend":"mouseup",p=a?"touchcancel":"mouseup";return v.component("nestable",{defaults:{listBaseClass:"uk-nestable",listClass:"uk-nestable-list",listItemClass:"uk-nestable-item",dragClass:"uk-nestable-dragged",movingClass:"uk-nestable-moving",noChildrenClass:"uk-nestable-nochildren",emptyClass:"uk-nestable-empty",handleClass:"",collapsedClass:"uk-collapsed",placeholderClass:"uk-nestable-placeholder",noDragClass:"uk-nestable-nodrag",group:!1,maxDepth:10,threshold:20,idlethreshold:10},boot:function(){v.$html.on("mousemove touchmove",function(t){if(o){var s=o.offset().top;s<v.$win.scrollTop()?v.$win.scrollTop(v.$win.scrollTop()-Math.ceil(o.height()/2)):s+o.height()>window.innerHeight+v.$win.scrollTop()&&v.$win.scrollTop(v.$win.scrollTop()+Math.ceil(o.height()/2))}}),v.ready(function(t){v.$("[data-uk-nestable]",t).each(function(){var t=v.$(this);t.data("nestable")||v.nestable(t,v.Utils.options(t.attr("data-uk-nestable")))})})},init:function(){var l=this;Object.keys(this.options).forEach(function(t){-1!=String(t).indexOf("Class")&&(l.options["_"+t]="."+l.options[t])}),this.find(this.options._listItemClass).find(">ul").addClass(this.options.listClass),this.checkEmptyList(),this.reset(),this.element.data("nestable-group",this.options.group||v.Utils.uid("nestable-group")),this.find(this.options._listItemClass).each(function(){l.setParent(v.$(this))}),this.on("click","[data-nestable-action]",function(t){if(!l.dragEl&&(a||0===t.button)){t.preventDefault();var s=v.$(t.currentTarget),e=s.data("nestableAction"),i=s.closest(l.options._listItemClass);"collapse"===e&&l.collapseItem(i),"expand"===e&&l.expandItem(i),"toggle"===e&&l.toggleItem(i)}});var t=function(s){var t=v.$(s.target),e=t.is("a[href]")?t:t.parents("a[href]");s.target!==l.element[0]&&(t.is(l.options._noDragClass)||t.closest(l.options._noDragClass).length||t.is("[data-nestable-action]")||t.closest("[data-nestable-action]").length||(l.options.handleClass&&!t.hasClass(l.options.handleClass)&&l.options.handleClass&&(t=t.closest(l.options._handleClass)),!t.length||l.dragEl||!a&&0!==s.button||a&&1!==s.touches.length||(s.originalEvent&&s.originalEvent.touches&&(s=evt.originalEvent.touches[0]),l.delayMove=function(t){e=!1,t.preventDefault(),l.dragStart(s),l.trigger("start.uk.nestable",[l]),l.delayMove=!1},l.delayMove.x=parseInt(s.pageX,10),l.delayMove.y=parseInt(s.pageY,10),l.delayMove.threshold=l.options.idlethreshold,e.length&&"touchend"==d&&l.one(d,function(){e&&e.attr("href").trim()&&(location.href=e.attr("href"))}),s.preventDefault())))},s=function(t){t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),l.delayMove&&(Math.abs(t.pageX-l.delayMove.x)>l.delayMove.threshold||Math.abs(t.pageY-l.delayMove.y)>l.delayMove.threshold)&&(window.getSelection().toString()?l.delayMove=!1:l.delayMove(t)),l.dragEl&&(t.preventDefault(),l.dragMove(t),l.trigger("move.uk.nestable",[l]))},e=function(t){l.dragEl&&(t.preventDefault(),l.dragStop(a?t.touches[0]:t)),o=!1,l.delayMove=!1};a?(this.element[0].addEventListener(n,t,!1),window.addEventListener(r,s,!1),window.addEventListener(d,e,!1),window.addEventListener(p,e,!1)):(this.on(n,t),i.on(r,s),i.on(d,e))},serialize:function(){var r=this,d=function(t,o){var h=[];return t.children(r.options._listItemClass).each(function(){for(var t,s,e,i=v.$(this),l={},a=i.children(r.options._listClass),n=0;n<i[0].attributes.length;n++)0===(t=i[0].attributes[n]).name.indexOf("data-")&&(s=t.name.substr(5),e=v.Utils.str2json(t.value),l[s]=e||"false"==t.value||"0"==t.value?e:t.value);a.length&&(l.children=d(a,o+1)),h.push(l)}),h};return d(r.element,0)},list:function(n){var o=[],h=function(t,l,a){t.children(n._listItemClass).each(function(t){var s=v.$(this),e=v.$.extend({parent_id:a||null,depth:l,order:t},s.data()),i=s.children(n._listClass);o.push(e),i.length&&h(i,l+1,s.data(n.idProperty||"id"))})};return n=v.$.extend({},this.options,n),h(this.element,0),o},reset:function(){this.mouse={offsetX:0,offsetY:0,startX:0,startY:0,lastX:0,lastY:0,nowX:0,nowY:0,distX:0,distY:0,dirAx:0,dirX:0,dirY:0,lastDirX:0,lastDirY:0,distAxX:0,distAxY:0},this.moving=!1,this.dragEl=null,this.dragRootEl=null,this.dragDepth=0,this.hasNewRoot=!1,this.pointEl=null;for(var t=0;t<E.length;t++)this.checkEmptyList(E[t]);E=[]},toggleItem:function(t){this[t.hasClass(this.options.collapsedClass)?"expandItem":"collapseItem"](t)},expandItem:function(t){t.removeClass(this.options.collapsedClass)},collapseItem:function(t){t.children(this.options._listClass).length&&t.addClass(this.options.collapsedClass)},expandAll:function(){var t=this;this.find(t.options._listItemClass).each(function(){t.expandItem(v.$(this))})},collapseAll:function(){var t=this;this.find(t.options._listItemClass).each(function(){t.collapseItem(v.$(this))})},setParent:function(t){t.children(this.options._listClass).length&&t.addClass("uk-parent")},unsetParent:function(t){t.removeClass("uk-parent "+this.options.collapsedClass),t.children(this.options._listClass).remove()},dragStart:function(t){var s=this.mouse,e=v.$(t.target).closest(this.options._listItemClass),i=e.offset();this.placeEl=e,s.offsetX=t.pageX-i.left,s.offsetY=t.pageY-i.top,s.startX=s.lastX=i.left,s.startY=s.lastY=i.top,this.dragRootEl=this.element,this.dragEl=v.$("<ul></ul>").addClass(this.options.listClass+" "+this.options.dragClass).append(e.clone()),this.dragEl.css("width",e.width()),this.placeEl.addClass(this.options.placeholderClass),o=this.dragEl,this.tmpDragOnSiblings=[e[0].previousSibling,e[0].nextSibling],v.$body.append(this.dragEl),this.dragEl.css({left:i.left,top:i.top});var l,a,n=this.dragEl.find(this.options._listItemClass);for(l=0;l<n.length;l++)(a=v.$(n[l]).parents(this.options._listClass+","+this.options._listBaseClass).length)>this.dragDepth&&(this.dragDepth=a);h.addClass(this.options.movingClass)},dragStop:function(t){var s=v.$(this.placeEl),e=this.placeEl.parents(this.options._listBaseClass+":first");this.placeEl.removeClass(this.options.placeholderClass),this.dragEl.remove(),this.element[0]!==e[0]?(e.trigger("change.uk.nestable",[e.data("nestable"),s,"added"]),this.element.trigger("change.uk.nestable",[this,s,"removed"])):this.element.trigger("change.uk.nestable",[this,s,"moved"]),this.trigger("stop.uk.nestable",[this,s]),this.reset(),h.removeClass(this.options.movingClass)},dragMove:function(t){var s,e,i,l=this.options,a=this.mouse,n=this.dragRootEl?this.dragRootEl.data("nestable").options.maxDepth:l.maxDepth;this.dragEl.css({left:t.pageX-a.offsetX,top:t.pageY-a.offsetY}),a.lastX=a.nowX,a.lastY=a.nowY,a.nowX=t.pageX,a.nowY=t.pageY,a.distX=a.nowX-a.lastX,a.distY=a.nowY-a.lastY,a.lastDirX=a.dirX,a.lastDirY=a.dirY,a.dirX=0===a.distX?0:0<a.distX?1:-1,a.dirY=0===a.distY?0:0<a.distY?1:-1;var o=Math.abs(a.distX)>Math.abs(a.distY)?1:0;if(!a.moving)return a.dirAx=o,void(a.moving=!0);if(a.dirAx!==o?(a.distAxX=0,a.distAxY=0):(a.distAxX+=Math.abs(a.distX),0!==a.dirX&&a.dirX!==a.lastDirX&&(a.distAxX=0),a.distAxY+=Math.abs(a.distY),0!==a.dirY&&a.dirY!==a.lastDirY&&(a.distAxY=0)),a.dirAx=o,a.dirAx&&a.distAxX>=l.threshold&&(a.distAxX=0,i=this.placeEl.prev("li"),0<a.distX&&i.length&&!i.hasClass(l.collapsedClass)&&!i.hasClass(l.noChildrenClass)&&(s=i.find(l._listClass).last(),this.placeEl.parents(l._listClass+","+l._listBaseClass).length+this.dragDepth<=n&&(s.length?(s=i.children(l._listClass).last()).append(this.placeEl):((s=v.$("<ul/>").addClass(l.listClass)).append(this.placeEl),i.append(s),this.setParent(i)))),a.distX<0&&!this.placeEl.next(l._listItemClass).length)){var h=this.placeEl.closest([l._listBaseClass,l._listClass].join(",")),r=h.closest(l._listItemClass);r.length&&(r.after(this.placeEl),h.children().length||this.unsetParent(r))}var d=!1,p=t.pageX-(window.pageXOffset||document.scrollLeft||0),c=t.pageY-(window.pageYOffset||document.documentElement.scrollTop);if(this.pointEl=v.$(document.elementFromPoint(p,c)),l.handleClass&&this.pointEl.hasClass(l.handleClass))this.pointEl=this.pointEl.closest(l._listItemClass);else{var g=this.pointEl.closest(l._listItemClass);g.length&&(this.pointEl=g)}if(!this.placeEl.find(this.pointEl).length){if(this.pointEl.data("nestable")&&!this.pointEl.children().length)d=!0,this.checkEmptyList(this.pointEl);else if(!this.pointEl.length||!this.pointEl.hasClass(l.listItemClass))return;var u=this.element,f=this.pointEl.closest(this.options._listBaseClass),m=u[0]!=f[0];if(!a.dirAx||m||d){if(m&&l.group!==f.data("nestable-group"))return;if(E.push(u),n<this.dragDepth-1+this.pointEl.parents(l._listClass+","+l._listBaseClass).length)return;var C=t.pageY<this.pointEl.offset().top+this.pointEl.height()/2;e=this.placeEl.parent(),d?this.pointEl.append(this.placeEl):C?this.pointEl.before(this.placeEl):this.pointEl.after(this.placeEl),e.children().length||e.data("nestable")||this.unsetParent(e.parent()),this.checkEmptyList(this.dragRootEl),this.checkEmptyList(u),m&&(this.dragRootEl=f,this.hasNewRoot=this.element[0]!==this.dragRootEl[0])}}},checkEmptyList:function(t){t=t?v.$(t):this.element,this.options.emptyClass&&t[t.children().length?"removeClass":"addClass"](this.options.emptyClass)}}),v.nestable});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
