!function(o){"use strict";o.component("nav",{defaults:{toggle:'>li.uk-parent > a[href="#"]',lists:">li.uk-parent > ul",multiple:!1},boot:function(){o.ready(function(t){o.$("[data-uk-nav]",t).each(function(){var t=o.$(this);if(!t.data("nav"))o.nav(t,o.Utils.options(t.attr("data-uk-nav")))})})},init:function(){var s=this;this.on("click.uk.nav",this.options.toggle,function(t){t.preventDefault();var i=o.$(this);s.open(i.parent()[0]==s.element[0]?i:i.parent("li"))}),this.update(),o.domObserve(this.element,function(t){s.element.find(s.options.lists).not("[role]").length&&s.update()})},update:function(){var e=this;this.find(this.options.lists).each(function(){var t=o.$(this).attr("role","menu"),i=t.closest("li"),s=i.hasClass("uk-active");i.data("list-container")||(t.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>'),i.data("list-container",t.parent()[s?"removeClass":"addClass"]("uk-hidden"))),i.attr("aria-expanded",i.hasClass("uk-open")),s&&e.open(i,!0)})},open:function(t,i){var s=this,e=this.element,a=o.$(t),n=a.data("list-container");this.options.multiple||e.children(".uk-open").not(t).each(function(){var t=o.$(this);t.data("list-container")&&t.data("list-container").stop().animate({height:0},function(){o.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden")})}),a.toggleClass("uk-open"),a.attr("aria-expanded",a.hasClass("uk-open")),n&&(a.hasClass("uk-open")&&n.removeClass("uk-hidden"),i?(n.stop().height(a.hasClass("uk-open")?"auto":0),a.hasClass("uk-open")||n.addClass("uk-hidden"),this.trigger("display.uk.check")):n.stop().animate({height:a.hasClass("uk-open")?function(t){var i=o.$(t),s="auto";if(i.is(":visible"))s=i.outerHeight();else{var e={position:i.css("position"),visibility:i.css("visibility"),display:i.css("display")};s=i.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),i.css(e)}return s}(n.find("ul:first")):0},function(){a.hasClass("uk-open")?n.css("height",""):n.addClass("uk-hidden"),s.trigger("display.uk.check")}))}})}(UIkit2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
