!function(p){"use strict";var f=p.$win,t=p.$doc,s=[],o=function(){for(var t=0;t<s.length;t++)window.requestAnimationFrame.apply(window,[s[t].check])};p.component("scrollspy",{defaults:{target:!1,cls:"uk-scrollspy-inview",initcls:"uk-scrollspy-init-inview",topoffset:0,leftoffset:0,repeat:!1,delay:0},boot:function(){t.on("scrolling.uk.document",o),f.on("load resize orientationchange",p.Utils.debounce(o,50)),p.ready(function(t){p.$("[data-uk-scrollspy]",t).each(function(){var t=p.$(this);if(!t.data("scrollspy"))p.scrollspy(t,p.Utils.options(t.attr("data-uk-scrollspy")))})})},init:function(){var a,r=this,c=this.options.cls.split(/,/),t=function(){var t=r.options.target?r.element.find(r.options.target):r.element,l=1===t.length?1:0,n=0;t.each(function(t){var s=p.$(this),o=s.data("inviewstate"),i=p.Utils.isInView(s,r.options),e=s.data("ukScrollspyCls")||c[n].trim();!i||o||s.data("scrollspy-idle")||(a||(s.addClass(r.options.initcls),r.offset=s.offset(),a=!0,s.trigger("init.uk.scrollspy")),s.data("scrollspy-idle",setTimeout(function(){s.addClass("uk-scrollspy-inview").toggleClass(e).width(),s.trigger("inview.uk.scrollspy"),s.data("scrollspy-idle",!1),s.data("inviewstate",!0)},r.options.delay*l)),l++),!i&&o&&r.options.repeat&&(s.data("scrollspy-idle")&&(clearTimeout(s.data("scrollspy-idle")),s.data("scrollspy-idle",!1)),s.removeClass("uk-scrollspy-inview").toggleClass(e),s.data("inviewstate",!1),s.trigger("outview.uk.scrollspy")),n=c[n+1]?n+1:0})};t(),this.check=t,s.push(this)}});var i=[],e=function(){for(var t=0;t<i.length;t++)window.requestAnimationFrame.apply(window,[i[t].check])};p.component("scrollspynav",{defaults:{cls:"uk-active",closest:!1,topoffset:0,leftoffset:0,smoothscroll:!1},boot:function(){t.on("scrolling.uk.document",e),f.on("resize orientationchange",p.Utils.debounce(e,50)),p.ready(function(t){p.$("[data-uk-scrollspy-nav]",t).each(function(){var t=p.$(this);if(!t.data("scrollspynav"))p.scrollspynav(t,p.Utils.options(t.attr("data-uk-scrollspy-nav")))})})},init:function(){var e,t=[],l=this.find("a[href^='#']").each(function(){"#"!==this.getAttribute("href").trim()&&t.push(this.getAttribute("href"))}),n=p.$(t.join(",")),a=this.options.cls,r=this.options.closest||this.options.closest,c=this,s=function(){e=[];for(var t=0;t<n.length;t++)p.Utils.isInView(n.eq(t),c.options)&&e.push(n.eq(t));if(e.length){var s,o=f.scrollTop(),i=function(){for(var t=0;t<e.length;t++)if(e[t].offset().top-c.options.topoffset>=o)return e[t]}();if(!i)return;c.options.closest?(l.blur().closest(r).removeClass(a),s=l.filter("a[href='#"+i.attr("id")+"']").closest(r).addClass(a)):s=l.removeClass(a).filter("a[href='#"+i.attr("id")+"']").addClass(a),c.element.trigger("inview.uk.scrollspynav",[i,s])}};this.options.smoothscroll&&p.smoothScroll&&l.each(function(){p.smoothScroll(this,c.options.smoothscroll)}),s(),this.element.data("scrollspynav",this),this.check=s,i.push(this)}})}(UIkit2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
