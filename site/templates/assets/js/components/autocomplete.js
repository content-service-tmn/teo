!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-autocomplete",["uikit"],function(){return e||t(UIkit2)})}(function(h){"use strict";var e;return h.component("autocomplete",{defaults:{minLength:3,param:"search",method:"post",delay:300,loadingClass:"uk-loading",flipDropdown:!1,skipClass:"uk-skip",hoverClass:"uk-active",source:null,renderer:null,template:'<ul class="uk-nav uk-nav-autocomplete uk-autocomplete-results">{{~items}}<li data-value="{{$item.value}}"><a>{{$item.value}}</a></li>{{/items}}</ul>'},visible:!1,value:null,selected:null,boot:function(){h.$html.on("focus.autocomplete.uikit","[data-uk-autocomplete]",function(t){var e=h.$(this);e.data("autocomplete")||h.autocomplete(e,h.Utils.options(e.attr("data-uk-autocomplete")))}),h.$html.on("click.autocomplete.uikit",function(t){e&&t.target!=e.input[0]&&e.hide()})},init:function(){var e=this,i=!1,t=h.Utils.debounce(function(t){if(i)return i=!1;e.handle()},this.options.delay);this.dropdown=this.find(".uk-dropdown"),this.template=this.find('script[type="text/autocomplete"]').html(),this.template=h.Utils.template(this.template||this.options.template),this.input=this.find("input:first").attr("autocomplete","off"),this.dropdown.length||(this.dropdown=h.$('<div class="uk-dropdown"></div>').appendTo(this.element)),this.options.flipDropdown&&this.dropdown.addClass("uk-dropdown-flip"),this.dropdown.attr("aria-expanded","false"),this.input.on({keydown:function(t){if(t&&t.which&&!t.shiftKey&&e.visible)switch(t.which){case 13:i=!0,e.selected&&(t.preventDefault(),e.select());break;case 38:t.preventDefault(),e.pick("prev",!0);break;case 40:t.preventDefault(),e.pick("next",!0);break;case 27:case 9:e.hide()}},keyup:t}),this.dropdown.on("click",".uk-autocomplete-results > *",function(){e.select()}),this.dropdown.on("mouseover",".uk-autocomplete-results > *",function(){e.pick(h.$(this))}),this.triggercomplete=t},handle:function(){var t=this.value;return this.value=this.input.val(),this.value.length<this.options.minLength?this.hide():(this.value!=t&&this.request(),this)},pick:function(t,e){var i=this,s=h.$(this.dropdown.find(".uk-autocomplete-results").children(":not(."+this.options.skipClass+")")),o=!1;if("string"==typeof t||t.hasClass(this.options.skipClass)){if("next"==t||"prev"==t){if(this.selected){var n=s.index(this.selected);o="next"==t?s.eq(n+1<s.length?n+1:0):s.eq(n-1<0?s.length-1:n-1)}else o=s["next"==t?"first":"last"]();o=h.$(o)}}else o=t;if(o&&o.length&&(this.selected=o,s.removeClass(this.options.hoverClass),this.selected.addClass(this.options.hoverClass),e)){var a=o.position().top,l=i.dropdown.scrollTop();(i.dropdown.height()<a||a<0)&&i.dropdown.scrollTop(l+a)}},select:function(){if(this.selected){var t=this.selected.data();this.trigger("selectitem.uk.autocomplete",[t,this]),t.value&&this.input.val(t.value).trigger("change"),this.hide()}},show:function(){if(!this.visible)return this.visible=!0,this.element.addClass("uk-open"),e&&e!==this&&e.hide(),(e=this).dropdown.attr("aria-expanded","true"),this},hide:function(){if(this.visible)return this.visible=!1,this.element.removeClass("uk-open"),e===this&&(e=!1),this.dropdown.attr("aria-expanded","false"),this},request:function(){var e=this,i=function(t){t&&e.render(t),e.element.removeClass(e.options.loadingClass)};if(this.element.addClass(this.options.loadingClass),this.options.source){var t=this.options.source;switch(typeof this.options.source){case"function":this.options.source.apply(this,[i]);break;case"object":if(t.length){var s=[];t.forEach(function(t){t.value&&-1!=t.value.toLowerCase().indexOf(e.value.toLowerCase())&&s.push(t)}),i(s)}break;case"string":var o={};o[this.options.param]=this.value,h.$.ajax({url:this.options.source,data:o,type:this.options.method,dataType:"json"}).done(function(t){i(t||[])});break;default:i(null)}}else this.element.removeClass(e.options.loadingClass)},render:function(t){return this.dropdown.empty(),this.selected=!1,this.options.renderer?this.options.renderer.apply(this,[t]):t&&t.length&&(this.dropdown.append(this.template({items:t})),this.show(),this.trigger("show.uk.autocomplete")),this}}),h.autocomplete});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
