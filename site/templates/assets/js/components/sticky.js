!function(t){var i;window.UIkit2&&(i=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-sticky",["uikit"],function(){return i||t(UIkit2)})}(function(d){"use strict";var u=d.$win,f=d.$doc,g=[],n=1;function e(t){var i=arguments.length?arguments:g;if(i.length&&!(u.scrollTop()<0))for(var e,s,n,o,r=u.scrollTop(),a=f.height(),h=a-u.height(),p=h<r?h-r:0,c=0;c<i.length;c++)if((o=i[c]).element.is(":visible")&&!o.animate){if(o.check()){if(e=o.top<0?0:(e=a-(n=o.element.outerHeight())-o.top-o.options.bottom-r-p)<0?e+o.top:o.top,o.boundary&&o.boundary.length){var l=o.boundary.offset().top;s=o.boundtoparent?a-(l+o.boundary.outerHeight())+parseInt(o.boundary.css("padding-bottom")):a-l,e=r+n>a-s-(o.top<0?0:o.top)?a-s-(r+n):e}if(o.currentTop!=e){if(o.element.css({position:"fixed",top:e,width:o.getWidthFrom.length?o.getWidthFrom.width():o.element.width()}),!o.init&&(o.element.addClass(o.options.clsinit),location.hash&&0<r&&o.options.target)){var m=d.$(location.hash);m.length&&setTimeout(function(o,a){return function(){a.element.width();var t=o.offset(),i=t.top+o.outerHeight(),e=a.element.offset(),s=a.element.outerHeight(),n=e.top+s;e.top<i&&t.top<n&&(r=t.top-s-a.options.target,window.scrollTo(0,r))}}(m,o),0)}o.element.addClass(o.options.clsactive).removeClass(o.options.clsinactive),o.element.trigger("active.uk.sticky"),o.element.css("margin",""),o.options.animation&&o.init&&!d.Utils.isInView(o.wrapper)&&o.element.addClass(o.options.animation),o.currentTop=e}}else null!==o.currentTop&&o.reset();o.init=!0}}return d.component("sticky",{defaults:{top:0,bottom:0,animation:"",clsinit:"uk-sticky-init",clsactive:"uk-active",clsinactive:"",getWidthFrom:"",showup:!1,boundary:!1,media:!1,target:!1,disabled:!1},boot:function(){d.$doc.on("scrolling.uk.document",function(t,i){i&&i.dir&&(n=i.dir.y,e())}),d.$win.on("resize orientationchange",d.Utils.debounce(function(){if(g.length){for(var t=0;t<g.length;t++)g[t].reset(!0),g[t].self.computeWrapper();e()}},100)),d.ready(function(t){setTimeout(function(){d.$("[data-uk-sticky]",t).each(function(){var t=d.$(this);t.data("sticky")||d.sticky(t,d.Utils.options(t.attr("data-uk-sticky")))}),e()},0)})},init:function(){var t,i=this.options.boundary;this.wrapper=this.element.wrap('<div class="uk-sticky-placeholder"></div>').parent(),this.computeWrapper(),this.wrapper.css({"margin-top":this.element.css("margin-top"),"margin-bottom":this.element.css("margin-bottom"),"margin-left":this.element.css("margin-left"),"margin-right":this.element.css("margin-right")}),this.element.css("margin",0),i&&(!0===i||"!"===i[0]?(i=!0===i?this.wrapper.parent():this.wrapper.closest(i.substr(1)),t=!0):"string"==typeof i&&(i=d.$(i))),this.sticky={self:this,options:this.options,element:this.element,currentTop:null,wrapper:this.wrapper,init:!1,getWidthFrom:d.$(this.options.getWidthFrom||this.wrapper),boundary:i,boundtoparent:t,top:0,calcTop:function(){var t=this.options.top;if(this.options.top&&"string"==typeof this.options.top)if(this.options.top.match(/^(-|)(\d+)vh$/))t=window.innerHeight*parseInt(this.options.top,10)/100;else{var i=d.$(this.options.top).first();i.length&&i.is(":visible")&&(t=-1*(i.offset().top+i.outerHeight()-this.wrapper.offset().top))}this.top=t},reset:function(t){this.calcTop();var i=function(){this.element.css({position:"",top:"",width:"",left:"",margin:"0"}),this.element.removeClass([this.options.animation,"uk-animation-reverse",this.options.clsactive].join(" ")),this.element.addClass(this.options.clsinactive),this.element.trigger("inactive.uk.sticky"),this.currentTop=null,this.animate=!1}.bind(this);!t&&this.options.animation&&d.support.animation&&!d.Utils.isInView(this.wrapper)?(this.animate=!0,this.element.removeClass(this.options.animation).one(d.support.animation.end,function(){i()}).width(),this.element.addClass(this.options.animation+" uk-animation-reverse")):i()},check:function(){if(this.options.disabled)return!1;if(this.options.media)switch(typeof this.options.media){case"number":if(window.innerWidth<this.options.media)return!1;break;case"string":if(window.matchMedia&&!window.matchMedia(this.options.media).matches)return!1}var t=u.scrollTop(),i=f.height()-window.innerHeight,e=i<t?i-t:0,s=this.wrapper.offset().top-this.top-e<=t;return s&&this.options.showup&&(1==n&&(s=!1),-1==n&&!this.element.hasClass(this.options.clsactive)&&d.Utils.isInView(this.wrapper)&&(s=!1)),s}},this.sticky.calcTop(),g.push(this.sticky)},update:function(){e(this.sticky)},enable:function(){this.options.disabled=!1,this.update()},disable:function(t){this.options.disabled=!0,this.sticky.reset(t)},computeWrapper:function(){this.wrapper.css({height:-1==["absolute","fixed"].indexOf(this.element.css("position"))?this.element.outerHeight():"",float:"none"!=this.element.css("float")?this.element.css("float"):""}),"fixed"==this.element.css("position")&&this.element.css({width:this.sticky.getWidthFrom.length?this.sticky.getWidthFrom.width():this.element.width()})}}),d.sticky});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
