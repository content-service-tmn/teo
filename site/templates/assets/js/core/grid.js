!function(n){"use strict";var s=[];n.component("gridMatchHeight",{defaults:{target:!1,row:!0,ignorestacked:!1,observe:!1},boot:function(){n.ready(function(t){n.$("[data-uk-grid-match]",t).each(function(){var t=n.$(this);t.data("gridMatchHeight")||n.gridMatchHeight(t,n.Utils.options(t.attr("data-uk-grid-match")))})})},init:function(){var t,i=this;(this.columns=this.element.children(),this.elements=this.options.target?this.find(this.options.target):this.columns,this.columns.length)&&(n.$win.on("load resize orientationchange",(t=function(){i.element.is(":visible")&&i.match()},n.$(function(){t()}),n.Utils.debounce(t,50))),this.options.observe&&n.domObserve(this.element,function(t){i.element.is(":visible")&&i.match()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.match()}.bind(this)),s.push(this))},match:function(){var t=this.columns.filter(":visible:first");if(t.length)return 100<=Math.ceil(100*parseFloat(t.css("width"))/parseFloat(t.parent().css("width")))&&!this.options.ignorestacked?this.revert():n.Utils.matchHeights(this.elements,this.options),this},revert:function(){return this.elements.css("min-height",""),this}}),n.component("gridMargin",{defaults:{cls:"uk-grid-margin",rowfirst:"uk-row-first"},boot:function(){n.ready(function(t){n.$("[data-uk-grid-margin]",t).each(function(){var t=n.$(this);t.data("gridMargin")||n.gridMargin(t,n.Utils.options(t.attr("data-uk-grid-margin")))})})},init:function(){n.stackMargin(this.element,this.options)}})}(UIkit2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvZ3JpZC5qcyJdLCJuYW1lcyI6WyJVSSIsImdyaWRzIiwiY29tcG9uZW50IiwiZGVmYXVsdHMiLCJ0YXJnZXQiLCJyb3ciLCJpZ25vcmVzdGFja2VkIiwib2JzZXJ2ZSIsImJvb3QiLCJyZWFkeSIsImNvbnRleHQiLCIkIiwiZWFjaCIsImdyaWQiLCJ0aGlzIiwiZGF0YSIsImdyaWRNYXRjaEhlaWdodCIsIlV0aWxzIiwib3B0aW9ucyIsImF0dHIiLCJpbml0IiwiZm4iLCIkdGhpcyIsImNvbHVtbnMiLCJlbGVtZW50IiwiY2hpbGRyZW4iLCJlbGVtZW50cyIsImZpbmQiLCJsZW5ndGgiLCIkd2luIiwib24iLCJpcyIsIm1hdGNoIiwiZGVib3VuY2UiLCJkb21PYnNlcnZlIiwiZSIsImJpbmQiLCJwdXNoIiwiZmlyc3R2aXNpYmxlIiwiZmlsdGVyIiwiTWF0aCIsImNlaWwiLCJwYXJzZUZsb2F0IiwiY3NzIiwicGFyZW50IiwicmV2ZXJ0IiwibWF0Y2hIZWlnaHRzIiwiY2xzIiwicm93Zmlyc3QiLCJncmlkTWFyZ2luIiwic3RhY2tNYXJnaW4iLCJVSWtpdDIiXSwibWFwcGluZ3MiOiJDQUNBLFNBQVVBLEdBRU4sYUFFQSxJQUFJQyxFQUFRLEdBRVpELEVBQUdFLFVBQVUsa0JBQW1CLENBRTVCQyxTQUFVLENBQ05DLFFBQWdCLEVBQ2hCQyxLQUFnQixFQUNoQkMsZUFBZ0IsRUFDaEJDLFNBQWdCLEdBR3BCQyxLQUFNLFdBR0ZSLEVBQUdTLE1BQU0sU0FBU0MsR0FFZFYsRUFBR1csRUFBRSx1QkFBd0JELEdBQVNFLEtBQUssV0FDdkMsSUFBSUMsRUFBT2IsRUFBR1csRUFBRUcsTUFFWEQsRUFBS0UsS0FBSyxvQkFDTGYsRUFBR2dCLGdCQUFnQkgsRUFBTWIsRUFBR2lCLE1BQU1DLFFBQVFMLEVBQUtNLEtBQUssNkJBTTFFQyxLQUFNLFdBRUYsSUFTUUMsRUFUSkMsRUFBUVIsTUFFWkEsS0FBS1MsUUFBV1QsS0FBS1UsUUFBUUMsV0FDN0JYLEtBQUtZLFNBQVdaLEtBQUtJLFFBQVFkLE9BQVNVLEtBQUthLEtBQUtiLEtBQUtJLFFBQVFkLFFBQVVVLEtBQUtTLFFBRXZFVCxLQUFLUyxRQUFRSyxVQUVsQjVCLEVBQUc2QixLQUFLQyxHQUFHLGlDQUVIVCxFQUFLLFdBQ0RDLEVBQU1FLFFBQVFPLEdBQUcsYUFBYVQsRUFBTVUsU0FHNUNoQyxFQUFHVyxFQUFFLFdBQWFVLE1BRVhyQixFQUFHaUIsTUFBTWdCLFNBQVNaLEVBQUksTUFHN0JQLEtBQUtJLFFBQVFYLFNBRWJQLEVBQUdrQyxXQUFXcEIsS0FBS1UsUUFBUyxTQUFTVyxHQUM3QmIsRUFBTUUsUUFBUU8sR0FBRyxhQUFhVCxFQUFNVSxVQUloRGxCLEtBQUtnQixHQUFHLG1CQUFvQixTQUFTSyxHQUM5QnJCLEtBQUtVLFFBQVFPLEdBQUcsYUFBYWpCLEtBQUtrQixTQUN2Q0ksS0FBS3RCLE9BRVBiLEVBQU1vQyxLQUFLdkIsUUFHZmtCLE1BQU8sV0FFSCxJQUFJTSxFQUFleEIsS0FBS1MsUUFBUWdCLE9BQU8sa0JBRXZDLEdBQUtELEVBQWFWLE9BVWxCLE9BUnlILEtBQTNHWSxLQUFLQyxLQUFLLElBQU1DLFdBQVdKLEVBQWFLLElBQUksVUFBWUQsV0FBV0osRUFBYU0sU0FBU0QsSUFBSSxhQUUzRjdCLEtBQUtJLFFBQVFaLGNBQ3pCUSxLQUFLK0IsU0FFTDdDLEVBQUdpQixNQUFNNkIsYUFBYWhDLEtBQUtZLFNBQVVaLEtBQUtJLFNBR3ZDSixNQUdYK0IsT0FBUSxXQUVKLE9BREEvQixLQUFLWSxTQUFTaUIsSUFBSSxhQUFjLElBQ3pCN0IsUUFJZmQsRUFBR0UsVUFBVSxhQUFjLENBRXZCQyxTQUFVLENBQ040QyxJQUFXLGlCQUNYQyxTQUFXLGdCQUdmeEMsS0FBTSxXQUdGUixFQUFHUyxNQUFNLFNBQVNDLEdBRWRWLEVBQUdXLEVBQUUsd0JBQXlCRCxHQUFTRSxLQUFLLFdBQ3hDLElBQUlDLEVBQU9iLEVBQUdXLEVBQUVHLE1BRVhELEVBQUtFLEtBQUssZUFDTGYsRUFBR2lELFdBQVdwQyxFQUFNYixFQUFHaUIsTUFBTUMsUUFBUUwsRUFBS00sS0FBSyw4QkFNckVDLEtBQU0sV0FFZ0JwQixFQUFHa0QsWUFBWXBDLEtBQUtVLFFBQVNWLEtBQUtJLFlBL0doRSxDQW1IR2lDIiwiZmlsZSI6ImNvcmUvZ3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBVSWtpdCAyLjI3LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKFVJKSB7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGdyaWRzID0gW107XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdncmlkTWF0Y2hIZWlnaHQnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIHRhcmdldCAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgcm93ICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGlnbm9yZXN0YWNrZWQgOiBmYWxzZSxcclxuICAgICAgICAgICAgb2JzZXJ2ZSAgICAgICA6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYm9vdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoJ1tkYXRhLXVrLWdyaWQtbWF0Y2hdJywgY29udGV4dCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JpZCA9IFVJLiQodGhpcyksIG9iajtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFncmlkLmRhdGEoJ2dyaWRNYXRjaEhlaWdodCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IFVJLmdyaWRNYXRjaEhlaWdodChncmlkLCBVSS5VdGlscy5vcHRpb25zKGdyaWQuYXR0cignZGF0YS11ay1ncmlkLW1hdGNoJykpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zICA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5vcHRpb25zLnRhcmdldCA/IHRoaXMuZmluZCh0aGlzLm9wdGlvbnMudGFyZ2V0KSA6IHRoaXMuY29sdW1ucztcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW5zLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgVUkuJHdpbi5vbignbG9hZCByZXNpemUgb3JpZW50YXRpb25jaGFuZ2UnLCAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmVsZW1lbnQuaXMoJzp2aXNpYmxlJykpICR0aGlzLm1hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoZnVuY3Rpb24oKSB7IGZuKCk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS5VdGlscy5kZWJvdW5jZShmbiwgNTApO1xyXG4gICAgICAgICAgICB9KSgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2JzZXJ2ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLmRvbU9ic2VydmUodGhpcy5lbGVtZW50LCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmVsZW1lbnQuaXMoJzp2aXNpYmxlJykpICR0aGlzLm1hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignZGlzcGxheS51ay5jaGVjaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuZWxlbWVudC5pcygnOnZpc2libGUnKSkgdGhpcy5tYXRjaCgpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgZ3JpZHMucHVzaCh0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtYXRjaDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlyc3R2aXNpYmxlID0gdGhpcy5jb2x1bW5zLmZpbHRlcignOnZpc2libGU6Zmlyc3QnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZmlyc3R2aXNpYmxlLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YWNrZWQgPSBNYXRoLmNlaWwoMTAwICogcGFyc2VGbG9hdChmaXJzdHZpc2libGUuY3NzKCd3aWR0aCcpKSAvIHBhcnNlRmxvYXQoZmlyc3R2aXNpYmxlLnBhcmVudCgpLmNzcygnd2lkdGgnKSkpID49IDEwMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGFja2VkICYmICF0aGlzLm9wdGlvbnMuaWdub3Jlc3RhY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXZlcnQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFVJLlV0aWxzLm1hdGNoSGVpZ2h0cyh0aGlzLmVsZW1lbnRzLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmNzcygnbWluLWhlaWdodCcsICcnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdncmlkTWFyZ2luJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBjbHMgICAgICA6ICd1ay1ncmlkLW1hcmdpbicsXHJcbiAgICAgICAgICAgIHJvd2ZpcnN0IDogJ3VrLXJvdy1maXJzdCdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJCgnW2RhdGEtdWstZ3JpZC1tYXJnaW5dJywgY29udGV4dCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JpZCA9IFVJLiQodGhpcyksIG9iajtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFncmlkLmRhdGEoJ2dyaWRNYXJnaW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBVSS5ncmlkTWFyZ2luKGdyaWQsIFVJLlV0aWxzLm9wdGlvbnMoZ3JpZC5hdHRyKCdkYXRhLXVrLWdyaWQtbWFyZ2luJykpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RhY2tNYXJnaW4gPSBVSS5zdGFja01hcmdpbih0aGlzLmVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdDIpOyJdfQ==
