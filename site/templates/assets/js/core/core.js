!function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var c=window.UIkit2||t(window,window.jQuery,window.document);return c.load=function(t,n,e,o){var i,r=t.split(","),s=[],a=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!a)throw new Error("Please define base path to UIkit in the requirejs config.");for(i=0;i<r.length;i+=1){var u=r[i].replace(/\./g,"/");s.push(a+"/components/"+u)}n(s,function(){e(c)})},c}),!window.jQuery)throw new Error("UIkit 2.x requires jQuery");window&&window.jQuery&&!window.UIkit2&&t(window,window.jQuery,window.document)}(function(t,u,o){"use strict";var n,e,i,c={},r=t.UIkit||void 0;if(c.version="2.27.2",c.noConflict=function(){return r&&(t.UIkit=r,u.UIkit=r,u.fn.uk=r.fn),c},t.UIkit2=c,r||(t.UIkit=c),c.$=u,c.$doc=c.$(document),c.$win=c.$(window),c.$html=c.$("html"),c.support={},c.support.transition=(n=function(){var t,n=o.body||o.documentElement,e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in e)if(void 0!==n.style[t])return e[t]}())&&{end:n},c.support.animation=(e=function(){var t,n=o.body||o.documentElement,e={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in e)if(void 0!==n.style[t])return e[t]}())&&{end:e},function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n){var e=t[n];window.requestAnimationFrame=window[e+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e+"CancelAnimationFrame"]||window[e+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var o=0;window.requestAnimationFrame=function(t){var n=Date.now(),e=Math.max(o+16,n);return setTimeout(function(){t(o=e)},e-n)},window.cancelAnimationFrame=clearTimeout}}(),c.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&0<t.navigator.msMaxTouchPoints||t.navigator.pointerEnabled&&0<t.navigator.maxTouchPoints||!1,c.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,c.Utils={},c.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},c.Utils.str2json=function(t,n){try{return n?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,n){return'"'+n+'":'}).replace(/'([^']+)'/g,function(t,n){return'"'+n+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(t){return!1}},c.Utils.debounce=function(o,i,r){var s;return function(){var t=this,n=arguments,e=r&&!s;clearTimeout(s),s=setTimeout(function(){s=null,r||o.apply(t,n)},i),e&&o.apply(t,n)}},c.Utils.throttle=function(t,n){var e=!1;return function(){e||(t.call(),e=!0,setTimeout(function(){e=!1},n))}},c.Utils.removeCssRules=function(t){var n,e,o,i,r,s,a,u,c,d;t&&setTimeout(function(){try{for(d=document.styleSheets,i=0,a=d.length;i<a;i++){for(o=d[i],e=[],o.cssRules=o.cssRules,n=r=0,u=o.cssRules.length;r<u;n=++r)o.cssRules[n].type===CSSRule.STYLE_RULE&&t.test(o.cssRules[n].selectorText)&&e.unshift(n);for(s=0,c=e.length;s<c;s++)o.deleteRule(e[s])}}catch(t){}},0)},c.Utils.isInView=function(t,n){var e=u(t);if(!e.is(":visible"))return!1;var o=c.$win.scrollLeft(),i=c.$win.scrollTop(),r=e.offset(),s=r.left,a=r.top;return n=u.extend({topoffset:0,leftoffset:0},n),a+e.height()>=i&&a-n.topoffset<=i+c.$win.height()&&s+e.width()>=o&&s-n.leftoffset<=o+c.$win.width()},c.Utils.checkDisplay=function(t,n){var e=c.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!e.length&&(e=u(t)),e.trigger("display.uk.check"),n&&("string"!=typeof n&&(n='[class*="uk-animation-"]'),e.find(n).each(function(){var t=c.$(this),n=t.attr("class").match(/uk-animation-(.+)/);t.removeClass(n[0]).width(),t.addClass(n[0])})),e},c.Utils.options=function(t){if("string"!=u.type(t))return t;-1!=t.indexOf(":")&&"}"!=t.trim().substr(-1)&&(t="{"+t+"}");var n=t?t.indexOf("{"):-1,e={};if(-1!=n)try{e=c.Utils.str2json(t.substr(n))}catch(t){}return e},c.Utils.animate=function(t,n){var e=u.Deferred();return(t=c.$(t)).css("display","none").addClass(n).one(c.support.animation.end,function(){t.removeClass(n),e.resolve()}),t.css("display",""),e.promise()},c.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},c.Utils.template=function(t,n){for(var e,o,i,r,s=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),a=0,u=[],c=0;a<s.length;){if((e=s[a]).match(/\{\{\s*(.+?)\s*\}\}/))switch(o=(e=s[a+=1])[0],i=e.substring(e.match(/^(\^|\#|\!|\~|\:)/)?1:0),o){case"~":u.push("for(var $i=0;$i<"+i+".length;$i++) { var $item = "+i+"[$i];"),c++;break;case":":u.push("for(var $key in "+i+") { var $val = "+i+"[$key];"),c++;break;case"#":u.push("if("+i+") {"),c++;break;case"^":u.push("if(!"+i+") {"),c++;break;case"/":u.push("}"),c--;break;case"!":u.push("__ret.push("+i+");");break;default:u.push("__ret.push(escape("+i+"));")}else u.push("__ret.push('"+e.replace(/\'/g,"\\'")+"');");a+=1}return r=new Function("$data",["var __ret = [];","try {","with($data){",c?'__ret = ["Not all blocks are closed correctly."]':u.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),n?r(n):r},c.Utils.focus=function(t,n){if(!(t=u(t)).length)return t;var e,o=t.find("[autofocus]:first");return o.length?o.focus():(o=t.find(":input"+(n&&","+n||"")).first()).length?o.focus():(t.attr("tabindex")||(e=1e3,t.attr("tabindex",e)),t[0].focus(),e&&t.attr("tabindex",""),t)},c.Utils.events={},c.Utils.events.click=c.support.touch?"tap":"click",c.fn=function(t,e){var o=arguments,n=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),i=n[1],r=n[2];return c[i]?this.each(function(){var t=u(this),n=t.data(i);n||t.data(i,n=c[i](this,r?void 0:e)),r&&n[r].apply(n,Array.prototype.slice.call(o,1))}):(u.error("UIkit component ["+i+"] does not exist."),this)},u.UIkit=c,u.fn.uk=c.fn,c.langdirection="rtl"==c.$html.attr("dir")?"right":"left",c.components={},c.component=function(o,t,n){if(c.components[o]&&!n)return c.components[o];var i=function(t,n){var e=this;return this.UIkit=c,this.element=t?c.$(t):null,this.options=u.extend(!0,{},this.defaults,n),this.plugins={},this.element&&this.element.data(o,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(i.plugins)).forEach(function(t){i.plugins[t].init&&(i.plugins[t].init(e),e.plugins[t]=!0)}),this.trigger("init.uk.component",[o,this]),this};return i.plugins={},u.extend(!0,i.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,n,e){return c.$(this.element||this).on(t,n,e)},one:function(t,n,e){return c.$(this.element||this).one(t,n,e)},off:function(t){return c.$(this.element||this).off(t)},trigger:function(t,n){return c.$(this.element||this).trigger(t,n)},find:function(t){return c.$(this.element?this.element:[]).find(t)},proxy:function(n,t){var e=this;t.split(" ").forEach(function(t){e[t]||(e[t]=function(){return n[t].apply(n,arguments)})})},mixin:function(n,t){var e=this;t.split(" ").forEach(function(t){e[t]||(e[t]=n[t].bind(e))})},option:function(){if(1==arguments.length)return this.options[arguments[0]]||void 0;2==arguments.length&&(this.options[arguments[0]]=arguments[1])}},t),this.components[o]=i,this[o]=function(){var t,n;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?t=u(arguments[0]):n=arguments[0];break;case 2:t=u(arguments[0]),n=arguments[1]}return t&&t.data(o)?t.data(o):new c.components[o](t,n)},c.domready&&c.component.boot(o),i},c.plugin=function(t,n,e){this.components[t].plugins[n]=e},c.component.boot=function(t){c.components[t].prototype&&c.components[t].prototype.boot&&!c.components[t].booted&&(c.components[t].prototype.boot.apply(c,[]),c.components[t].booted=!0)},c.component.bootComponents=function(){for(var t in c.components)c.component.boot(t)},c.domObservers=[],c.domready=!1,c.ready=function(t){c.domObservers.push(t),c.domready&&t(document)},c.on=function(t,n,e){return t&&-1<t.indexOf("ready.uk.dom")&&c.domready&&n.apply(c.$doc),c.$doc.on(t,n,e)},c.one=function(t,n,e){return t&&-1<t.indexOf("ready.uk.dom")&&c.domready?(n.apply(c.$doc),c.$doc):c.$doc.one(t,n,e)},c.trigger=function(t,n){return c.$doc.trigger(t,n)},c.domObserve=function(t,o){c.support.mutationobserver&&(o=o||function(){},c.$(t).each(function(){var n=this,e=c.$(n);if(!e.data("observer"))try{var t=new c.support.mutationobserver(c.Utils.debounce(function(t){o.apply(n,[e]),e.trigger("changed.uk.dom")},50),{childList:!0,subtree:!0});t.observe(n,{childList:!0,subtree:!0}),e.data("observer",t)}catch(t){}}))},c.init=function(n){n=n||document,c.domObservers.forEach(function(t){t(n)})},c.on("domready.uk.dom",function(){c.init(),c.domready&&c.Utils.checkDisplay()}),document.addEventListener("DOMContentLoaded",(i=function(){c.$body=c.$("body"),c.trigger("beforeready.uk.dom"),c.component.bootComponents();var e,o,t,i=requestAnimationFrame((e={dir:{x:0,y:0},x:window.pageXOffset,y:window.pageYOffset},o=function(){var t=window.pageXOffset,n=window.pageYOffset;e.x==t&&e.y==n||(t!=e.x?e.dir.x=t>e.x?1:-1:e.dir.x=0,n!=e.y?e.dir.y=n>e.y?1:-1:e.dir.y=0,e.x=t,e.y=n,c.$doc.trigger("scrolling.uk.document",[{dir:{x:e.dir.x,y:e.dir.y},x:t,y:n}])),cancelAnimationFrame(i),i=requestAnimationFrame(o)},c.support.touch&&c.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",o),(e.x||e.y)&&o(),o));if(c.trigger("domready.uk.dom"),c.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&c.$win.on("load orientationchange resize",c.Utils.debounce((t=function(){return u(".uk-height-viewport").css("height",window.innerHeight),t})(),100)),c.trigger("afterready.uk.dom"),c.domready=!0,c.support.mutationobserver){var n=c.Utils.debounce(function(){requestAnimationFrame(function(){c.init(document.body)})},10);new c.support.mutationobserver(function(t){var o=!1;t.every(function(t){if("childList"!=t.type)return!0;for(var n,e=0;e<t.addedNodes.length;++e)if((n=t.addedNodes[e]).outerHTML&&-1!==n.outerHTML.indexOf("data-uk-"))return(o=!0)&&!1;return!0}),o&&n()}).observe(document.body,{childList:!0,subtree:!0})}},"complete"!=document.readyState&&"interactive"!=document.readyState||setTimeout(i),i)),c.$html.addClass(c.support.touch?"uk-touch":"uk-notouch"),c.support.touch){var s,a=!1,d="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";c.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){a&&u("."+d).removeClass(d),a=u(this).addClass(d)}).on("mouseleave touchend MSPointerUp pointerup",function(t){s=u(t.target).parents(l),a&&a.not(s).removeClass(d)})}return c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvY29yZS5qcyJdLCJuYW1lcyI6WyJjb3JlIiwiZGVmaW5lIiwiYW1kIiwidWlraXQiLCJ3aW5kb3ciLCJVSWtpdDIiLCJqUXVlcnkiLCJkb2N1bWVudCIsImxvYWQiLCJyZXMiLCJyZXEiLCJvbmxvYWQiLCJjb25maWciLCJpIiwicmVzb3VyY2VzIiwic3BsaXQiLCJiYXNlIiwicmVwbGFjZSIsIkVycm9yIiwibGVuZ3RoIiwicmVzb3VyY2UiLCJwdXNoIiwiZ2xvYmFsIiwiJCIsImRvYyIsInRyYW5zaXRpb25FbmQiLCJhbmltYXRpb25FbmQiLCJkb21SZWFkeSIsIlVJIiwiX1VJIiwiVUlraXQiLCJ1bmRlZmluZWQiLCJ2ZXJzaW9uIiwibm9Db25mbGljdCIsImZuIiwidWsiLCIkZG9jIiwiJHdpbiIsIiRodG1sIiwic3VwcG9ydCIsInRyYW5zaXRpb24iLCJuYW1lIiwiZWxlbWVudCIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJ0cmFuc0VuZEV2ZW50TmFtZXMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwic3R5bGUiLCJlbmQiLCJhbmltYXRpb24iLCJhbmltRW5kRXZlbnROYW1lcyIsIldlYmtpdEFuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInZlbmRvcnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2cCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwiY2FsbGJhY2siLCJuZXh0VGltZSIsIk1hdGgiLCJtYXgiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwidG91Y2giLCJEb2N1bWVudFRvdWNoIiwibXNQb2ludGVyRW5hYmxlZCIsIm1zTWF4VG91Y2hQb2ludHMiLCJwb2ludGVyRW5hYmxlZCIsIm1heFRvdWNoUG9pbnRzIiwibXV0YXRpb25vYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiVXRpbHMiLCJpc0Z1bGxzY3JlZW4iLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50IiwibXNGdWxsc2NyZWVuRWxlbWVudCIsImZ1bGxzY3JlZW5FbGVtZW50Iiwic3RyMmpzb24iLCJzdHIiLCJub3RldmlsIiwiSlNPTiIsInBhcnNlIiwiXyIsIiQxIiwiRnVuY3Rpb24iLCJlIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJjYWxsTm93IiwiYXBwbHkiLCJ0aHJvdHRsZSIsImxpbWl0IiwiY2FsbCIsInJlbW92ZUNzc1J1bGVzIiwic2VsZWN0b3JSZWdFeCIsImlkeCIsImlkeHMiLCJzdHlsZXNoZWV0IiwiX2kiLCJfaiIsIl9rIiwiX2xlbiIsIl9sZW4xIiwiX2xlbjIiLCJfcmVmIiwic3R5bGVTaGVldHMiLCJjc3NSdWxlcyIsInR5cGUiLCJDU1NSdWxlIiwiU1RZTEVfUlVMRSIsInNlbGVjdG9yVGV4dCIsInVuc2hpZnQiLCJkZWxldGVSdWxlIiwiX2Vycm9yIiwiaXNJblZpZXciLCJvcHRpb25zIiwiJGVsZW1lbnQiLCJpcyIsIndpbmRvd19sZWZ0Iiwic2Nyb2xsTGVmdCIsIndpbmRvd190b3AiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJsZWZ0IiwidG9wIiwiZXh0ZW5kIiwidG9wb2Zmc2V0IiwibGVmdG9mZnNldCIsImhlaWdodCIsIndpZHRoIiwiY2hlY2tEaXNwbGF5IiwiaW5pdGFuaW1hdGlvbiIsImVsZW1lbnRzIiwidHJpZ2dlciIsImZpbmQiLCJlYWNoIiwiZWxlIiwiYW5pbSIsImF0dHIiLCJtYXRjaCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzdHJpbmciLCJpbmRleE9mIiwidHJpbSIsInN1YnN0ciIsInN0YXJ0IiwiYW5pbWF0ZSIsImNscyIsImQiLCJEZWZlcnJlZCIsImNzcyIsIm9uZSIsInJlc29sdmUiLCJwcm9taXNlIiwidWlkIiwicHJlZml4IiwiY2VpbCIsInJhbmRvbSIsInRlbXBsYXRlIiwiZGF0YSIsInRvYyIsImNtZCIsInByb3AiLCJ0b2tlbnMiLCJvdXRwdXQiLCJvcGVuYmxvY2tzIiwic3Vic3RyaW5nIiwiam9pbiIsImZvY3VzIiwiZXh0cmEiLCJ0YWJpZHgiLCJhdXRvZm9jdXMiLCJmaXJzdCIsImV2ZW50cyIsImNsaWNrIiwiY29tbWFuZCIsImNvbXBvbmVudCIsIm1ldGhvZCIsIiR0aGlzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImVycm9yIiwibGFuZ2RpcmVjdGlvbiIsImNvbXBvbmVudHMiLCJkZWYiLCJvdmVycmlkZSIsImRlZmF1bHRzIiwicGx1Z2lucyIsImluaXQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInBsdWdpbiIsImJvb3QiLCJvbiIsImExIiwiYTIiLCJhMyIsIm9mZiIsImV2dCIsInBhcmFtcyIsInNlbGVjdG9yIiwicHJveHkiLCJvYmoiLCJtZXRob2RzIiwibWl4aW4iLCJiaW5kIiwib3B0aW9uIiwibm9kZVR5cGUiLCJkb21yZWFkeSIsImJvb3RlZCIsImJvb3RDb21wb25lbnRzIiwiZG9tT2JzZXJ2ZXJzIiwicmVhZHkiLCJkb21PYnNlcnZlIiwib2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwib2JzZXJ2ZSIsInJvb3QiLCJhZGRFdmVudExpc3RlbmVyIiwiJGJvZHkiLCJtZW1vcnkiLCJyYWZUb2tlbiIsImRpciIsIngiLCJ5IiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIndweG8iLCJ3cHlvIiwiaW5uZXJIZWlnaHQiLCJpbml0Rm4iLCJldmVyeSIsIm11dGF0aW9uIiwibm9kZSIsImFkZGVkTm9kZXMiLCJvdXRlckhUTUwiLCJyZWFkeVN0YXRlIiwiZXhjbHVkZSIsImhvdmVyc2V0IiwiaG92ZXJjbHMiLCJ0YXJnZXQi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SUFHUEEsR0FBTTZDLE1BRVZkLFFBQVF4TyxTQUFTb0MsS0FBTSxDQUFDa00sV0FBVyxFQUFNQyxTQUFTLE1BSW5DLFlBQXZCdk8sU0FBUzRQLFlBQW1ELGVBQXZCNVAsU0FBUzRQLFlBQzlDNUwsV0FBVzVDLEdBR1JBLElBS1hDLEVBQUdVLE1BQU15SCxTQUFTbkksRUFBR1csUUFBUWtDLE1BQVEsV0FBYSxjQUc5QzdDLEVBQUdXLFFBQVFrQyxNQUFPLENBRWxCLElBQ0kyTCxFQURBQyxHQUFXLEVBRVhDLEVBQVcsV0FDWHpDLEVBQVcseUZBRWZqTSxFQUFHVSxNQUFNZ0wsR0FBRyxrREFBbURPLEVBQVUsV0FFakV3QyxHQUFVOU8sRUFBRSxJQUFJK08sR0FBVXhHLFlBQVl3RyxHQUUxQ0QsRUFBVzlPLEVBQUVnRixNQUFNd0QsU0FBU3VHLEtBRTdCaEQsR0FBRyw0Q0FBNkMsU0FBU3RILEdBRXhEb0ssRUFBVTdPLEVBQUV5RSxFQUFFdUssUUFBUUMsUUFBUTNDLEdBRTFCd0MsR0FDQUEsRUFBU0ksSUFBSUwsR0FBU3RHLFlBQVl3RyxLQUs5QyxPQUFPMU8iLCJmaWxlIjoiY29yZS9jb3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIFVJa2l0IDIuMjcuMiB8IGh0dHA6Ly93d3cuZ2V0dWlraXQuY29tIHwgKGMpIDIwMTQgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xyXG4oZnVuY3Rpb24oY29yZSkge1xyXG5cclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgeyAvLyBBTURcclxuXHJcbiAgICAgICAgZGVmaW5lKCd1aWtpdCcsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICB2YXIgdWlraXQgPSB3aW5kb3cuVUlraXQyIHx8IGNvcmUod2luZG93LCB3aW5kb3cualF1ZXJ5LCB3aW5kb3cuZG9jdW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgdWlraXQubG9hZCA9IGZ1bmN0aW9uKHJlcywgcmVxLCBvbmxvYWQsIGNvbmZpZykge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZXMgPSByZXMuc3BsaXQoJywnKSwgbG9hZCA9IFtdLCBpLCBiYXNlID0gKGNvbmZpZy5jb25maWcgJiYgY29uZmlnLmNvbmZpZy51aWtpdCAmJiBjb25maWcuY29uZmlnLnVpa2l0LmJhc2UgPyBjb25maWcuY29uZmlnLnVpa2l0LmJhc2UgOiAnJykucmVwbGFjZSgvXFwvKyQvZywgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghYmFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGRlZmluZSBiYXNlIHBhdGggdG8gVUlraXQgaW4gdGhlIHJlcXVpcmVqcyBjb25maWcuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlc291cmNlcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlc1tpXS5yZXBsYWNlKC9cXC4vZywgJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkLnB1c2goYmFzZSsnL2NvbXBvbmVudHMvJytyZXNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxKGxvYWQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ubG9hZCh1aWtpdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1aWtpdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXdpbmRvdy5qUXVlcnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VJa2l0IDIueCByZXF1aXJlcyBqUXVlcnknKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5qUXVlcnkgJiYgIXdpbmRvdy5VSWtpdDIpIHtcclxuICAgICAgICBjb3JlKHdpbmRvdywgd2luZG93LmpRdWVyeSwgd2luZG93LmRvY3VtZW50KTtcclxuICAgIH1cclxuXHJcbn0pKGZ1bmN0aW9uKGdsb2JhbCwgJCwgZG9jKSB7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIFVJID0ge30sIF9VSSA9IGdsb2JhbC5VSWtpdCB8fCB1bmRlZmluZWQ7XHJcblxyXG4gICAgVUkudmVyc2lvbiA9ICcyLjI3LjInO1xyXG5cclxuICAgIFVJLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyByZXN0b3JlIFVJa2l0IHZlcnNpb25cclxuICAgICAgICBpZiAoX1VJKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbC5VSWtpdCA9IF9VSTtcclxuICAgICAgICAgICAgJC5VSWtpdCAgICAgID0gX1VJO1xyXG4gICAgICAgICAgICAkLmZuLnVrICAgICAgPSBfVUkuZm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gVUk7XHJcbiAgICB9O1xyXG5cclxuICAgIGdsb2JhbC5VSWtpdDIgPSBVSTtcclxuXHJcbiAgICBpZiAoIV9VSSkge1xyXG4gICAgICAgIGdsb2JhbC5VSWtpdCA9IFVJO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNhY2hlIGpRdWVyeVxyXG4gICAgVUkuJCA9ICQ7XHJcblxyXG4gICAgVUkuJGRvYyAgPSBVSS4kKGRvY3VtZW50KTtcclxuICAgIFVJLiR3aW4gID0gVUkuJCh3aW5kb3cpO1xyXG4gICAgVUkuJGh0bWwgPSBVSS4kKCdodG1sJyk7XHJcblxyXG4gICAgVUkuc3VwcG9ydCA9IHt9O1xyXG4gICAgVUkuc3VwcG9ydC50cmFuc2l0aW9uID0gKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgdHJhbnNpdGlvbkVuZCA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jLmJvZHkgfHwgZG9jLmRvY3VtZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xyXG4gICAgICAgICAgICAgICAgfSwgbmFtZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHJldHVybiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNpdGlvbkVuZCAmJiB7IGVuZDogdHJhbnNpdGlvbkVuZCB9O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBVSS5zdXBwb3J0LmFuaW1hdGlvbiA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGFuaW1hdGlvbkVuZCA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jLmJvZHkgfHwgZG9jLmRvY3VtZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGFuaW1FbmRFdmVudE5hbWVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFdlYmtpdEFuaW1hdGlvbiA6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE1vekFuaW1hdGlvbiAgICA6ICdhbmltYXRpb25lbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE9BbmltYXRpb24gICAgICA6ICdvQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiAgICAgICA6ICdhbmltYXRpb25lbmQnXHJcbiAgICAgICAgICAgICAgICB9LCBuYW1lO1xyXG5cclxuICAgICAgICAgICAgZm9yIChuYW1lIGluIGFuaW1FbmRFdmVudE5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gYW5pbUVuZEV2ZW50TmFtZXNbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gYW5pbWF0aW9uRW5kICYmIHsgZW5kOiBhbmltYXRpb25FbmQgfTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsXHJcbiAgICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9kYXJpdXMvcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIERhdGUubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcclxuXHJcbiAgICAgICAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93W3ZwKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIC8vIGlPUzYgaXMgYnVnZ3lcclxuICAgICAgICAgICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgbGFzdFRpbWUgPSAwO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2xlYXJUaW1lb3V0O1xyXG4gICAgICAgIH1cclxuICAgIH0oKSk7XHJcblxyXG4gICAgVUkuc3VwcG9ydC50b3VjaCA9IChcclxuICAgICAgICAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQpIHx8XHJcbiAgICAgICAgKGdsb2JhbC5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2YgZ2xvYmFsLkRvY3VtZW50VG91Y2gpICB8fFxyXG4gICAgICAgIChnbG9iYWwubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgJiYgZ2xvYmFsLm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkgfHwgLy9JRSAxMFxyXG4gICAgICAgIChnbG9iYWwubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkICYmIGdsb2JhbC5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAvL0lFID49MTFcclxuICAgICAgICBmYWxzZVxyXG4gICAgKTtcclxuXHJcbiAgICBVSS5zdXBwb3J0Lm11dGF0aW9ub2JzZXJ2ZXIgPSAoZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHwgbnVsbCk7XHJcblxyXG4gICAgVUkuVXRpbHMgPSB7fTtcclxuXHJcbiAgICBVSS5VdGlscy5pc0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMuc3RyMmpzb24gPSBmdW5jdGlvbihzdHIsIG5vdGV2aWwpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobm90ZXZpbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd3JhcCBrZXlzIHdpdGhvdXQgcXVvdGUgd2l0aCB2YWxpZCBkb3VibGUgcXVvdGVcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFtcXCRcXHddKylcXHMqOi9nLCBmdW5jdGlvbihfLCAkMSl7cmV0dXJuICdcIicrJDErJ1wiOic7fSlcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNpbmcgc2luZ2xlIHF1b3RlIHdyYXBwZWQgb25lcyB0byBkb3VibGUgcXVvdGVcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJyhbXiddKyknL2csIGZ1bmN0aW9uKF8sICQxKXtyZXR1cm4gJ1wiJyskMSsnXCInO30pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oJycsICd2YXIganNvbiA9ICcgKyBzdHIgKyAnOyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShqc29uKSk7JykpKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoKGUpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgdmFyIHRpbWVvdXQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy50aHJvdHRsZSA9IGZ1bmN0aW9uIChmdW5jLCBsaW1pdCkge1xyXG4gICAgICAgIHZhciB3YWl0ID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF3YWl0KSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgIHdhaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgbGltaXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5yZW1vdmVDc3NSdWxlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yUmVnRXgpIHtcclxuICAgICAgICB2YXIgaWR4LCBpZHhzLCBzdHlsZXNoZWV0LCBfaSwgX2osIF9rLCBfbGVuLCBfbGVuMSwgX2xlbjIsIF9yZWY7XHJcblxyXG4gICAgICAgIGlmKCFzZWxlY3RvclJlZ0V4KSByZXR1cm47XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBfcmVmID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XHJcbiAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0ID0gX3JlZltfaV07XHJcbiAgICAgICAgICAgICAgICBpZHhzID0gW107XHJcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmNzc1J1bGVzID0gc3R5bGVzaGVldC5jc3NSdWxlcztcclxuICAgICAgICAgICAgICAgIGZvciAoaWR4ID0gX2ogPSAwLCBfbGVuMSA9IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBpZHggPSArK19qKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXNoZWV0LmNzc1J1bGVzW2lkeF0udHlwZSA9PT0gQ1NTUnVsZS5TVFlMRV9SVUxFICYmIHNlbGVjdG9yUmVnRXgudGVzdChzdHlsZXNoZWV0LmNzc1J1bGVzW2lkeF0uc2VsZWN0b3JUZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkeHMudW5zaGlmdChpZHgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKF9rID0gMCwgX2xlbjIgPSBpZHhzLmxlbmd0aDsgX2sgPCBfbGVuMjsgX2srKykge1xyXG4gICAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmRlbGV0ZVJ1bGUoaWR4c1tfa10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7fVxyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5pc0luVmlldyA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgd2luZG93X2xlZnQgPSBVSS4kd2luLnNjcm9sbExlZnQoKSwgd2luZG93X3RvcCA9IFVJLiR3aW4uc2Nyb2xsVG9wKCksIG9mZnNldCA9ICRlbGVtZW50Lm9mZnNldCgpLCBsZWZ0ID0gb2Zmc2V0LmxlZnQsIHRvcCA9IG9mZnNldC50b3A7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7dG9wb2Zmc2V0OjAsIGxlZnRvZmZzZXQ6MH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAodG9wICsgJGVsZW1lbnQuaGVpZ2h0KCkgPj0gd2luZG93X3RvcCAmJiB0b3AgLSBvcHRpb25zLnRvcG9mZnNldCA8PSB3aW5kb3dfdG9wICsgVUkuJHdpbi5oZWlnaHQoKSAmJlxyXG4gICAgICAgICAgICBsZWZ0ICsgJGVsZW1lbnQud2lkdGgoKSA+PSB3aW5kb3dfbGVmdCAmJiBsZWZ0IC0gb3B0aW9ucy5sZWZ0b2Zmc2V0IDw9IHdpbmRvd19sZWZ0ICsgVUkuJHdpbi53aWR0aCgpKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5ID0gZnVuY3Rpb24oY29udGV4dCwgaW5pdGFuaW1hdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBVSS4kKCdbZGF0YS11ay1tYXJnaW5dLCBbZGF0YS11ay1ncmlkLW1hdGNoXSwgW2RhdGEtdWstZ3JpZC1tYXJnaW5dLCBbZGF0YS11ay1jaGVjay1kaXNwbGF5XScsIGNvbnRleHQgfHwgZG9jdW1lbnQpLCBhbmltYXRlZDtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgIWVsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBlbGVtZW50cyA9ICQoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50cy50cmlnZ2VyKCdkaXNwbGF5LnVrLmNoZWNrJyk7XHJcblxyXG4gICAgICAgIC8vIGZpeCBmaXJlZm94IC8gSUUgYW5pbWF0aW9uc1xyXG4gICAgICAgIGlmIChpbml0YW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGluaXRhbmltYXRpb24pIT0nc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaW5pdGFuaW1hdGlvbiA9ICdbY2xhc3MqPVwidWstYW5pbWF0aW9uLVwiXSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLmZpbmQoaW5pdGFuaW1hdGlvbikuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGUgID0gVUkuJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjbHMgID0gZWxlLmF0dHIoJ2NsYXNzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbSA9IGNscy5tYXRjaCgvdWstYW5pbWF0aW9uLSguKykvKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGUucmVtb3ZlQ2xhc3MoYW5pbVswXSkud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGUuYWRkQ2xhc3MoYW5pbVswXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5vcHRpb25zID0gZnVuY3Rpb24oc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIGlmICgkLnR5cGUoc3RyaW5nKSE9J3N0cmluZycpIHJldHVybiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGlmIChzdHJpbmcuaW5kZXhPZignOicpICE9IC0xICYmIHN0cmluZy50cmltKCkuc3Vic3RyKC0xKSAhPSAnfScpIHtcclxuICAgICAgICAgICAgc3RyaW5nID0gJ3snK3N0cmluZysnfSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc3RhcnQgPSAoc3RyaW5nID8gc3RyaW5nLmluZGV4T2YoXCJ7XCIpIDogLTEpLCBvcHRpb25zID0ge307XHJcblxyXG4gICAgICAgIGlmIChzdGFydCAhPSAtMSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IFVJLlV0aWxzLnN0cjJqc29uKHN0cmluZy5zdWJzdHIoc3RhcnQpKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5hbmltYXRlID0gZnVuY3Rpb24oZWxlbWVudCwgY2xzKSB7XHJcblxyXG4gICAgICAgIHZhciBkID0gJC5EZWZlcnJlZCgpO1xyXG5cclxuICAgICAgICBlbGVtZW50ID0gVUkuJChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpLmFkZENsYXNzKGNscykub25lKFVJLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoY2xzKTtcclxuICAgICAgICAgICAgZC5yZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLnVpZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xyXG4gICAgICAgIHJldHVybiAocHJlZml4IHx8ICdpZCcpICsgKG5ldyBEYXRlKCkuZ2V0VGltZSgpKStcIlJBTkRcIisoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApKTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMudGVtcGxhdGUgPSBmdW5jdGlvbihzdHIsIGRhdGEpIHtcclxuXHJcbiAgICAgICAgdmFyIHRva2VucyA9IHN0ci5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykucmVwbGFjZSgvXFx7XFx7XFx7XFxzKiguKz8pXFxzKlxcfVxcfVxcfS9nLCBcInt7ISQxfX1cIikuc3BsaXQoLyhcXHtcXHtcXHMqKC4rPylcXHMqXFx9XFx9KS9nKSxcclxuICAgICAgICAgICAgaT0wLCB0b2MsIGNtZCwgcHJvcCwgdmFsLCBmbiwgb3V0cHV0ID0gW10sIG9wZW5ibG9ja3MgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZShpIDwgdG9rZW5zLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgdG9jID0gdG9rZW5zW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYodG9jLm1hdGNoKC9cXHtcXHtcXHMqKC4rPylcXHMqXFx9XFx9LykpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgIHRvYyAgPSB0b2tlbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjbWQgID0gdG9jWzBdO1xyXG4gICAgICAgICAgICAgICAgcHJvcCA9IHRvYy5zdWJzdHJpbmcodG9jLm1hdGNoKC9eKFxcXnxcXCN8XFwhfFxcfnxcXDopLykgPyAxOjApO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjbWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd+JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJ2Zvcih2YXIgJGk9MDskaTwnK3Byb3ArJy5sZW5ndGg7JGkrKykgeyB2YXIgJGl0ZW0gPSAnK3Byb3ArJ1skaV07Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ibG9ja3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnOic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKCdmb3IodmFyICRrZXkgaW4gJytwcm9wKycpIHsgdmFyICR2YWwgPSAnK3Byb3ArJ1ska2V5XTsnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmJsb2NrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcjJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJ2lmKCcrcHJvcCsnKSB7Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ibG9ja3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnXic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKCdpZighJytwcm9wKycpIHsnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmJsb2NrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcvJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJ30nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmJsb2Nrcy0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICchJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJ19fcmV0LnB1c2goJytwcm9wKycpOycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCgnX19yZXQucHVzaChlc2NhcGUoJytwcm9wKycpKTsnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChcIl9fcmV0LnB1c2goJ1wiK3RvYy5yZXBsYWNlKC9cXCcvZywgXCJcXFxcJ1wiKStcIicpO1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gaSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbiAgPSBuZXcgRnVuY3Rpb24oJyRkYXRhJywgW1xyXG4gICAgICAgICAgICAndmFyIF9fcmV0ID0gW107JyxcclxuICAgICAgICAgICAgJ3RyeSB7JyxcclxuICAgICAgICAgICAgJ3dpdGgoJGRhdGEpeycsICghb3BlbmJsb2NrcyA/IG91dHB1dC5qb2luKCcnKSA6ICdfX3JldCA9IFtcIk5vdCBhbGwgYmxvY2tzIGFyZSBjbG9zZWQgY29ycmVjdGx5LlwiXScpLCAnfTsnLFxyXG4gICAgICAgICAgICAnfWNhdGNoKGUpe19fcmV0ID0gW2UubWVzc2FnZV07fScsXHJcbiAgICAgICAgICAgICdyZXR1cm4gX19yZXQuam9pbihcIlwiKS5yZXBsYWNlKC9cXFxcblxcXFxuL2csIFwiXFxcXG5cIik7JyxcclxuICAgICAgICAgICAgXCJmdW5jdGlvbiBlc2NhcGUoaHRtbCkgeyByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXFxcIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTt9XCJcclxuICAgICAgICBdLmpvaW4oXCJcXG5cIikpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YSA/IGZuKGRhdGEpIDogZm47XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLmZvY3VzID0gZnVuY3Rpb24oZWxlbWVudCwgZXh0cmEpIHtcclxuXHJcbiAgICAgICAgZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYXV0b2ZvY3VzID0gZWxlbWVudC5maW5kKCdbYXV0b2ZvY3VzXTpmaXJzdCcpLCB0YWJpZHg7XHJcblxyXG4gICAgICAgIGlmIChhdXRvZm9jdXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdXRvZm9jdXMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF1dG9mb2N1cyA9IGVsZW1lbnQuZmluZCgnOmlucHV0JysoZXh0cmEgJiYgKCcsJytleHRyYSkgfHwgJycpKS5maXJzdCgpO1xyXG5cclxuICAgICAgICBpZiAoYXV0b2ZvY3VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXV0b2ZvY3VzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSkge1xyXG4gICAgICAgICAgICB0YWJpZHggPSAxMDAwO1xyXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgdGFiaWR4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnRbMF0uZm9jdXMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRhYmlkeCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgVUkuVXRpbHMuZXZlbnRzICAgICAgID0ge307XHJcbiAgICBVSS5VdGlscy5ldmVudHMuY2xpY2sgPSBVSS5zdXBwb3J0LnRvdWNoID8gJ3RhcCcgOiAnY2xpY2snO1xyXG5cclxuICAgIC8vIGRlcHJlY2F0ZWRcclxuXHJcbiAgICBVSS5mbiA9IGZ1bmN0aW9uKGNvbW1hbmQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsIGNtZCA9IGNvbW1hbmQubWF0Y2goL14oW2EtelxcLV0rKSg/OlxcLihbYS16XSspKT8vaSksIGNvbXBvbmVudCA9IGNtZFsxXSwgbWV0aG9kID0gY21kWzJdO1xyXG5cclxuICAgICAgICBpZiAoIVVJW2NvbXBvbmVudF0pIHtcclxuICAgICAgICAgICAgJC5lcnJvcignVUlraXQgY29tcG9uZW50IFsnICsgY29tcG9uZW50ICsgJ10gZG9lcyBub3QgZXhpc3QuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgZGF0YSA9ICR0aGlzLmRhdGEoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKGNvbXBvbmVudCwgKGRhdGEgPSBVSVtjb21wb25lbnRdKHRoaXMsIG1ldGhvZCA/IHVuZGVmaW5lZCA6IG9wdGlvbnMpKSk7XHJcbiAgICAgICAgICAgIGlmIChtZXRob2QpIGRhdGFbbWV0aG9kXS5hcHBseShkYXRhLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICQuVUlraXQgICAgICAgICAgPSBVSTtcclxuICAgICQuZm4udWsgICAgICAgICAgPSBVSS5mbjtcclxuXHJcbiAgICBVSS5sYW5nZGlyZWN0aW9uID0gVUkuJGh0bWwuYXR0cihcImRpclwiKSA9PSBcInJ0bFwiID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XHJcblxyXG4gICAgVUkuY29tcG9uZW50cyAgICA9IHt9O1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCA9IGZ1bmN0aW9uKG5hbWUsIGRlZiwgb3ZlcnJpZGUpIHtcclxuXHJcbiAgICAgICAgaWYgKFVJLmNvbXBvbmVudHNbbmFtZV0gJiYgIW92ZXJyaWRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBVSS5jb21wb25lbnRzW25hbWVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuVUlraXQgICA9IFVJO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50ID8gVUkuJChlbGVtZW50KSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zID0ge307XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZGF0YShuYW1lLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0KCk7XHJcblxyXG4gICAgICAgICAgICAodGhpcy5vcHRpb25zLnBsdWdpbnMubGVuZ3RoID8gdGhpcy5vcHRpb25zLnBsdWdpbnMgOiBPYmplY3Qua2V5cyhmbi5wbHVnaW5zKSkuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm4ucGx1Z2luc1twbHVnaW5dLmluaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmbi5wbHVnaW5zW3BsdWdpbl0uaW5pdCgkdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMucGx1Z2luc1twbHVnaW5dID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbml0LnVrLmNvbXBvbmVudCcsIFtuYW1lLCB0aGlzXSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmbi5wbHVnaW5zID0ge307XHJcblxyXG4gICAgICAgICQuZXh0ZW5kKHRydWUsIGZuLnByb3RvdHlwZSwge1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdHMgOiB7cGx1Z2luczogW119LFxyXG5cclxuICAgICAgICAgICAgYm9vdDogZnVuY3Rpb24oKXt9LFxyXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbigpe30sXHJcblxyXG4gICAgICAgICAgICBvbjogZnVuY3Rpb24oYTEsYTIsYTMpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLiQodGhpcy5lbGVtZW50IHx8IHRoaXMpLm9uKGExLGEyLGEzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIG9uZTogZnVuY3Rpb24oYTEsYTIsYTMpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLiQodGhpcy5lbGVtZW50IHx8IHRoaXMpLm9uZShhMSxhMixhMyk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2dCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVUkuJCh0aGlzLmVsZW1lbnQgfHwgdGhpcykub2ZmKGV2dCk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihldnQsIHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLiQodGhpcy5lbGVtZW50IHx8IHRoaXMpLnRyaWdnZXIoZXZ0LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgZmluZDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS4kKHRoaXMuZWxlbWVudCA/IHRoaXMuZWxlbWVudDogW10pLmZpbmQoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgcHJveHk6IGZ1bmN0aW9uKG9iaiwgbWV0aG9kcykge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgbWV0aG9kcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkdGhpc1ttZXRob2RdKSAkdGhpc1ttZXRob2RdID0gZnVuY3Rpb24oKSB7IHJldHVybiBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3VtZW50cyk7IH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIG1peGluOiBmdW5jdGlvbihvYmosIG1ldGhvZHMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIG1ldGhvZHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHRoaXNbbWV0aG9kXSkgJHRoaXNbbWV0aG9kXSA9IG9ialttZXRob2RdLmJpbmQoJHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBvcHRpb246IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW2FyZ3VtZW50c1swXV0gfHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbYXJndW1lbnRzWzBdXSA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LCBkZWYpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbXBvbmVudHNbbmFtZV0gPSBmbjtcclxuXHJcbiAgICAgICAgdGhpc1tuYW1lXSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQsIG9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnIHx8IGFyZ3VtZW50c1swXS5ub2RlVHlwZSB8fCBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBqUXVlcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSAkKGFyZ3VtZW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gJChhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5kYXRhKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5kYXRhKG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKG5ldyBVSS5jb21wb25lbnRzW25hbWVdKGVsZW1lbnQsIG9wdGlvbnMpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgVUkuY29tcG9uZW50LmJvb3QobmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLnBsdWdpbiA9IGZ1bmN0aW9uKGNvbXBvbmVudCwgbmFtZSwgZGVmKSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudF0ucGx1Z2luc1tuYW1lXSA9IGRlZjtcclxuICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50LmJvb3QgPSBmdW5jdGlvbihuYW1lKSB7XHJcblxyXG4gICAgICAgIGlmIChVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZSAmJiBVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZS5ib290ICYmICFVSS5jb21wb25lbnRzW25hbWVdLmJvb3RlZCkge1xyXG4gICAgICAgICAgICBVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZS5ib290LmFwcGx5KFVJLCBbXSk7XHJcbiAgICAgICAgICAgIFVJLmNvbXBvbmVudHNbbmFtZV0uYm9vdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLmNvbXBvbmVudC5ib290Q29tcG9uZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBjb21wb25lbnQgaW4gVUkuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBVSS5jb21wb25lbnQuYm9vdChjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIERPTSBtdXRhdGlvbiBzYXZlIHJlYWR5IGhlbHBlciBmdW5jdGlvblxyXG5cclxuICAgIFVJLmRvbU9ic2VydmVycyA9IFtdO1xyXG4gICAgVUkuZG9tcmVhZHkgICAgID0gZmFsc2U7XHJcblxyXG4gICAgVUkucmVhZHkgPSBmdW5jdGlvbihmbikge1xyXG5cclxuICAgICAgICBVSS5kb21PYnNlcnZlcnMucHVzaChmbik7XHJcblxyXG4gICAgICAgIGlmIChVSS5kb21yZWFkeSkge1xyXG4gICAgICAgICAgICBmbihkb2N1bWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBVSS5vbiA9IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuXHJcbiAgICAgICAgaWYgKGExICYmIGExLmluZGV4T2YoJ3JlYWR5LnVrLmRvbScpID4gLTEgJiYgVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgYTIuYXBwbHkoVUkuJGRvYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gVUkuJGRvYy5vbihhMSxhMixhMyk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLm9uZSA9IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuXHJcbiAgICAgICAgaWYgKGExICYmIGExLmluZGV4T2YoJ3JlYWR5LnVrLmRvbScpID4gLTEgJiYgVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgYTIuYXBwbHkoVUkuJGRvYyk7XHJcbiAgICAgICAgICAgIHJldHVybiBVSS4kZG9jO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFVJLiRkb2Mub25lKGExLGEyLGEzKTtcclxuICAgIH07XHJcblxyXG4gICAgVUkudHJpZ2dlciA9IGZ1bmN0aW9uKGV2dCwgcGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIFVJLiRkb2MudHJpZ2dlcihldnQsIHBhcmFtcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLmRvbU9ic2VydmUgPSBmdW5jdGlvbihzZWxlY3RvciwgZm4pIHtcclxuXHJcbiAgICAgICAgaWYoIVVJLnN1cHBvcnQubXV0YXRpb25vYnNlcnZlcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBmbiA9IGZuIHx8IGZ1bmN0aW9uKCkge307XHJcblxyXG4gICAgICAgIFVJLiQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgJGVsZW1lbnQgPSBVSS4kKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRlbGVtZW50LmRhdGEoJ29ic2VydmVyJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgVUkuc3VwcG9ydC5tdXRhdGlvbm9ic2VydmVyKFVJLlV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uKG11dGF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIFskZWxlbWVudF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQudWsuZG9tJyk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MCksIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXNzIGluIHRoZSB0YXJnZXQgbm9kZSwgYXMgd2VsbCBhcyB0aGUgb2JzZXJ2ZXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKCdvYnNlcnZlcicsIG9ic2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge31cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuaW5pdCA9IGZ1bmN0aW9uKHJvb3QpIHtcclxuXHJcbiAgICAgICAgcm9vdCA9IHJvb3QgfHwgZG9jdW1lbnQ7XHJcblxyXG4gICAgICAgIFVJLmRvbU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uKGZuKXtcclxuICAgICAgICAgICAgZm4ocm9vdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLm9uKCdkb21yZWFkeS51ay5kb20nLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICBVSS5pbml0KCk7XHJcblxyXG4gICAgICAgIGlmIChVSS5kb21yZWFkeSkgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgdmFyIGRvbVJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBVSS4kYm9keSA9IFVJLiQoJ2JvZHknKTtcclxuXHJcbiAgICAgICAgICAgIFVJLnRyaWdnZXIoJ2JlZm9yZXJlYWR5LnVrLmRvbScpO1xyXG5cclxuICAgICAgICAgICAgVUkuY29tcG9uZW50LmJvb3RDb21wb25lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBjdXN0b20gc2Nyb2xsIG9ic2VydmVyXHJcbiAgICAgICAgICAgIHZhciByYWZUb2tlbiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWVtb3J5ID0ge2Rpcjoge3g6MCwgeTowfSwgeDogd2luZG93LnBhZ2VYT2Zmc2V0LCB5OndpbmRvdy5wYWdlWU9mZnNldH07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZWFkaW5nIHRoaXMgKHdpbmRvdy5wYWdlW1h8WV1PZmZzZXQpIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWNhbGMgb2YgdGhlIGxheW91dCBpbiBDaHJvbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gd2Ugb25seSB3YW50IHRvIGRvIHRoaXMgb25jZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3cHhvID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3cHlvID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBEaWQgdGhlIHNjcm9sbCBwb3NpdGlvbiBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgdGltZSB3ZSB3ZXJlIGhlcmU/XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbW9yeS54ICE9IHdweG8gfHwgbWVtb3J5LnkgIT0gd3B5bykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXJlY3Rpb24gb2YgdGhlIHNjcm9sbCBhbmQgc3RvcmUgdGhlIG5ldyBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod3B4byAhPSBtZW1vcnkueCkge21lbW9yeS5kaXIueCA9IHdweG8gPiBtZW1vcnkueCA/IDE6LTE7IH0gZWxzZSB7IG1lbW9yeS5kaXIueCA9IDA7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdweW8gIT0gbWVtb3J5LnkpIHttZW1vcnkuZGlyLnkgPSB3cHlvID4gbWVtb3J5LnkgPyAxOi0xOyB9IGVsc2UgeyBtZW1vcnkuZGlyLnkgPSAwOyB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnkueCA9IHdweG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbW9yeS55ID0gd3B5bztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGhlIHNjcm9sbCBldmVudCwgdGhpcyBjb3VsZCBwcm9iYWJseSBiZSBzZW50IHVzaW5nIG1lbW9yeS5jbG9uZSgpIGJ1dCB0aGlzIGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vcmUgZXhwbGljaXQgYW5kIGVhc2llciB0byBzZWUgZXhhY3RseSB3aGF0IGlzIGJlaW5nIHNlbnQgaW4gdGhlIGV2ZW50LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS4kZG9jLnRyaWdnZXIoJ3Njcm9sbGluZy51ay5kb2N1bWVudCcsIFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHt4OiBtZW1vcnkuZGlyLngsIHk6IG1lbW9yeS5kaXIueX0sIHg6IHdweG8sIHk6IHdweW9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhZlRva2VuID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFVJLnN1cHBvcnQudG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBVSS4kaHRtbC5vbigndG91Y2htb3ZlIHRvdWNoZW5kIE1TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgcG9pbnRlcm1vdmUgcG9pbnRlcnVwJywgZm4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZW1vcnkueCB8fCBtZW1vcnkueSkgZm4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm47XHJcblxyXG4gICAgICAgICAgICB9KSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJ1biBjb21wb25lbnQgaW5pdCBmdW5jdGlvbnMgb24gZG9tXHJcbiAgICAgICAgICAgIFVJLnRyaWdnZXIoJ2RvbXJlYWR5LnVrLmRvbScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKFVJLnN1cHBvcnQudG91Y2gpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY3NzIGhvdmVyIHJ1bGVzIGZvciB0b3VjaCBkZXZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBVSS5VdGlscy5yZW1vdmVDc3NSdWxlcygvXFwudWstKD8hbmF2YmFyKS4qOmhvdmVyLyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdmlld3BvcnQgdW5pdCBmaXggZm9yIHVrLWhlaWdodC12aWV3cG9ydCAtIHNob3VsZCBiZSBmaXhlZCBpbiBpT1MgOFxyXG4gICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS9nKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBVSS4kd2luLm9uKCdsb2FkIG9yaWVudGF0aW9uY2hhbmdlIHJlc2l6ZScsIFVJLlV0aWxzLmRlYm91bmNlKChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcudWstaGVpZ2h0LXZpZXdwb3J0JykuY3NzKCdoZWlnaHQnLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pKCksIDEwMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBVSS50cmlnZ2VyKCdhZnRlcnJlYWR5LnVrLmRvbScpO1xyXG5cclxuICAgICAgICAgICAgLy8gbWFyayB0aGF0IGRvbXJlYWR5IGlzIGxlZnQgYmVoaW5kXHJcbiAgICAgICAgICAgIFVJLmRvbXJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGF1dG8gaW5pdCBqcyBjb21wb25lbnRzXHJcbiAgICAgICAgICAgIGlmIChVSS5zdXBwb3J0Lm11dGF0aW9ub2JzZXJ2ZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaW5pdEZuID0gVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXsgVUkuaW5pdChkb2N1bWVudC5ib2R5KTt9KTtcclxuICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAobmV3IFVJLnN1cHBvcnQubXV0YXRpb25vYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zLmV2ZXJ5KGZ1bmN0aW9uKG11dGF0aW9uKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlICE9ICdjaGlsZExpc3QnKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBub2RlOyBpIDwgbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7ICsraSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBtdXRhdGlvbi5hZGRlZE5vZGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm91dGVySFRNTCAmJiBub2RlLm91dGVySFRNTC5pbmRleE9mKCdkYXRhLXVrLScpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaW5pdCA9IHRydWUpICYmIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdCkgaW5pdEZuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSkpLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChkb21SZWFkeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZG9tUmVhZHk7XHJcblxyXG4gICAgfSgpKTtcclxuXHJcbiAgICAvLyBhZGQgdG91Y2ggaWRlbnRpZmllciBjbGFzc1xyXG4gICAgVUkuJGh0bWwuYWRkQ2xhc3MoVUkuc3VwcG9ydC50b3VjaCA/ICd1ay10b3VjaCcgOiAndWstbm90b3VjaCcpO1xyXG5cclxuICAgIC8vIGFkZCB1ay1ob3ZlciBjbGFzcyBvbiB0YXAgdG8gc3VwcG9ydCBvdmVybGF5cyBvbiB0b3VjaCBkZXZpY2VzXHJcbiAgICBpZiAoVUkuc3VwcG9ydC50b3VjaCkge1xyXG5cclxuICAgICAgICB2YXIgaG92ZXJzZXQgPSBmYWxzZSxcclxuICAgICAgICAgICAgZXhjbHVkZSxcclxuICAgICAgICAgICAgaG92ZXJjbHMgPSAndWstaG92ZXInLFxyXG4gICAgICAgICAgICBzZWxlY3RvciA9ICcudWstb3ZlcmxheSwgLnVrLW92ZXJsYXktaG92ZXIsIC51ay1vdmVybGF5LXRvZ2dsZSwgLnVrLWFuaW1hdGlvbi1ob3ZlciwgLnVrLWhhcy1ob3Zlcic7XHJcblxyXG4gICAgICAgIFVJLiRodG1sLm9uKCdtb3VzZWVudGVyIHRvdWNoc3RhcnQgTVNQb2ludGVyRG93biBwb2ludGVyZG93bicsIHNlbGVjdG9yLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3ZlcnNldCkgJCgnLicraG92ZXJjbHMpLnJlbW92ZUNsYXNzKGhvdmVyY2xzKTtcclxuXHJcbiAgICAgICAgICAgIGhvdmVyc2V0ID0gJCh0aGlzKS5hZGRDbGFzcyhob3ZlcmNscyk7XHJcblxyXG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlIHRvdWNoZW5kIE1TUG9pbnRlclVwIHBvaW50ZXJ1cCcsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgIGV4Y2x1ZGUgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3ZlcnNldCkge1xyXG4gICAgICAgICAgICAgICAgaG92ZXJzZXQubm90KGV4Y2x1ZGUpLnJlbW92ZUNsYXNzKGhvdmVyY2xzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBVSTtcclxufSk7Il19
