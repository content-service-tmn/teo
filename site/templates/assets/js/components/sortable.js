!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-sortable",["uikit"],function(){return e||t(UIkit2)})}(function(l){"use strict";var i,d,h,u,p,c,f,g,m,v="ontouchstart"in window||"MSGesture"in window||window.DocumentTouch&&document instanceof DocumentTouch,b=v?"MSGesture"in window?"pointerdown":"touchstart":"mousedown",C=v?"MSGesture"in window?"pointermove":"touchmove":"mousemove",$=v?"MSGesture"in window?"pointerup":"touchend":"mouseup";return l.component("sortable",{defaults:{animation:150,threshold:10,childClass:"uk-sortable-item",placeholderClass:"uk-sortable-placeholder",overClass:"uk-sortable-over",draggingClass:"uk-sortable-dragged",dragMovingClass:"uk-sortable-moving",baseClass:"uk-sortable",noDragClass:"uk-sortable-nodrag",emptyClass:"uk-sortable-empty",dragCustomClass:"",handleClass:!1,group:!1,stop:function(){},start:function(){},change:function(){}},boot:function(){l.ready(function(t){l.$("[data-uk-sortable]",t).each(function(){var t=l.$(this);t.data("sortable")||l.sortable(t,l.Utils.options(t.attr("data-uk-sortable")))})}),l.$html.on(C,function(t){if(p){var e=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0]:t;(Math.abs(e.pageX-p.pos.x)>p.threshold||Math.abs(e.pageY-p.pos.y)>p.threshold)&&p.apply(e)}if(i){u||(u=!0,i.show(),i.$current.addClass(i.$sortable.options.placeholderClass),i.$sortable.element.children().addClass(i.$sortable.options.childClass),l.$html.addClass(i.$sortable.options.dragMovingClass));var o=i.data("mouse-offset"),n=t.originalEvent.touches&&t.originalEvent.touches[0]||t.originalEvent,s=parseInt(n.pageX,10)+o.left,a=parseInt(n.pageY,10)+o.top;if(i.css({left:s,top:a}),a+i.height()/3>document.body.offsetHeight)return;a<l.$win.scrollTop()?l.$win.scrollTop(l.$win.scrollTop()-Math.ceil(i.height()/3)):a+i.height()/3>window.innerHeight+l.$win.scrollTop()&&l.$win.scrollTop(l.$win.scrollTop()+Math.ceil(i.height()/3))}}),l.$html.on($,function(t){if(p=!1,d&&i){var e=function(t){t=l.$(t);do{if(t.data("sortable"))return t;t=l.$(t).parent()}while(t.length);return t}(d),o=i.$sortable,n={type:t.type};e[0]&&o.dragDrop(n,o.element),o.dragEnd(n,o.element)}else d=i=null})},init:function(){var a=this,r=this.element[0];c=[],this.checkEmptyList(),this.element.data("sortable-group",this.options.group?this.options.group:l.Utils.uid("sortable-group"));var t=s(function(t){if(!t.data||!t.data.sortable){var e=l.$(t.target),o=e.is("a[href]")?e:e.parents("a[href]");if(!e.is(":input")){if(a.options.handleClass)if(!(e.hasClass(a.options.handleClass)?e:e.closest("."+a.options.handleClass,a.element)).length)return;return t.preventDefault(),o.length&&o.one("click",function(t){t.preventDefault()}).one($,function(){f||(o.trigger("click"),v&&o.attr("href").trim()&&(location.href=o.attr("href")))}),t.data=t.data||{},t.data.sortable=r,a.dragStart(t,this)}}}),e=s(l.Utils.debounce(function(t){return a.dragEnter(t,this)})),o=s(function(t){var e=a.dragenterData(this);a.dragenterData(this,e-1),a.dragenterData(this)||(l.$(this).removeClass(a.options.overClass),a.dragenterData(this,!1))}),n=s(function(t){return!d||d===this||h===this||(a.element.children().removeClass(a.options.overClass),h=this,a.moveElementNextTo(d,this),function(t){t.stopPropagation&&t.stopPropagation();t.preventDefault&&t.preventDefault();t.returnValue=!1}(t))});function s(s){return function(t){var e,o,n;(m=t)&&(o=(e=t.touches&&t.touches[0]||t).target||t.target,v&&document.elementFromPoint&&(o=document.elementFromPoint(e.pageX-document.body.scrollLeft,e.pageY-document.body.scrollTop)),g=l.$(o)),l.$(o).hasClass("."+a.options.childClass)?s.apply(o,[t]):o!==r&&(n=function(t,e){var o=e;if(o==t)return null;for(;o;){if(o.parentNode===t)return o;if(!(o=o.parentNode)||!o.ownerDocument||11===o.nodeType)break}return null}(r,o))&&s.apply(n,[t])}}this.addDragHandlers=function(){v&&m.touches&&m.touches.length?r.addEventListener(C,n,!1):(r.addEventListener("mouseover",e,!1),r.addEventListener("mouseout",o,!1))},this.removeDragHandlers=function(){v&&m.touches&&m.touches.length?r.removeEventListener(C,n,!1):(r.removeEventListener("mouseover",e,!1),r.removeEventListener("mouseout",o,!1))},window.addEventListener(C,function(t){d&&a.dragMove(t,a)},!1),r.addEventListener(b,t,!1)},dragStart:function(t,e){u=f=!1;var o=this,n=l.$(t.target);if((v||2!=t.button)&&!n.is("."+o.options.noDragClass)&&!n.closest("."+o.options.noDragClass).length&&!n.is(":input")){d=e,i&&i.remove();var s=l.$(d),a=s.offset(),r=t.touches&&t.touches[0]||t;p={pos:{x:r.pageX,y:r.pageY},threshold:o.options.handleClass?1:o.options.threshold,apply:function(t){(i=l.$('<div class="'+[o.options.draggingClass,o.options.dragCustomClass].join(" ")+'"></div>').css({display:"none",top:a.top,left:a.left,width:s.width(),height:s.height(),padding:s.css("padding")}).data({"mouse-offset":{left:a.left-parseInt(r.pageX,10),top:a.top-parseInt(r.pageY,10)},origin:o.element,index:s.index()}).append(s.html()).appendTo("body")).$current=s,i.$sortable=o,s.data({"start-list":s.parent(),"start-index":s.index(),"sortable-group":o.options.group}),o.addDragHandlers(),o.options.start(this,d),o.trigger("start.uk.sortable",[o,d,i]),p=!(f=!0)}}}},dragMove:function(t,e){var o,n=(g=l.$(document.elementFromPoint(t.pageX-(document.body.scrollLeft||document.scrollLeft||0),t.pageY-(document.body.scrollTop||document.documentElement.scrollTop||0)))).closest("."+this.options.baseClass),s=n.data("sortable-group"),a=l.$(d),r=a.parent(),i=a.data("sortable-group");n[0]!==r[0]&&void 0!==i&&s===i&&(n.data("sortable").addDragHandlers(),c.push(n),n.children().addClass(this.options.childClass),0<n.children().length?(o=g.closest("."+this.options.childClass)).length?o.before(a):n.append(a):g.append(a),l.$doc.trigger("mouseover")),this.checkEmptyList(),this.checkEmptyList(r)},dragEnter:function(t,e){if(!d||d===e)return!0;var o=this.dragenterData(e);if(this.dragenterData(e,o+1),0===o){var n=l.$(e).parent(),s=l.$(d).data("start-list");if(n[0]!==s[0]){var a=n.data("sortable-group"),r=l.$(d).data("sortable-group");if((a||r)&&a!=r)return!1}l.$(e).addClass(this.options.overClass),this.moveElementNextTo(d,e)}return!1},dragEnd:function(t,e){var o=this;d&&(this.options.stop(e),this.trigger("stop.uk.sortable",[this])),h=d=null,c.push(this.element),c.forEach(function(t,e){l.$(t).children().each(function(){1===this.nodeType&&(l.$(this).removeClass(o.options.overClass).removeClass(o.options.placeholderClass).removeClass(o.options.childClass),o.dragenterData(this,!1))})}),c=[],l.$html.removeClass(this.options.dragMovingClass),this.removeDragHandlers(),i&&(i.remove(),i=null)},dragDrop:function(t,e){"drop"===t.type&&(t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault()),this.triggerChangeEvents()},triggerChangeEvents:function(){if(d){var t=l.$(d),e=i.data("origin"),o=t.closest("."+this.options.baseClass),n=[],s=l.$(d);e[0]===o[0]&&i.data("index")!=t.index()?n.push({sortable:this,mode:"moved"}):e[0]!=o[0]&&n.push({sortable:l.$(o).data("sortable"),mode:"added"},{sortable:l.$(e).data("sortable"),mode:"removed"}),n.forEach(function(t,e){t.sortable&&t.sortable.element.trigger("change.uk.sortable",[t.sortable,s,t.mode])})}},dragenterData:function(t,e){if(t=l.$(t),1==arguments.length)return parseInt(t.data("child-dragenter"),10)||0;e?t.data("child-dragenter",Math.max(0,e)):t.removeData("child-dragenter")},moveElementNextTo:function(t,e){!0;var o=this,n=l.$(t).parent().css("min-height",""),s=function(t,e){var o=t.parentNode;if(e.parentNode!=o)return!1;var n=t.previousSibling;for(;n&&9!==n.nodeType;){if(n===e)return!0;n=n.previousSibling}return!1}(t,e)?e:e.nextSibling,a=n.children(),r=a.length;if(!o.options.animation)return e.parentNode.insertBefore(t,s),void l.Utils.checkDisplay(o.element.parent());n.css("min-height",n.height()),a.stop().each(function(){var t=l.$(this),e=t.position();e.width=t.width(),t.data("offset-before",e)}),e.parentNode.insertBefore(t,s),l.Utils.checkDisplay(o.element.parent()),(a=n.children().each(function(){var t=l.$(this);t.data("offset-after",t.position())}).each(function(){var t=l.$(this),e=t.data("offset-before");t.css({position:"absolute",top:e.top,left:e.left,minWidth:e.width})})).each(function(){var t=l.$(this),e=(t.data("offset-before"),t.data("offset-after"));t.css("pointer-events","none").width(),setTimeout(function(){t.animate({top:e.top,left:e.left},o.options.animation,function(){t.css({position:"",top:"",left:"",minWidth:"","pointer-events":""}).removeClass(o.options.overClass).removeData("child-dragenter"),--r||(n.css("min-height",""),l.Utils.checkDisplay(o.element.parent()))})},0)})},serialize:function(){var a,r,i=[];return this.element.children().each(function(t,e){a={};for(var o,n,s=0;s<e.attributes.length;s++)0===(r=e.attributes[s]).name.indexOf("data-")&&(o=r.name.substr(5),n=l.Utils.str2json(r.value),a[o]=n||"false"==r.value||"0"==r.value?n:r.value);i.push(a)}),i},checkEmptyList:function(t){t=t?l.$(t):this.element,this.options.emptyClass&&t[t.children().length?"removeClass":"addClass"](this.options.emptyClass)}}),l.sortable});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
