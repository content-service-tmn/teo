!function(i){var t;window.UIkit2&&(t=i(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-slideshow",["uikit"],function(){return t||i(UIkit2)})}(function(l){"use strict";var u,p=0;l.component("slideshow",{defaults:{animation:"fade",duration:500,height:"auto",start:0,autoplay:!1,autoplayInterval:7e3,videoautoplay:!0,videomute:!0,slices:15,pauseOnHover:!0,kenburns:!1,kenburnsanimations:["uk-animation-middle-left","uk-animation-top-right","uk-animation-bottom-left","uk-animation-top-center","","uk-animation-bottom-right"]},current:!1,interval:null,hovering:!1,boot:function(){l.ready(function(i){l.$("[data-uk-slideshow]",i).each(function(){var i=l.$(this);i.data("slideshow")||l.slideshow(i,l.Utils.options(i.attr("data-uk-slideshow")))})})},init:function(){var s=this;this.container=this.element.hasClass("uk-slideshow")?this.element:l.$(this.find(".uk-slideshow:first")),this.current=this.options.start,this.animating=!1,this.fixFullscreen=navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&this.container.hasClass("uk-slideshow-fullscreen"),this.options.kenburns&&(this.kbanimduration=!0===this.options.kenburns?"15s":this.options.kenburns,String(this.kbanimduration).match(/(ms|s)$/)||(this.kbanimduration+="ms"),"string"==typeof this.options.kenburnsanimations&&(this.options.kenburnsanimations=this.options.kenburnsanimations.split(","))),this.update(),this.on("click.uk.slideshow","[data-uk-slideshow-item]",function(i){i.preventDefault();var t=l.$(this).attr("data-uk-slideshow-item");if(s.current!=t){switch(t){case"next":case"previous":s["next"==t?"next":"previous"]();break;default:s.show(parseInt(t,10))}s.stop()}}),l.$win.on("resize load",l.Utils.debounce(function(){s.resize(),s.fixFullscreen&&(s.container.css("height",window.innerHeight),s.slides.css("height",window.innerHeight))},100)),setTimeout(function(){s.resize()},80),this.options.autoplay&&this.start(),this.options.videoautoplay&&this.slides.eq(this.current).data("media")&&this.playmedia(this.slides.eq(this.current).data("media")),this.options.kenburns&&this.applyKenBurns(this.slides.eq(this.current)),this.container.on({mouseenter:function(){s.options.pauseOnHover&&(s.hovering=!0)},mouseleave:function(){s.hovering=!1}}),this.on("swipeRight swipeLeft",function(i){s["swipeLeft"==i.type?"next":"previous"]()}),this.on("display.uk.check",function(){s.element.is(":visible")&&(s.resize(),s.fixFullscreen&&(s.container.css("height",window.innerHeight),s.slides.css("height",window.innerHeight)))}),l.domObserve(this.element,function(i){s.container.children(":not([data-slideshow-slide])").not(".uk-slideshow-ghost").length&&s.update(!0)})},update:function(i){var u,h=this,c=0;this.slides=this.container.children(),this.slidesCount=this.slides.length,this.slides.eq(this.current).length||(this.current=0),this.slides.each(function(s){var i=l.$(this);if(!i.data("processed")){var e=i.children("img,video,iframe").eq(0),t="html";if(i.data("media",e),i.data("sizer",e),e.length){var a;switch(t=e[0].nodeName.toLowerCase(),e[0].nodeName){case"IMG":var n=l.$('<div class="uk-cover-background uk-position-cover"></div>').css({"background-image":"url("+e.attr("src")+")"});e.attr("width")&&e.attr("height")&&(a=l.$("<canvas></canvas>").attr({width:e.attr("width"),height:e.attr("height")}),e.replaceWith(a),e=a,a=void 0),e.css({width:"100%",height:"auto",opacity:0}),i.prepend(n).data("cover",n);break;case"IFRAME":var o=e[0].src,r="sw-"+ ++p;e.attr("src","").on("load",function(){if((s!==h.current||s==h.current&&!h.options.videoautoplay)&&h.pausemedia(e),h.options.videomute){h.mutemedia(e);var i=setInterval((t=0,function(){h.mutemedia(e),4<=++t&&clearInterval(i)}),250)}var t}).data("slideshow",h).attr("data-player-id",r).attr("src",[o,-1<o.indexOf("?")?"&":"?","enablejsapi=1&api=1&player_id="+r].join("")).addClass("uk-position-absolute"),l.support.touch||e.css("pointer-events","none"),a=!0,l.cover&&(l.cover(e),e.attr("data-uk-cover","{}"));break;case"VIDEO":e.addClass("uk-cover-object uk-position-absolute"),a=!0,h.options.videomute&&h.mutemedia(e)}if(a){u=l.$("<canvas></canvas>").attr({width:e[0].width,height:e[0].height});var d=l.$('<img style="width:100%;height:auto;">').attr("src",u[0].toDataURL());i.prepend(d),i.data("sizer",d)}}else i.data("sizer",i);h.hasKenBurns(i)&&i.data("cover").css({"-webkit-animation-duration":h.kbanimduration,"animation-duration":h.kbanimduration}),i.data("processed",++c),i.attr("data-slideshow-slide",t)}}),c&&(this.triggers=this.find("[data-uk-slideshow-item]"),this.slides.attr("aria-hidden","true").removeClass("uk-active").eq(this.current).addClass("uk-active").attr("aria-hidden","false"),this.triggers.filter('[data-uk-slideshow-item="'+this.current+'"]').addClass("uk-active")),i&&c&&this.resize()},resize:function(){if(!this.container.hasClass("uk-slideshow-fullscreen")){var i=this.options.height;"auto"===this.options.height&&(i=0,this.slides.css("height","").each(function(){i=Math.max(i,l.$(this).height())})),this.container.css("height",i),this.slides.css("height",i)}},show:function(i,t){if(!this.animating&&this.current!=i){this.animating=!0;var s=this,e=this.slides.eq(this.current),a=this.slides.eq(i),n=t||(this.current<i?1:-1),o=e.data("media"),r=u[this.options.animation]?this.options.animation:"fade",d=a.data("media");s.applyKenBurns(a),l.support.animation||(r="none"),e=l.$(e),a=l.$(a),s.trigger("beforeshow.uk.slideshow",[a,e,s]),u[r].apply(this,[e,a,n]).then(function(){s.animating&&(o&&o.is("video,iframe")&&s.pausemedia(o),d&&d.is("video,iframe")&&s.playmedia(d),a.addClass("uk-active").attr("aria-hidden","false"),e.removeClass("uk-active").attr("aria-hidden","true"),s.animating=!1,s.current=i,l.Utils.checkDisplay(a,'[class*="uk-animation-"]:not(.uk-cover-background.uk-position-cover)'),s.trigger("show.uk.slideshow",[a,e,s]))}),s.triggers.removeClass("uk-active"),s.triggers.filter('[data-uk-slideshow-item="'+i+'"]').addClass("uk-active")}},applyKenBurns:function(i){if(this.hasKenBurns(i)){var t=this.options.kenburnsanimations,s=this.kbindex||0;i.data("cover").attr("class","uk-cover-background uk-position-cover").width(),i.data("cover").addClass(["uk-animation-scale","uk-animation-reverse",t[s].trim()].join(" ")),this.kbindex=t[s+1]?s+1:0}},hasKenBurns:function(i){return this.options.kenburns&&i.data("cover")},next:function(){this.show(this.slides[this.current+1]?this.current+1:0,1)},previous:function(){this.show(this.slides[this.current-1]?this.current-1:this.slides.length-1,-1)},start:function(){this.stop();var i=this;this.interval=setInterval(function(){i.hovering||i.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},playmedia:function(i){if(i&&i[0])switch(i[0].nodeName){case"VIDEO":this.options.videomute||(i[0].muted=!1),i[0].play();break;case"IFRAME":this.options.videomute||i[0].contentWindow.postMessage('{ "event": "command", "func": "unmute", "method":"setVolume", "value":1}',"*"),i[0].contentWindow.postMessage('{ "event": "command", "func": "playVideo", "method":"play"}',"*")}},pausemedia:function(i){switch(i[0].nodeName){case"VIDEO":i[0].pause();break;case"IFRAME":i[0].contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "method":"pause"}',"*")}},mutemedia:function(i){switch(i[0].nodeName){case"VIDEO":i[0].muted=!0;break;case"IFRAME":i[0].contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}}}),u={none:function(){var i=l.$.Deferred();return i.resolve(),i.promise()},scroll:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1).one(l.support.animation.end,function(){i.css("opacity",0).removeClass(-1==s?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),t.removeClass(-1==s?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),e.resolve()}.bind(this)),i.addClass(-1==s?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),t.addClass(-1==s?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),t.width(),e.promise()},swipe:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1).one(l.support.animation.end,function(){i.css("opacity",0).removeClass(-1===s?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),t.removeClass(-1===s?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),e.resolve()}.bind(this)),i.addClass(-1==s?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),t.addClass(-1==s?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),t.width(),e.promise()},scale:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1),i.one(l.support.animation.end,function(){i.css("opacity",0).removeClass("uk-slideshow-scale-out"),e.resolve()}.bind(this)),i.addClass("uk-slideshow-scale-out"),i.width(),e.promise()},fade:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1),t.data("cover")||t.data("placeholder")||t.css("opacity",1).one(l.support.animation.end,function(){t.removeClass("uk-slideshow-fade-in")}).addClass("uk-slideshow-fade-in"),i.one(l.support.animation.end,function(){i.css("opacity",0).removeClass("uk-slideshow-fade-out"),e.resolve()}.bind(this)),i.addClass("uk-slideshow-fade-out"),i.width(),e.promise()}},l.slideshow.animations=u,window.addEventListener("message",function(i){var t,s=i.data;if("string"==typeof s)try{s=JSON.parse(s)}catch(i){s={}}i.origin&&-1<i.origin.indexOf("vimeo")&&"ready"==s.event&&s.player_id&&(t=l.$('[data-player-id="'+s.player_id+'"]')).length&&t.data("slideshow").mutemedia(t)},!1)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2xpZGVzaG93LmpzIl0sIm5hbWVzIjpbImFkZG9uIiwiY29tcG9uZW50Iiwid2luZG93IiwiVUlraXQyIiwiZGVmaW5lIiwiYW1kIiwiVUkiLCJBbmltYXRpb25zIiwicGxheWVySWQiLCJkZWZhdWx0cyIsImFuaW1hdGlvbiIsImR1cmF0aW9uIiwiaGVpZ2h0Iiwic3RhcnQiLCJhdXRvcGxheSIsImF1dG9wbGF5SW50ZXJ2YWwiLCJ2aWRlb2F1dG9wbGF5IiwidmlkZW9tdXRlIiwic2xpY2VzIiwicGF1c2VPbkhvdmVyIiwia2VuYnVybnMiLCJrZW5idXJuc2FuaW1hdGlvbnMiLCJjdXJyZW50IiwiaW50ZXJ2YWwiLCJob3ZlcmluZyIsImJvb3QiLCJyZWFkeSIsImNvbnRleHQiLCIkIiwiZWFjaCIsInNsaWRlc2hvdyIsInRoaXMiLCJkYXRhIiwiVXRpbHMiLCJvcHRpb25zIiwiYXR0ciIsImluaXQiLCIkdGhpcyIsImNvbnRhaW5lciIsImVsZW1lbnQiLCJoYXNDbGFzcyIsImZpbmQiLCJhbmltYXRpbmciLCJmaXhGdWxsc2NyZWVuIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJrYmFuaW1kdXJhdGlvbiIsIlN0cmluZyIsInNwbGl0IiwidXBkYXRlIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJzbGlkZSIsInNob3ciLCJwYXJzZUludCIsInN0b3AiLCIkd2luIiwiZGVib3VuY2UiLCJyZXNpemUiLCJjc3MiLCJpbm5lckhlaWdodCIsInNsaWRlcyIsInNldFRpbWVvdXQiLCJlcSIsInBsYXltZWRpYSIsImFwcGx5S2VuQnVybnMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInR5cGUiLCJpcyIsImRvbU9ic2VydmUiLCJjaGlsZHJlbiIsIm5vdCIsImxlbmd0aCIsImNhbnZhcyIsInByb2Nlc3NlZCIsInNsaWRlc0NvdW50IiwiaW5kZXgiLCJtZWRpYSIsInBsYWNlaG9sZGVyIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImNvdmVyIiwiYmFja2dyb3VuZC1pbWFnZSIsIndpZHRoIiwicmVwbGFjZVdpdGgiLCJ1bmRlZmluZWQiLCJvcGFjaXR5IiwicHJlcGVuZCIsInNyYyIsImlmcmFtZUlkIiwicGF1c2VtZWRpYSIsIm11dGVtZWRpYSIsImludiIsInNldEludGVydmFsIiwiaWMiLCJjbGVhckludGVydmFsIiwiaW5kZXhPZiIsImpvaW4iLCJhZGRDbGFzcyIsInN1cHBvcnQiLCJ0b3VjaCIsImltZyIsInRvRGF0YVVSTCIsImhhc0tlbkJ1cm5zIiwiLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24iLCJhbmltYXRpb24tZHVyYXRpb24iLCJ0cmlnZ2VycyIsInJlbW92ZUNsYXNzIiwiZmlsdGVyIiwiTWF0aCIsIm1heCIsImRpcmVjdGlvbiIsIm5leHQiLCJkaXIiLCJjdXJyZW50bWVkaWEiLCJuZXh0bWVkaWEiLCJ0cmlnZ2VyIiwiYXBwbHkiLCJ0aGVuIiwiY2hlY2tEaXNwbGF5IiwiYW5pbWF0aW9ucyIsImtiaW5kZXgiLCJ0cmltIiwicHJldmlvdXMiLCJtdXRlZCIsInBsYXkiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJwYXVzZSIsIm5vbmUiLCJkIiwiRGVmZXJyZWQiLCJyZXNvbHZlIiwicHJvbWlzZSIsInNjcm9sbCIsIm9uZSIsImVuZCIsImJpbmQiLCJzd2lwZSIsInNjYWxlIiwiZmFkZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpZnJhbWUiLCJKU09OIiwicGFyc2UiLCJlcnIiLCJvcmlnaW4iLCJldmVudCIsInBsYXllcl9pZCJdLCJtYXBwaW5ncyI6IkNBQ0EsU0FBVUEsR0FFTixJQUFJQyxFQUVBQyxPQUFPQyxTQUNQRixFQUFZRCxFQUFNRyxTQUdELG1CQUFWQyxRQUF3QkEsT0FBT0MsS0FDdENELE9BQU8sa0JBQW1CLENBQUMsU0FBVSxXQUNqQyxPQUFPSCxHQUFhRCxFQUFNRyxVQVZ0QyxDQWNHLFNBQVNHLEdBRVIsYUFFQSxJQUFJQyxFQUFZQyxFQUFXLEVBRTNC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RixFQUFLbkYsS0FBSyxnQkFFbENtRixFQUFLdEQsSUFBSSxVQUFXLEdBQUc2RSxJQUFJcEksRUFBR2dHLFFBQVE1RixVQUFVaUksSUFBSyxXQUNqRHhCLEVBQUtMLFlBQVksMEJBQ2xCVCxTQUFTLHdCQUdoQi9FLEVBQVFvSCxJQUFJcEksRUFBR2dHLFFBQVE1RixVQUFVaUksSUFBSyxXQUVsQ3JILEVBQVF1QyxJQUFJLFVBQVcsR0FBR2lELFlBQVkseUJBQ3RDdUIsRUFBRUUsV0FFSkssS0FBSzdHLE9BRVBULEVBQVErRSxTQUFTLHlCQUNqQi9FLEVBQVFnRSxRQUVEK0MsRUFBRUcsWUFJakJsSSxFQUFHd0IsVUFBVTZGLFdBQWFwSCxFQUcxQkwsT0FBTzhJLGlCQUFpQixVQUFXLFNBQTJCNUYsR0FFMUQsSUFBbUI2RixFQUFmakgsRUFBT29CLEVBQUVwQixLQUViLEdBQW9CLGlCQUFWLEVBRU4sSUFDSUEsRUFBT2tILEtBQUtDLE1BQU1uSCxHQUNwQixNQUFNb0gsR0FDSnBILEVBQU8sR0FJWG9CLEVBQUVpRyxTQUF1QyxFQUE3QmpHLEVBQUVpRyxPQUFPbEQsUUFBUSxVQUErQixTQUFkbkUsRUFBS3NILE9BQW9CdEgsRUFBS3VILFlBQzVFTixFQUFTM0ksRUFBR3NCLEVBQUUsb0JBQXFCSSxFQUFLdUgsVUFBVSxPQUV2QzVFLFFBQ1BzRSxFQUFPakgsS0FBSyxhQUFhOEQsVUFBVW1ELEtBRzVDIiwiZmlsZSI6ImNvbXBvbmVudHMvc2xpZGVzaG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIFVJa2l0IDIuMjcuMiB8IGh0dHA6Ly93d3cuZ2V0dWlraXQuY29tIHwgKGMpIDIwMTQgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xyXG4oZnVuY3Rpb24oYWRkb24pIHtcclxuXHJcbiAgICB2YXIgY29tcG9uZW50O1xyXG5cclxuICAgIGlmICh3aW5kb3cuVUlraXQyKSB7XHJcbiAgICAgICAgY29tcG9uZW50ID0gYWRkb24oVUlraXQyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoJ3Vpa2l0LXNsaWRlc2hvdycsIFsndWlraXQnXSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgfHwgYWRkb24oVUlraXQyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pKGZ1bmN0aW9uKFVJKSB7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIEFuaW1hdGlvbnMsIHBsYXllcklkID0gMDtcclxuXHJcbiAgICBVSS5jb21wb25lbnQoJ3NsaWRlc2hvdycsIHtcclxuXHJcbiAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uICAgICAgICAgIDogJ2ZhZGUnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbiAgICAgICAgICAgOiA1MDAsXHJcbiAgICAgICAgICAgIGhlaWdodCAgICAgICAgICAgICA6ICdhdXRvJyxcclxuICAgICAgICAgICAgc3RhcnQgICAgICAgICAgICAgIDogMCxcclxuICAgICAgICAgICAgYXV0b3BsYXkgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5SW50ZXJ2YWwgICA6IDcwMDAsXHJcbiAgICAgICAgICAgIHZpZGVvYXV0b3BsYXkgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIHZpZGVvbXV0ZSAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWNlcyAgICAgICAgICAgICA6IDE1LFxyXG4gICAgICAgICAgICBwYXVzZU9uSG92ZXIgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBrZW5idXJucyAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAga2VuYnVybnNhbmltYXRpb25zIDogW1xyXG4gICAgICAgICAgICAgICAgJ3VrLWFuaW1hdGlvbi1taWRkbGUtbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAndWstYW5pbWF0aW9uLXRvcC1yaWdodCcsXHJcbiAgICAgICAgICAgICAgICAndWstYW5pbWF0aW9uLWJvdHRvbS1sZWZ0JyxcclxuICAgICAgICAgICAgICAgICd1ay1hbmltYXRpb24tdG9wLWNlbnRlcicsXHJcbiAgICAgICAgICAgICAgICAnJywgLy8gbWlkZGxlLWNlbnRlclxyXG4gICAgICAgICAgICAgICAgJ3VrLWFuaW1hdGlvbi1ib3R0b20tcmlnaHQnXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjdXJyZW50ICA6IGZhbHNlLFxyXG4gICAgICAgIGludGVydmFsIDogbnVsbCxcclxuICAgICAgICBob3ZlcmluZyA6IGZhbHNlLFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJCgnW2RhdGEtdWstc2xpZGVzaG93XScsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZXNob3cgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNsaWRlc2hvdy5kYXRhKCdzbGlkZXNob3cnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5zbGlkZXNob3coc2xpZGVzaG93LCBVSS5VdGlscy5vcHRpb25zKHNsaWRlc2hvdy5hdHRyKCdkYXRhLXVrLXNsaWRlc2hvdycpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyICAgICA9IHRoaXMuZWxlbWVudC5oYXNDbGFzcygndWstc2xpZGVzaG93JykgPyB0aGlzLmVsZW1lbnQgOiBVSS4kKHRoaXMuZmluZCgnLnVrLXNsaWRlc2hvdzpmaXJzdCcpKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50ICAgICAgID0gdGhpcy5vcHRpb25zLnN0YXJ0O1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGluZyAgICAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZml4RnVsbHNjcmVlbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS9nKSAmJiB0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygndWstc2xpZGVzaG93LWZ1bGxzY3JlZW4nKTsgLy8gdmlld3BvcnQgdW5pdCBmaXggZm9yIGhlaWdodDoxMDB2aCAtIHNob3VsZCBiZSBmaXhlZCBpbiBpT1MgOFxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZW5idXJucykge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMua2JhbmltZHVyYXRpb24gPSB0aGlzLm9wdGlvbnMua2VuYnVybnMgPT09IHRydWUgPyAnMTVzJzogdGhpcy5vcHRpb25zLmtlbmJ1cm5zO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghU3RyaW5nKHRoaXMua2JhbmltZHVyYXRpb24pLm1hdGNoKC8obXN8cykkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtiYW5pbWR1cmF0aW9uICs9ICdtcyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZih0aGlzLm9wdGlvbnMua2VuYnVybnNhbmltYXRpb25zKSA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5rZW5idXJuc2FuaW1hdGlvbnMgPSB0aGlzLm9wdGlvbnMua2VuYnVybnNhbmltYXRpb25zLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdjbGljay51ay5zbGlkZXNob3cnLCAnW2RhdGEtdWstc2xpZGVzaG93LWl0ZW1dJywgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBVSS4kKHRoaXMpLmF0dHIoJ2RhdGEtdWstc2xpZGVzaG93LWl0ZW0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuY3VycmVudCA9PSBzbGlkZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChzbGlkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25leHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXNbc2xpZGU9PSduZXh0JyA/ICduZXh0JzoncHJldmlvdXMnXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5zaG93KHBhcnNlSW50KHNsaWRlLCAxMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICR0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBVSS4kd2luLm9uKFwicmVzaXplIGxvYWRcIiwgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5yZXNpemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZml4RnVsbHNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmNvbnRhaW5lci5jc3MoJ2hlaWdodCcsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuc2xpZGVzLmNzcygnaGVpZ2h0Jywgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTAwKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjaHJvbWUgaW1hZ2UgbG9hZCBmaXhcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgJHRoaXMucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH0sIDgwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBhdXRvcGxheVxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9wbGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmlkZW9hdXRvcGxheSAmJiB0aGlzLnNsaWRlcy5lcSh0aGlzLmN1cnJlbnQpLmRhdGEoJ21lZGlhJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheW1lZGlhKHRoaXMuc2xpZGVzLmVxKHRoaXMuY3VycmVudCkuZGF0YSgnbWVkaWEnKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VuYnVybnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlLZW5CdXJucyh0aGlzLnNsaWRlcy5lcSh0aGlzLmN1cnJlbnQpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIub24oe1xyXG4gICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7IGlmICgkdGhpcy5vcHRpb25zLnBhdXNlT25Ib3ZlcikgJHRoaXMuaG92ZXJpbmcgPSB0cnVlOyAgfSxcclxuICAgICAgICAgICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkgeyAkdGhpcy5ob3ZlcmluZyA9IGZhbHNlOyB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignc3dpcGVSaWdodCBzd2lwZUxlZnQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkdGhpc1tlLnR5cGU9PSdzd2lwZUxlZnQnID8gJ25leHQnIDogJ3ByZXZpb3VzJ10oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdkaXNwbGF5LnVrLmNoZWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5lbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZml4RnVsbHNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5jb250YWluZXIuY3NzKCdoZWlnaHQnLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5zbGlkZXMuY3NzKCdoZWlnaHQnLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBVSS5kb21PYnNlcnZlKHRoaXMuZWxlbWVudCwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmNvbnRhaW5lci5jaGlsZHJlbignOm5vdChbZGF0YS1zbGlkZXNob3ctc2xpZGVdKScpLm5vdCgnLnVrLXNsaWRlc2hvdy1naG9zdCcpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihyZXNpemUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXMsIGNhbnZhcywgcHJvY2Vzc2VkID0gMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzICAgICAgICA9IHRoaXMuY29udGFpbmVyLmNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzQ291bnQgICA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zbGlkZXMuZXEodGhpcy5jdXJyZW50KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5kYXRhKCdwcm9jZXNzZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWVkaWEgPSBzbGlkZS5jaGlsZHJlbignaW1nLHZpZGVvLGlmcmFtZScpLmVxKDApLCB0eXBlID0gJ2h0bWwnO1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLmRhdGEoJ21lZGlhJywgbWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuZGF0YSgnc2l6ZXInLCBtZWRpYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1lZGlhLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBtZWRpYVswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2gobWVkaWFbMF0ubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSU1HJzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY292ZXIgPSBVSS4kKCc8ZGl2IGNsYXNzPVwidWstY292ZXItYmFja2dyb3VuZCB1ay1wb3NpdGlvbi1jb3ZlclwiPjwvZGl2PicpLmNzcyh7J2JhY2tncm91bmQtaW1hZ2UnOid1cmwoJysgbWVkaWEuYXR0cignc3JjJykgKyAnKSd9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVkaWEuYXR0cignd2lkdGgnKSAmJiBtZWRpYS5hdHRyKCdoZWlnaHQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gVUkuJCgnPGNhbnZhcz48L2NhbnZhcz4nKS5hdHRyKHt3aWR0aDptZWRpYS5hdHRyKCd3aWR0aCcpLCBoZWlnaHQ6bWVkaWEuYXR0cignaGVpZ2h0Jyl9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYS5yZXBsYWNlV2l0aChwbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWEgPSBwbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYS5jc3Moe3dpZHRoOiAnMTAwJScsaGVpZ2h0OiAnYXV0bycsIG9wYWNpdHk6MH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUucHJlcGVuZChjb3ZlcikuZGF0YSgnY292ZXInLCBjb3Zlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lGUkFNRSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IG1lZGlhWzBdLnNyYywgaWZyYW1lSWQgPSAnc3ctJysoKytwbGF5ZXJJZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgJycpLm9uKCdsb2FkJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gJHRoaXMuY3VycmVudCB8fCAoaW5kZXggPT0gJHRoaXMuY3VycmVudCAmJiAhJHRoaXMub3B0aW9ucy52aWRlb2F1dG9wbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMucGF1c2VtZWRpYShtZWRpYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5vcHRpb25zLnZpZGVvbXV0ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLm11dGVtZWRpYShtZWRpYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludiA9IHNldEludGVydmFsKChmdW5jdGlvbihpYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMubXV0ZW1lZGlhKG1lZGlhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCsraWMgPj0gNCkgY2xlYXJJbnRlcnZhbChpbnYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKDApLCAyNTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoJ3NsaWRlc2hvdycsICR0aGlzKSAgLy8gYWRkIHNlbGYtcmVmZXJlbmNlIGZvciB0aGUgdmltZW8tcmVhZHkgbGlzdGVuZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1wbGF5ZXItaWQnLCBpZnJhbWVJZCkgIC8vIGFkZCBmcmFtZUlkIGZvciB0aGUgdmltZW8tcmVhZHkgbGlzdGVuZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgW3NyYywgKHNyYy5pbmRleE9mKCc/JykgPiAtMSA/ICcmJzonPycpLCAnZW5hYmxlanNhcGk9MSZhcGk9MSZwbGF5ZXJfaWQ9JytpZnJhbWVJZF0uam9pbignJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1ay1wb3NpdGlvbi1hYnNvbHV0ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgcG9pbnRlciBldmVudHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFVSS5zdXBwb3J0LnRvdWNoKSBtZWRpYS5jc3MoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFVJLmNvdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuY292ZXIobWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmF0dHIoJ2RhdGEtdWstY292ZXInLCAne30nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1ZJREVPJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZENsYXNzKCd1ay1jb3Zlci1vYmplY3QgdWstcG9zaXRpb24tYWJzb2x1dGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMub3B0aW9ucy52aWRlb211dGUpICR0aGlzLm11dGVtZWRpYShtZWRpYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcyAgPSBVSS4kKCc8Y2FudmFzPjwvY2FudmFzPicpLmF0dHIoeyd3aWR0aCc6IG1lZGlhWzBdLndpZHRoLCAnaGVpZ2h0JzogbWVkaWFbMF0uaGVpZ2h0fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBVSS4kKCc8aW1nIHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6YXV0bztcIj4nKS5hdHRyKCdzcmMnLCBjYW52YXNbMF0udG9EYXRhVVJMKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUucHJlcGVuZChpbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5kYXRhKCdzaXplcicsIGltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuZGF0YSgnc2l6ZXInLCBzbGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmhhc0tlbkJ1cm5zKHNsaWRlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5kYXRhKCdjb3ZlcicpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbic6ICR0aGlzLmtiYW5pbWR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogJHRoaXMua2JhbmltZHVyYXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzbGlkZS5kYXRhKCdwcm9jZXNzZWQnLCArK3Byb2Nlc3NlZCk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5hdHRyKCdkYXRhLXNsaWRlc2hvdy1zbGlkZScsIHR5cGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJzID0gdGhpcy5maW5kKCdbZGF0YS11ay1zbGlkZXNob3ctaXRlbV0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgc3RhcnQgc2xpZGVcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKS5yZW1vdmVDbGFzcygndWstYWN0aXZlJykuZXEodGhpcy5jdXJyZW50KS5hZGRDbGFzcygndWstYWN0aXZlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcnMuZmlsdGVyKCdbZGF0YS11ay1zbGlkZXNob3ctaXRlbT1cIicrdGhpcy5jdXJyZW50KydcIl0nKS5hZGRDbGFzcygndWstYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNpemUgJiYgcHJvY2Vzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygndWstc2xpZGVzaG93LWZ1bGxzY3JlZW4nKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMub3B0aW9ucy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5jc3MoJ2hlaWdodCcsICcnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgVUkuJCh0aGlzKS5oZWlnaHQoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY3NzKCdoZWlnaHQnLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLnNsaWRlcy5jc3MoJ2hlaWdodCcsIGhlaWdodCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oaW5kZXgsIGRpcmVjdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nIHx8IHRoaXMuY3VycmVudCA9PSBpbmRleCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzICAgICAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ICAgICAgPSB0aGlzLnNsaWRlcy5lcSh0aGlzLmN1cnJlbnQpLFxyXG4gICAgICAgICAgICAgICAgbmV4dCAgICAgICAgID0gdGhpcy5zbGlkZXMuZXEoaW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgZGlyICAgICAgICAgID0gZGlyZWN0aW9uID8gZGlyZWN0aW9uIDogdGhpcy5jdXJyZW50IDwgaW5kZXggPyAxIDogLTEsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50bWVkaWEgPSBjdXJyZW50LmRhdGEoJ21lZGlhJyksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24gICAgPSBBbmltYXRpb25zW3RoaXMub3B0aW9ucy5hbmltYXRpb25dID8gdGhpcy5vcHRpb25zLmFuaW1hdGlvbiA6ICdmYWRlJyxcclxuICAgICAgICAgICAgICAgIG5leHRtZWRpYSAgICA9IG5leHQuZGF0YSgnbWVkaWEnKSxcclxuICAgICAgICAgICAgICAgIGZpbmFsaXplICAgICA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISR0aGlzLmFuaW1hdGluZykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudG1lZGlhICYmIGN1cnJlbnRtZWRpYS5pcygndmlkZW8saWZyYW1lJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMucGF1c2VtZWRpYShjdXJyZW50bWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRtZWRpYSAmJiBuZXh0bWVkaWEuaXMoJ3ZpZGVvLGlmcmFtZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnBsYXltZWRpYShuZXh0bWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5hZGRDbGFzcygndWstYWN0aXZlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnJlbW92ZUNsYXNzKCd1ay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmN1cnJlbnQgICA9IGluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBVSS5VdGlscy5jaGVja0Rpc3BsYXkobmV4dCwgJ1tjbGFzcyo9XCJ1ay1hbmltYXRpb24tXCJdOm5vdCgudWstY292ZXItYmFja2dyb3VuZC51ay1wb3NpdGlvbi1jb3ZlciknKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignc2hvdy51ay5zbGlkZXNob3cnLCBbbmV4dCwgY3VycmVudCwgJHRoaXNdKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkdGhpcy5hcHBseUtlbkJ1cm5zKG5leHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gYW5pbWF0aW9uIGZhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmICghVUkuc3VwcG9ydC5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3VycmVudCA9IFVJLiQoY3VycmVudCk7XHJcbiAgICAgICAgICAgIG5leHQgICAgPSBVSS4kKG5leHQpO1xyXG5cclxuICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignYmVmb3Jlc2hvdy51ay5zbGlkZXNob3cnLCBbbmV4dCwgY3VycmVudCwgJHRoaXNdKTtcclxuXHJcbiAgICAgICAgICAgIEFuaW1hdGlvbnNbYW5pbWF0aW9uXS5hcHBseSh0aGlzLCBbY3VycmVudCwgbmV4dCwgZGlyXSkudGhlbihmaW5hbGl6ZSk7XHJcblxyXG4gICAgICAgICAgICAkdGhpcy50cmlnZ2Vycy5yZW1vdmVDbGFzcygndWstYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICR0aGlzLnRyaWdnZXJzLmZpbHRlcignW2RhdGEtdWstc2xpZGVzaG93LWl0ZW09XCInK2luZGV4KydcIl0nKS5hZGRDbGFzcygndWstYWN0aXZlJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYXBwbHlLZW5CdXJuczogZnVuY3Rpb24oc2xpZGUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNLZW5CdXJucyhzbGlkZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLm9wdGlvbnMua2VuYnVybnNhbmltYXRpb25zLFxyXG4gICAgICAgICAgICAgICAgaW5kZXggICAgICA9IHRoaXMua2JpbmRleCB8fCAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHNsaWRlLmRhdGEoJ2NvdmVyJykuYXR0cignY2xhc3MnLCAndWstY292ZXItYmFja2dyb3VuZCB1ay1wb3NpdGlvbi1jb3ZlcicpLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHNsaWRlLmRhdGEoJ2NvdmVyJykuYWRkQ2xhc3MoWyd1ay1hbmltYXRpb24tc2NhbGUnLCAndWstYW5pbWF0aW9uLXJldmVyc2UnLCBhbmltYXRpb25zW2luZGV4XS50cmltKCldLmpvaW4oJyAnKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmtiaW5kZXggPSBhbmltYXRpb25zW2luZGV4ICsgMV0gPyAoaW5kZXgrMSk6MDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoYXNLZW5CdXJuczogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm9wdGlvbnMua2VuYnVybnMgJiYgc2xpZGUuZGF0YSgnY292ZXInKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLnNsaWRlc1t0aGlzLmN1cnJlbnQgKyAxXSA/ICh0aGlzLmN1cnJlbnQgKyAxKSA6IDAsIDEpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93KHRoaXMuc2xpZGVzW3RoaXMuY3VycmVudCAtIDFdID8gKHRoaXMuY3VycmVudCAtIDEpIDogKHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEpLCAtMSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkdGhpcy5ob3ZlcmluZykgJHRoaXMubmV4dCgpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMuYXV0b3BsYXlJbnRlcnZhbCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnRlcnZhbCkgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwbGF5bWVkaWE6IGZ1bmN0aW9uKG1lZGlhKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIShtZWRpYSAmJiBtZWRpYVswXSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaChtZWRpYVswXS5ub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVklERU8nOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy52aWRlb211dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbMF0ubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhWzBdLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0lGUkFNRSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnZpZGVvbXV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVswXS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7IFwiZXZlbnRcIjogXCJjb21tYW5kXCIsIFwiZnVuY1wiOiBcInVubXV0ZVwiLCBcIm1ldGhvZFwiOlwic2V0Vm9sdW1lXCIsIFwidmFsdWVcIjoxfScsICcqJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYVswXS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7IFwiZXZlbnRcIjogXCJjb21tYW5kXCIsIFwiZnVuY1wiOiBcInBsYXlWaWRlb1wiLCBcIm1ldGhvZFwiOlwicGxheVwifScsICcqJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwYXVzZW1lZGlhOiBmdW5jdGlvbihtZWRpYSkge1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoKG1lZGlhWzBdLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdWSURFTyc6XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFbMF0ucGF1c2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0lGUkFNRSc6XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFbMF0uY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSgneyBcImV2ZW50XCI6IFwiY29tbWFuZFwiLCBcImZ1bmNcIjogXCJwYXVzZVZpZGVvXCIsIFwibWV0aG9kXCI6XCJwYXVzZVwifScsICcqJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtdXRlbWVkaWE6IGZ1bmN0aW9uKG1lZGlhKSB7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2gobWVkaWFbMF0ubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1ZJREVPJzpcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYVswXS5tdXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdJRlJBTUUnOlxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhWzBdLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoJ3sgXCJldmVudFwiOiBcImNvbW1hbmRcIiwgXCJmdW5jXCI6IFwibXV0ZVwiLCBcIm1ldGhvZFwiOlwic2V0Vm9sdW1lXCIsIFwidmFsdWVcIjowfScsICcqJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBBbmltYXRpb25zID0ge1xyXG5cclxuICAgICAgICAnbm9uZSc6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGQgPSBVSS4kLkRlZmVycmVkKCk7XHJcbiAgICAgICAgICAgIGQucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3Njcm9sbCc6IGZ1bmN0aW9uKGN1cnJlbnQsIG5leHQsIGRpcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIGQgPSBVSS4kLkRlZmVycmVkKCk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgdGhpcy5vcHRpb25zLmR1cmF0aW9uKydtcycpO1xyXG4gICAgICAgICAgICBuZXh0LmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgdGhpcy5vcHRpb25zLmR1cmF0aW9uKydtcycpO1xyXG5cclxuICAgICAgICAgICAgbmV4dC5jc3MoJ29wYWNpdHknLCAxKS5vbmUoVUkuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LmNzcygnb3BhY2l0eScsIDApLnJlbW92ZUNsYXNzKGRpciA9PSAtMSA/ICd1ay1zbGlkZXNob3ctc2Nyb2xsLWJhY2t3YXJkLW91dCcgOiAndWstc2xpZGVzaG93LXNjcm9sbC1mb3J3YXJkLW91dCcpO1xyXG4gICAgICAgICAgICAgICAgbmV4dC5yZW1vdmVDbGFzcyhkaXIgPT0gLTEgPyAndWstc2xpZGVzaG93LXNjcm9sbC1iYWNrd2FyZC1pbicgOiAndWstc2xpZGVzaG93LXNjcm9sbC1mb3J3YXJkLWluJyk7XHJcbiAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmFkZENsYXNzKGRpciA9PSAtMSA/ICd1ay1zbGlkZXNob3ctc2Nyb2xsLWJhY2t3YXJkLW91dCcgOiAndWstc2xpZGVzaG93LXNjcm9sbC1mb3J3YXJkLW91dCcpO1xyXG4gICAgICAgICAgICBuZXh0LmFkZENsYXNzKGRpciA9PSAtMSA/ICd1ay1zbGlkZXNob3ctc2Nyb2xsLWJhY2t3YXJkLWluJyA6ICd1ay1zbGlkZXNob3ctc2Nyb2xsLWZvcndhcmQtaW4nKTtcclxuICAgICAgICAgICAgbmV4dC53aWR0aCgpOyAvLyBmb3JjZSByZWRyYXdcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkLnByb21pc2UoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAnc3dpcGUnOiBmdW5jdGlvbihjdXJyZW50LCBuZXh0LCBkaXIpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBkID0gVUkuJC5EZWZlcnJlZCgpO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuICAgICAgICAgICAgbmV4dC5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuXHJcbiAgICAgICAgICAgIG5leHQuY3NzKCdvcGFjaXR5JywgMSkub25lKFVJLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudC5jc3MoJ29wYWNpdHknLCAwKS5yZW1vdmVDbGFzcyhkaXIgPT09IC0xID8gJ3VrLXNsaWRlc2hvdy1zd2lwZS1iYWNrd2FyZC1vdXQnIDogJ3VrLXNsaWRlc2hvdy1zd2lwZS1mb3J3YXJkLW91dCcpO1xyXG4gICAgICAgICAgICAgICAgbmV4dC5yZW1vdmVDbGFzcyhkaXIgPT09IC0xID8gJ3VrLXNsaWRlc2hvdy1zd2lwZS1iYWNrd2FyZC1pbicgOiAndWstc2xpZGVzaG93LXN3aXBlLWZvcndhcmQtaW4nKTtcclxuICAgICAgICAgICAgICAgIGQucmVzb2x2ZSgpO1xyXG5cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuYWRkQ2xhc3MoZGlyID09IC0xID8gJ3VrLXNsaWRlc2hvdy1zd2lwZS1iYWNrd2FyZC1vdXQnIDogJ3VrLXNsaWRlc2hvdy1zd2lwZS1mb3J3YXJkLW91dCcpO1xyXG4gICAgICAgICAgICBuZXh0LmFkZENsYXNzKGRpciA9PSAtMSA/ICd1ay1zbGlkZXNob3ctc3dpcGUtYmFja3dhcmQtaW4nIDogJ3VrLXNsaWRlc2hvdy1zd2lwZS1mb3J3YXJkLWluJyk7XHJcbiAgICAgICAgICAgIG5leHQud2lkdGgoKTsgLy8gZm9yY2UgcmVkcmF3XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3NjYWxlJzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZCA9IFVJLiQuRGVmZXJyZWQoKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuY3NzKCdhbmltYXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24rJ21zJyk7XHJcbiAgICAgICAgICAgIG5leHQuY3NzKCdhbmltYXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24rJ21zJyk7XHJcblxyXG4gICAgICAgICAgICBuZXh0LmNzcygnb3BhY2l0eScsIDEpO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5vbmUoVUkuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LmNzcygnb3BhY2l0eScsIDApLnJlbW92ZUNsYXNzKCd1ay1zbGlkZXNob3ctc2NhbGUtb3V0Jyk7XHJcbiAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmFkZENsYXNzKCd1ay1zbGlkZXNob3ctc2NhbGUtb3V0Jyk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQud2lkdGgoKTsgLy8gZm9yY2UgcmVkcmF3XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ2ZhZGUnOiBmdW5jdGlvbihjdXJyZW50LCBuZXh0LCBkaXIpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBkID0gVUkuJC5EZWZlcnJlZCgpO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuICAgICAgICAgICAgbmV4dC5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuXHJcbiAgICAgICAgICAgIG5leHQuY3NzKCdvcGFjaXR5JywgMSk7XHJcblxyXG4gICAgICAgICAgICAvLyBmb3IgcGxhaW4gdGV4dCBjb250ZW50IHNsaWRlcyAtIGxvb2tzIHNtb290aGVyXHJcbiAgICAgICAgICAgIGlmICghKG5leHQuZGF0YSgnY292ZXInKSB8fCBuZXh0LmRhdGEoJ3BsYWNlaG9sZGVyJykpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV4dC5jc3MoJ29wYWNpdHknLCAxKS5vbmUoVUkuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LnJlbW92ZUNsYXNzKCd1ay1zbGlkZXNob3ctZmFkZS1pbicpO1xyXG4gICAgICAgICAgICAgICAgfSkuYWRkQ2xhc3MoJ3VrLXNsaWRlc2hvdy1mYWRlLWluJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQub25lKFVJLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudC5jc3MoJ29wYWNpdHknLCAwKS5yZW1vdmVDbGFzcygndWstc2xpZGVzaG93LWZhZGUtb3V0Jyk7XHJcbiAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmFkZENsYXNzKCd1ay1zbGlkZXNob3ctZmFkZS1vdXQnKTtcclxuICAgICAgICAgICAgY3VycmVudC53aWR0aCgpOyAvLyBmb3JjZSByZWRyYXdcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkLnByb21pc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLnNsaWRlc2hvdy5hbmltYXRpb25zID0gQW5pbWF0aW9ucztcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIG1lc3NhZ2VzIGZyb20gdGhlIHZpbWVvIHBsYXllclxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiBvbk1lc3NhZ2VSZWNlaXZlZChlKSB7XHJcblxyXG4gICAgICAgIHZhciBkYXRhID0gZS5kYXRhLCBpZnJhbWU7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YoZGF0YSkgPT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGUub3JpZ2luICYmIGUub3JpZ2luLmluZGV4T2YoJ3ZpbWVvJykgPiAtMSAmJiBkYXRhLmV2ZW50ID09ICdyZWFkeScgJiYgZGF0YS5wbGF5ZXJfaWQpIHtcclxuICAgICAgICAgICAgaWZyYW1lID0gVUkuJCgnW2RhdGEtcGxheWVyLWlkPVwiJysgZGF0YS5wbGF5ZXJfaWQrJ1wiXScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlmcmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmcmFtZS5kYXRhKCdzbGlkZXNob3cnKS5tdXRlbWVkaWEoaWZyYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbn0pOyJdfQ==
