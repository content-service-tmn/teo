!function(e){var t;window.UIkit2&&(t=e(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-upload",["uikit"],function(){return t||e(UIkit2)})}(function(d){"use strict";var e,t;function f(n,o){if(!d.support.ajaxupload)return this;if(o=d.$.extend({},f.defaults,o),n.length){if("*.*"!==o.allow)for(var e,t=0;e=n[t];t++)if(!p(o.allow,e.name))return void("string"==typeof o.notallowed?alert(o.notallowed):o.notallowed(e,o));var a=o.complete;if(o.single){var r=n.length,i=0,l=!0;o.beforeAll(n),o.complete=function(e,t){i+=1,a(e,t),o.filelimit&&i>=o.filelimit&&(l=!1),l&&i<r?s([n[i]],o):o.allcomplete(e,t)},s([n[0]],o)}else o.complete=function(e,t){a(e,t),o.allcomplete(e,t)},s(n,o)}function s(e,n){var t=new FormData,o=new XMLHttpRequest;if(!1!==n.before(n,e)){for(var a,r=0;a=e[r];r++)t.append(n.param,a);for(var i in n.params)t.append(i,n.params[i]);for(var l in o.upload.addEventListener("progress",function(e){var t=e.loaded/e.total*100;n.progress(t,e)},!1),o.addEventListener("loadstart",function(e){n.loadstart(e)},!1),o.addEventListener("load",function(e){n.load(e)},!1),o.addEventListener("loadend",function(e){n.loadend(e)},!1),o.addEventListener("error",function(e){n.error(e)},!1),o.addEventListener("abort",function(e){n.abort(e)},!1),o.open(n.method,n.action,!0),"json"==n.type&&o.setRequestHeader("Accept","application/json"),n.headers)o.setRequestHeader(l,n.headers[l]);o.onreadystatechange=function(){if(n.readystatechange(o),4==o.readyState){var t=o.responseText;if("json"==n.type)try{t=d.$.parseJSON(t)}catch(e){t=!1}n.complete(t,o)}},n.beforeSend(o),o.send(t)}}}function p(e,t){var n="^"+e.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$";return n="^"+n+"$",null!==t.match(new RegExp(n,"i"))}return d.component("uploadSelect",{init:function(){var t=this;this.on("change",function(){f(t.element[0].files,t.options);var e=t.element.clone(!0).data("uploadSelect",t);t.element.replaceWith(e),t.element=e})}}),d.component("uploadDrop",{defaults:{dragoverClass:"uk-dragover"},init:function(){var t=this,n=!1;this.on("drop",function(e){e.originalEvent.dataTransfer&&e.originalEvent.dataTransfer.files&&(e.stopPropagation(),e.preventDefault(),t.element.removeClass(t.options.dragoverClass),t.element.trigger("dropped.uk.upload",[e.originalEvent.dataTransfer.files]),f(e.originalEvent.dataTransfer.files,t.options))}).on("dragenter",function(e){e.stopPropagation(),e.preventDefault()}).on("dragover",function(e){e.stopPropagation(),e.preventDefault(),n||(t.element.addClass(t.options.dragoverClass),n=!0)}).on("dragleave",function(e){e.stopPropagation(),e.preventDefault(),t.element.removeClass(t.options.dragoverClass),n=!1})}}),d.support.ajaxupload=((t=document.createElement("INPUT")).type="file","files"in t&&!!((e=new XMLHttpRequest)&&"upload"in e&&"onprogress"in e.upload)&&!!window.FormData),f.defaults={action:"",single:!0,method:"POST",param:"files[]",params:{},allow:"*.*",type:"text",filelimit:!1,headers:{},before:function(e){},beforeSend:function(e){},beforeAll:function(){},loadstart:function(){},load:function(){},loadend:function(){},error:function(){},abort:function(){},progress:function(){},complete:function(){},allcomplete:function(){},readystatechange:function(){},notallowed:function(e,t){alert("Only the following file types are allowed: "+t.allow)}},d.Utils.xhrupload=f});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
