!function(t){var i;window.UIkit2&&(i=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-grid",["uikit"],function(){return i||t(UIkit2)})}(function(y){"use strict";y.component("grid",{defaults:{colwidth:"auto",animation:!0,duration:300,gutter:0,controls:!1,filter:!1,origin:y.langdirection},boot:function(){y.ready(function(t){y.$("[data-uk-grid]",t).each(function(){var t=y.$(this);t.data("grid")||y.grid(t,y.Utils.options(t.attr("data-uk-grid")))})})},init:function(){var e=this,t=String(this.options.gutter).trim().split(" ");this.gutterv=parseInt(t[0],10),this.gutterh=parseInt(t[1]||t[0],10),this.element.css({position:"relative"}),this.controls=null,this.origin=this.options.origin,this.options.controls&&(this.controls=y.$(this.options.controls),this.controls.on("click","[data-uk-filter]",function(t){t.preventDefault(),e.filter(y.$(this).attr("data-uk-filter"))}),this.controls.on("click","[data-uk-sort]",function(t){t.preventDefault();var i=y.$(this).attr("data-uk-sort").split(":");e.sort(i[0],i[1])})),y.$win.on("load resize orientationchange",y.Utils.debounce(function(){e.currentfilter?e.filter(e.currentfilter):this.update()}.bind(this),100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.update()}),y.domObserve(this.element,function(t){e.update()}),!1!==this.options.filter?this.filter(this.options.filter):this.update()},_prepareElements:function(){var t,i=this.element.children(":not([data-grid-prepared])");i.length&&(t={position:"absolute",boxSizing:"border-box",width:"auto"==this.options.colwidth?"":this.options.colwidth},this.options.gutter&&(t["padding-"+this.origin]=this.gutterh,t["padding-bottom"]=this.gutterv,this.element.css("margin-"+this.origin,-1*this.gutterh)),i.attr("data-grid-prepared","true").css(t))},update:function(t){var e=this;this._prepareElements();var n,r,o,s,a,d,i,h,u,l=t=t||this.element.children(":visible"),c=this.element.width()+2*this.gutterh+2,f=0,p=0,g=[];this.trigger("beforeupdate.uk.grid",[l]),l.each(function(t){var i;for(i=this,u=function(){var o="Webkit Moz ms Ms O".split(" "),s=document.documentElement.style;function b(t){var i=parseFloat(t),e=-1===t.indexOf("%")&&!isNaN(i);return e&&i}var y,k,w,a="undefined"==typeof console?function(){}:function(t){console.error(t)},x=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],d=!1;function W(){if(!d){d=!0;var e,i=window.getComputedStyle;if(e=i?function(t){return i(t,null)}:function(t){return t.currentStyle},y=function(t){var i=e(t);return i||a("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),i},k=function(t){if(t){if("string"==typeof s[t])return t;var i;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,n=o.length;e<n;e++)if(i=o[e]+t,"string"==typeof s[i])return i}}("boxSizing")){var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style[k]="border-box";var n=document.body||document.documentElement;n.appendChild(t);var r=y(t);w=200===b(r.width),n.removeChild(t)}}}return function(t){if(W(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var i=y(t);if("none"===i.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},i=0,e=x.length;i<e;i++){var n=x[i];t[n]=0}return t}();var e={};e.width=t.offsetWidth,e.height=t.offsetHeight;for(var n=e.isBorderBox=!(!k||!i[k]||"border-box"!==i[k]),r=0,o=x.length;r<o;r++){var s=x[r],a=i[s],d=parseFloat(a);e[s]=isNaN(d)?0:d}var h=e.paddingLeft+e.paddingRight,u=e.paddingTop+e.paddingBottom,l=e.marginLeft+e.marginRight,c=e.marginTop+e.marginBottom,f=e.borderLeftWidth+e.borderRightWidth,p=e.borderTopWidth+e.borderBottomWidth,g=n&&w,m=b(i.width);!1!==m&&(e.width=m+(g?0:h+f));var v=b(i.height);return!1!==v&&(e.height=v+(g?0:u+p)),e.innerWidth=e.width-(h+f),e.innerHeight=e.height-(u+p),e.outerWidth=e.width+l,e.outerHeight=e.height+c,e}}}()(i),n=y.$(this),r=u.outerWidth,o=u.outerHeight,d=p=f=0,h=g.length;d<h;d++)s=g[d],f<=s.aX&&(f=s.aX),c<f+r&&(f=0),p<=s.aY&&(p=s.aY);(a={ele:n,top:p,width:r,height:o,aY:p+o,aX:f+r})[e.origin]=f,g.push(a)});var m,v,b=0;for(d=0,h=g.length;d<h;d++){for(s=g[d],i=p=0;i<d;i++)m=g[i],s[this.origin]<m.aX&&m[this.origin]+1<s.aX&&(p=m.aY);s.top=p,s.aY=p+s.height,b=Math.max(b,s.aY)}b-=this.gutterv,this.options.animation?(this.element.stop().animate({height:b},100),g.forEach(function(t){(v={top:t.top,opacity:1})[e.origin]=t[e.origin],t.ele.stop().animate(v,this.options.duration)}.bind(this))):(this.element.css("height",b),g.forEach(function(t){(v={top:t.top,opacity:1})[e.origin]=t[e.origin],t.ele.css(v)}.bind(this))),setTimeout(function(){y.$doc.trigger("scrolling.uk.document")},2*this.options.duration*(this.options.animation?1:0)),this.trigger("afterupdate.uk.grid",[l])},filter:function(r){"number"==typeof(r=(this.currentfilter=r)||[])&&(r=r.toString()),"string"==typeof r&&(r=r.split(/,/).map(function(t){return t.trim()}));var t=this.element.children(),o={visible:[],hidden:[]};t.each(function(t){var i=y.$(this),e=i.attr("data-uk-filter"),n=!r.length;e&&(e=e.split(/,/).map(function(t){return t.trim()}),r.forEach(function(t){-1<e.indexOf(t)&&(n=!0)})),o[n?"visible":"hidden"].push(i)}),o.hidden=y.$(o.hidden).map(function(){return this[0]}),o.visible=y.$(o.visible).map(function(){return this[0]}),o.hidden.attr("aria-hidden","true").filter(":visible").fadeOut(this.options.duration),o.visible.attr("aria-hidden","false").filter(":hidden").css("opacity",0).show(),this.update(o.visible),this.controls&&this.controls.length&&this.controls.find("[data-uk-filter]").removeClass("uk-active").filter('[data-uk-filter="'+r+'"]').addClass("uk-active")},sort:function(e,n){"string"==typeof(n=n||1)&&(n="desc"==n.toLowerCase()?-1:1);var t=this.element.children();t.sort(function(t,i){return t=y.$(t),((i=y.$(i)).data(e)||"")<(t.data(e)||"")?n:-1*n}).appendTo(this.element),this.update(t.filter(":visible")),this.controls&&this.controls.length&&this.controls.find("[data-uk-sort]").removeClass("uk-active").filter('[data-uk-sort="'+e+":"+(-1==n?"desc":"asc")+'"]').addClass("uk-active")}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ3JpZC5qcyJdLCJuYW1lcyI6WyJhZGRvbiIsImNvbXBvbmVudCIsIndpbmRvdyIsIlVJa2l0MiIsImRlZmluZSIsImFtZCIsIlVJIiwiZGVmYXVsdHMiLCJjb2x3aWR0aCIsImFuaW1hdGlvbiIsImR1cmF0aW9uIiwiZ3V0dGVyIiwiY29udHJvbHMiLCJmaWx0ZXIiLCJvcmlnaW4iLCJsYW5nZGlyZWN0aW9uIiwiYm9vdCIsInJlYWR5IiwiY29udGV4dCIsIiQiLCJlYWNoIiwiZWxlIiwidGhpcyIsImRhdGEiLCJncmlkIiwiVXRpbHMiLCJvcHRpb25zIiwiYXR0ciIsImluaXQiLCIkdGhpcyIsIlN0cmluZyIsInRyaW0iLCJzcGxpdCIsImd1dHRlcnYiLCJwYXJzZUludCIsImd1dHRlcmgiLCJlbGVtZW50IiwiY3NzIiwicG9zaXRpb24iLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNtZCIsInNvcnQiLCIkd2luIiwiZGVib3VuY2UiLCJjdXJyZW50ZmlsdGVyIiwidXBkYXRlIiwiYmluZCIsImlzIiwiZG9tT2JzZXJ2ZSIsIl9wcmVwYXJlRWxlbWVudHMiLCJjaGlsZHJlbiIsImxlbmd0aCIsImJveFNpemluZyIsIndpZHRoIiwiZWxlbWVudHMiLCJpdGVtIiwiaGVpZ2h0IiwicG9zIiwicG9zaSIsImkiLCJ6IiwibWF4Iiwic2l6ZSIsIm1heHdpZHRoIiwibGVmdCIsInRvcCIsInBvc2l0aW9ucyIsInRyaWdnZXIiLCJpbmRleCIsInByZWZpeGVzIiwiZG9jRWxlbVN0eWxlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsImdldFN0eWxlU2l6ZSIsInZhbHVlIiwibnVtIiwicGFyc2VGbG9hdCIsImlzVmFsaWQiLCJpbmRleE9mIiwiaXNOYU4iLCJnZXRTdHlsZSIsImJveFNpemluZ1Byb3AiLCJpc0JveFNpemVPdXRlciIsImxvZ0Vycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJlcnJvciIsIm1lYXN1cmVtZW50cyIsImlzU2V0dXAiLCJzZXR1cCIsImdldFN0eWxlRm4iLCJnZXRDb21wdXRlZFN0eWxlIiwiZWxlbSIsImN1cnJlbnRTdHlsZSIsInByb3BOYW1lIiwicHJlZml4ZWQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibGVuIiwiZ2V0U3R5bGVQcm9wZXJ0eSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwicXVlcnlTZWxlY3RvciIsIm5vZGVUeXBlIiwiZGlzcGxheSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1lYXN1cmVtZW50IiwiZ2V0WmVyb1NpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImlzQm9yZGVyQm94IiwicGFkZGluZ1dpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nSGVpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJIZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiaXNCb3JkZXJCb3hTaXplT3V0ZXIiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJfZ2V0U2l6ZSIsImFYIiwiYVkiLCJwdXNoIiwicG9zUHJldiIsInBvc2l0aW9udG8iLCJtYXhIZWlnaHQiLCJNYXRoIiwic3RvcCIsImFuaW1hdGUiLCJmb3JFYWNoIiwib3BhY2l0eSIsInNldFRpbWVvdXQiLCIkZG9jIiwidG9TdHJpbmciLCJtYXAiLCJ2aXNpYmxlIiwiaGlkZGVuIiwiZiIsImluZmlsdGVyIiwiZmFkZU91dCIsInNob3ciLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImJ5Iiwib3JkZXIiLCJ0b0xvd2VyQ2FzZSIsImEiLCJiIiwiYXBwZW5kVG8iXSwibWFwcGluZ3MiOiJDQUNBLFNBQVVBLEdBRU4sSUFBSUMsRUFFQUMsT0FBT0MsU0FDUEYsRUFBWUQsRUFBTUcsU0FHRCxtQkFBVkMsUUFBd0JBLE9BQU9DLEtBQ3RDRCxPQUFPLGFBQWMsQ0FBQyxTQUFVLFdBQzVCLE9BQU9ILEdBQWFELEVBQU1HLFVBVnRDLENBY0csU0FBU0csR0FFUixhQUVBQSxFQUFHTCxVQUFVLE9BQVEsQ0FFakJNLFNBQVUsQ0FDTkMsU0FBWSxPQUNaQyxXQUFZLEVBQ1pDLFNBQVksSUFDWkMsT0FBWSxFQUNaQyxVQUFZLEVBQ1pDLFFBQVksRUFDWkMsT0FBWVIsRUFBR1MsZUFHbkJDLEtBQU8sV0FHSFYsRUFBR1csTUFBTSxTQUFTQyxHQUVkWixFQUFHYSxFQUFFLGlCQUFrQkQsR0FBU0UsS0FBSyxXQUVqQyxJQUFJQyxFQUFNZixFQUFHYSxFQUFFRyxNQUVYRCxFQUFJRSxLQUFLLFNBQ1RqQixFQUFHa0IsS0FBS0gsRUFBS2YsRUFBR21CLE1BQU1DLFFBQVFMLEVBQUlNLEtBQUssdUJBTXZEQyxLQUFNLFdBRUYsSUFBSUMsRUFBUVAsS0FBTVgsRUFBU21CLE9BQU9SLEtBQUtJLFFBQVFmLFFBQVFvQixPQUFPQyxNQUFNLEtBRXBFVixLQUFLVyxRQUFXQyxTQUFTdkIsRUFBTyxHQUFJLElBQ3BDVyxLQUFLYSxRQUFXRCxTQUFVdkIsRUFBTyxJQUFNQSxFQUFPLEdBQUssSUFHbkRXLEtBQUtjLFFBQVFDLElBQUksQ0FBQ0MsU0FBWSxhQUU5QmhCLEtBQUtWLFNBQVcsS0FDaEJVLEtBQUtSLE9BQVdRLEtBQUtJLFFBQVFaLE9BRXpCUSxLQUFLSSxRQUFRZCxXQUViVSxLQUFLVixTQUFXTixFQUFHYSxFQUFFRyxLQUFLSSxRQUFRZCxVQUdsQ1UsS0FBS1YsU0FBUzJCLEdBQUcsUUFBUyxtQkFBb0Is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SyxrQkFBa0JDLFlBQVksYUFBYTFKLE9BQU8sa0JBQWtCNEosRUFBRyxNQUFlLEdBQVZDLEVBQWMsT0FBTyxPQUFPLE1BQU1GLFNBQVMiLCJmaWxlIjoiY29tcG9uZW50cy9ncmlkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIFVJa2l0IDIuMjcuMiB8IGh0dHA6Ly93d3cuZ2V0dWlraXQuY29tIHwgKGMpIDIwMTQgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xyXG4oZnVuY3Rpb24oYWRkb24pIHtcclxuXHJcbiAgICB2YXIgY29tcG9uZW50O1xyXG5cclxuICAgIGlmICh3aW5kb3cuVUlraXQyKSB7XHJcbiAgICAgICAgY29tcG9uZW50ID0gYWRkb24oVUlraXQyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoJ3Vpa2l0LWdyaWQnLCBbJ3Vpa2l0J10sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgfHwgYWRkb24oVUlraXQyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pKGZ1bmN0aW9uKFVJKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBVSS5jb21wb25lbnQoJ2dyaWQnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIGNvbHdpZHRoICA6ICdhdXRvJyxcclxuICAgICAgICAgICAgYW5pbWF0aW9uIDogdHJ1ZSxcclxuICAgICAgICAgICAgZHVyYXRpb24gIDogMzAwLFxyXG4gICAgICAgICAgICBndXR0ZXIgICAgOiAwLFxyXG4gICAgICAgICAgICBjb250cm9scyAgOiBmYWxzZSxcclxuICAgICAgICAgICAgZmlsdGVyICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIG9yaWdpbiAgICA6IFVJLmxhbmdkaXJlY3Rpb25cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiAgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoJ1tkYXRhLXVrLWdyaWRdJywgY29udGV4dCkuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWVsZS5kYXRhKCdncmlkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuZ3JpZChlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoJ2RhdGEtdWstZ3JpZCcpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgZ3V0dGVyID0gU3RyaW5nKHRoaXMub3B0aW9ucy5ndXR0ZXIpLnRyaW0oKS5zcGxpdCgnICcpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ndXR0ZXJ2ICA9IHBhcnNlSW50KGd1dHRlclswXSwgMTApO1xyXG4gICAgICAgICAgICB0aGlzLmd1dHRlcmggID0gcGFyc2VJbnQoKGd1dHRlclsxXSB8fCBndXR0ZXJbMF0pLCAxMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgcGFyZW50IGVsZW1lbnQgaGFzIHRoZSByaWdodCBwb3NpdGlvbiBwcm9wZXJ0eVxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKHsncG9zaXRpb24nOiAncmVsYXRpdmUnfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW4gICA9IHRoaXMub3B0aW9ucy5vcmlnaW47XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRyb2xzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scyA9IFVJLiQodGhpcy5vcHRpb25zLmNvbnRyb2xzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMub24oJ2NsaWNrJywgJ1tkYXRhLXVrLWZpbHRlcl0nLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmlsdGVyKFVJLiQodGhpcykuYXR0cignZGF0YS11ay1maWx0ZXInKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzb3J0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLm9uKCdjbGljaycsICdbZGF0YS11ay1zb3J0XScsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY21kID0gVUkuJCh0aGlzKS5hdHRyKCdkYXRhLXVrLXNvcnQnKS5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnNvcnQoY21kWzBdLCBjbWRbMV0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFVJLiR3aW4ub24oJ2xvYWQgcmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuY3VycmVudGZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmZpbHRlcigkdGhpcy5jdXJyZW50ZmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTAwKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdkaXNwbGF5LnVrLmNoZWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5lbGVtZW50LmlzKCc6dmlzaWJsZScpKSAgJHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgVUkuZG9tT2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsdGVyICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIodGhpcy5vcHRpb25zLmZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3ByZXBhcmVFbGVtZW50czogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oJzpub3QoW2RhdGEtZ3JpZC1wcmVwYXJlZF0pJyksIGNzcztcclxuXHJcbiAgICAgICAgICAgIC8vIGV4aXQgaWYgbm8gYWxyZWFkeSBwcmVwYXJlZCBlbGVtZW50cyBmb3VuZFxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjc3MgPSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiAgOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nIDogJ2JvcmRlci1ib3gnLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggICAgIDogdGhpcy5vcHRpb25zLmNvbHdpZHRoID09ICdhdXRvJyA/ICcnIDogdGhpcy5vcHRpb25zLmNvbHdpZHRoXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmd1dHRlcikge1xyXG5cclxuICAgICAgICAgICAgICAgIGNzc1sncGFkZGluZy0nK3RoaXMub3JpZ2luXSA9IHRoaXMuZ3V0dGVyaDtcclxuICAgICAgICAgICAgICAgIGNzc1sncGFkZGluZy1ib3R0b20nXSA9IHRoaXMuZ3V0dGVydjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKCdtYXJnaW4tJyt0aGlzLm9yaWdpbiwgdGhpcy5ndXR0ZXJoICogLTEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGlsZHJlbi5hdHRyKCdkYXRhLWdyaWQtcHJlcGFyZWQnLCAndHJ1ZScpLmNzcyhjc3MpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudHMpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlRWxlbWVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzID0gZWxlbWVudHMgfHwgdGhpcy5lbGVtZW50LmNoaWxkcmVuKCc6dmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuICA9IGVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgbWF4d2lkdGggID0gdGhpcy5lbGVtZW50LndpZHRoKCkgKyAoMip0aGlzLmd1dHRlcmgpICsgMixcclxuICAgICAgICAgICAgICAgIGxlZnQgICAgICA9IDAsXHJcbiAgICAgICAgICAgICAgICB0b3AgICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zID0gW10sXHJcblxyXG4gICAgICAgICAgICAgICAgaXRlbSwgd2lkdGgsIGhlaWdodCwgcG9zLCBwb3NpLCBpLCB6LCBtYXgsIHNpemU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JlZm9yZXVwZGF0ZS51ay5ncmlkJywgW2NoaWxkcmVuXSk7XHJcblxyXG4gICAgICAgICAgICBjaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcclxuXHJcbiAgICAgICAgICAgICAgICBzaXplICAgPSBnZXRFbGVtZW50U2l6ZSh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtICAgPSBVSS4kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgd2lkdGggID0gc2l6ZS5vdXRlcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc2l6ZS5vdXRlckhlaWdodDtcclxuICAgICAgICAgICAgICAgIGxlZnQgICA9IDA7XHJcbiAgICAgICAgICAgICAgICB0b3AgICAgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaT0wLG1heD1wb3NpdGlvbnMubGVuZ3RoO2k8bWF4O2krKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwb3MgPSBwb3NpdGlvbnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0IDw9IHBvcy5hWCkgeyBsZWZ0ID0gcG9zLmFYOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heHdpZHRoIDwgKGxlZnQgKyB3aWR0aCkpIHsgbGVmdCA9IDA7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodG9wIDw9IHBvcy5hWSkgeyB0b3AgPSBwb3MuYVk7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwb3NpID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZSAgICA6IGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogdG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBhWSAgICAgOiAodG9wICArIGhlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgYVggICAgIDogKGxlZnQgKyB3aWR0aClcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcG9zaVskdGhpcy5vcmlnaW5dID0gbGVmdDtcclxuXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChwb3NpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zUHJldiwgbWF4SGVpZ2h0ID0gMCwgcG9zaXRpb250bztcclxuXHJcbiAgICAgICAgICAgIC8vIGZpeCB0b3BcclxuICAgICAgICAgICAgZm9yIChpPTAsbWF4PXBvc2l0aW9ucy5sZW5ndGg7aTxtYXg7aSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcG9zID0gcG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgdG9wID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHo9MDt6PGk7eisrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ByZXYgPSBwb3NpdGlvbnNbel07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIChwb3NQcmV2LmxlZnQgKyAxKSBmaXhleCAxcHggYnVnIHdoZW4gdXNpbmcgJSBiYXNlZCB3aWR0aHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zW3RoaXMub3JpZ2luXSA8IHBvc1ByZXYuYVggJiYgKHBvc1ByZXZbdGhpcy5vcmlnaW5dICsxKSA8IHBvcy5hWCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBwb3NQcmV2LmFZO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwb3MudG9wID0gdG9wO1xyXG4gICAgICAgICAgICAgICAgcG9zLmFZICA9IHRvcCArIHBvcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgobWF4SGVpZ2h0LCBwb3MuYVkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBtYXhIZWlnaHQgLSB0aGlzLmd1dHRlcnY7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdG9wKCkuYW5pbWF0ZSh7J2hlaWdodCc6IG1heEhlaWdodH0sIDEwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLmZvckVhY2goZnVuY3Rpb24ocG9zKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb250byA9IHtcInRvcFwiOiBwb3MudG9wLCBvcGFjaXR5OiAxfTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnRvWyR0aGlzLm9yaWdpbl0gPSBwb3NbJHRoaXMub3JpZ2luXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVsZS5zdG9wKCkuYW5pbWF0ZShwb3NpdGlvbnRvLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNzcygnaGVpZ2h0JywgbWF4SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMuZm9yRWFjaChmdW5jdGlvbihwb3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9udG8gPSB7XCJ0b3BcIjogcG9zLnRvcCwgb3BhY2l0eTogMX07XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb250b1skdGhpcy5vcmlnaW5dID0gcG9zWyR0aGlzLm9yaWdpbl07XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVsZS5jc3MocG9zaXRpb250byk7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gdHJpZ2dlciBwb3NzaWJsZSBzY3JvbGxwaWVzIGV0Yy5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFVJLiRkb2MudHJpZ2dlcignc2Nyb2xsaW5nLnVrLmRvY3VtZW50Jyk7XHJcbiAgICAgICAgICAgIH0sIDIgKiB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiA/IDE6MCkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdhZnRlcnVwZGF0ZS51ay5ncmlkJywgW2NoaWxkcmVuXSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbihmaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudGZpbHRlciA9IGZpbHRlcjtcclxuXHJcbiAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlciB8fCBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YoZmlsdGVyKSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlci50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGZpbHRlcikgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXIuc3BsaXQoLywvKS5tYXAoZnVuY3Rpb24oaXRlbSl7IHJldHVybiBpdGVtLnRyaW0oKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXMsIGNoaWxkcmVuID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCksIGVsZW1lbnRzID0ge1widmlzaWJsZVwiOiBbXSwgXCJoaWRkZW5cIjogW119LCB2aXNpYmxlLCBoaWRkZW47XHJcblxyXG4gICAgICAgICAgICBjaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKSwgZiA9IGVsZS5hdHRyKCdkYXRhLXVrLWZpbHRlcicpLCBpbmZpbHRlciA9IGZpbHRlci5sZW5ndGggPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGYpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYuc3BsaXQoLywvKS5tYXAoZnVuY3Rpb24oaXRlbSl7IHJldHVybiBpdGVtLnRyaW0oKTsgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZi5pbmRleE9mKGl0ZW0pID4gLTEpIGluZmlsdGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50c1tpbmZpbHRlciA/IFwidmlzaWJsZVwiOlwiaGlkZGVuXCJdLnB1c2goZWxlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjb252ZXJ0IHRvIGpRdWVyeSBjb2xsZWN0aW9uc1xyXG4gICAgICAgICAgICBlbGVtZW50cy5oaWRkZW4gID0gVUkuJChlbGVtZW50cy5oaWRkZW4pLm1hcChmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXNbMF07fSk7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzLnZpc2libGUgPSBVSS4kKGVsZW1lbnRzLnZpc2libGUpLm1hcChmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXNbMF07fSk7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50cy5oaWRkZW4uYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpLmZpbHRlcignOnZpc2libGUnKS5mYWRlT3V0KHRoaXMub3B0aW9ucy5kdXJhdGlvbik7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzLnZpc2libGUuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKS5maWx0ZXIoJzpoaWRkZW4nKS5jc3MoJ29wYWNpdHknLCAwKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAkdGhpcy51cGRhdGUoZWxlbWVudHMudmlzaWJsZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9scyAmJiB0aGlzLmNvbnRyb2xzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5maW5kKCdbZGF0YS11ay1maWx0ZXJdJykucmVtb3ZlQ2xhc3MoJ3VrLWFjdGl2ZScpLmZpbHRlcignW2RhdGEtdWstZmlsdGVyPVwiJytmaWx0ZXIrJ1wiXScpLmFkZENsYXNzKCd1ay1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNvcnQ6IGZ1bmN0aW9uKGJ5LCBvcmRlcil7XHJcblxyXG4gICAgICAgICAgICBvcmRlciA9IG9yZGVyIHx8IDE7XHJcblxyXG4gICAgICAgICAgICAvLyBjb3ZlcnQgZnJvbSBzdHJpbmcgKGFzY3xkZXNjKSB0byBudW1iZXJcclxuICAgICAgICAgICAgaWYgKHR5cGVvZihvcmRlcikgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBvcmRlciA9IG9yZGVyLnRvTG93ZXJDYXNlKCkgPT0gJ2Rlc2MnID8gLTEgOiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblxyXG4gICAgICAgICAgICAgICAgYSA9IFVJLiQoYSk7XHJcbiAgICAgICAgICAgICAgICBiID0gVUkuJChiKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGIuZGF0YShieSkgfHwgJycpIDwgKGEuZGF0YShieSkgfHwgJycpID8gb3JkZXIgOiAob3JkZXIqLTEpO1xyXG5cclxuICAgICAgICAgICAgfSkuYXBwZW5kVG8odGhpcy5lbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKGVsZW1lbnRzLmZpbHRlcignOnZpc2libGUnKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9scyAmJiB0aGlzLmNvbnRyb2xzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5maW5kKCdbZGF0YS11ay1zb3J0XScpLnJlbW92ZUNsYXNzKCd1ay1hY3RpdmUnKS5maWx0ZXIoJ1tkYXRhLXVrLXNvcnQ9XCInK2J5Kyc6Jysob3JkZXIgPT0gLTEgPyAnZGVzYyc6J2FzYycpKydcIl0nKS5hZGRDbGFzcygndWstYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLyohXHJcbiAgICAqIGdldFNpemUgdjEuMi4yXHJcbiAgICAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xyXG4gICAgKiBNSVQgbGljZW5zZVxyXG4gICAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVzYW5kcm8vZ2V0LXNpemVcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBfZ2V0U2l6ZSgpIHtcclxuXHJcbiAgICAgICAgdmFyIHByZWZpeGVzID0gJ1dlYmtpdCBNb3ogbXMgTXMgTycuc3BsaXQoJyAnKTtcclxuICAgICAgICB2YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTdHlsZVByb3BlcnR5KCBwcm9wTmFtZSApIHtcclxuICAgICAgICAgICAgaWYgKCAhcHJvcE5hbWUgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRlc3Qgc3RhbmRhcmQgcHJvcGVydHkgZmlyc3RcclxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgZG9jRWxlbVN0eWxlWyBwcm9wTmFtZSBdID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wTmFtZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2FwaXRhbGl6ZVxyXG4gICAgICAgICAgICBwcm9wTmFtZSA9IHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc2xpY2UoMSk7XHJcblxyXG4gICAgICAgICAgICAvLyB0ZXN0IHZlbmRvciBzcGVjaWZpYyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIHZhciBwcmVmaXhlZDtcclxuICAgICAgICAgICAgZm9yICggdmFyIGk9MCwgbGVuID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgcHJvcE5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBkb2NFbGVtU3R5bGVbIHByZWZpeGVkIF0gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXhlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAgICAgICAvLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XHJcbiAgICAgICAgICAgIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xyXG4gICAgICAgICAgICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcclxuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT09IC0xICYmICFpc05hTiggbnVtICk7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkICYmIG51bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxuICAgICAgICB2YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcgPyBub29wIDogZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgICAgICAgdmFyIG1lYXN1cmVtZW50cyA9IFtcclxuICAgICAgICAgICAgJ3BhZGRpbmdMZWZ0JyxcclxuICAgICAgICAgICAgJ3BhZGRpbmdSaWdodCcsXHJcbiAgICAgICAgICAgICdwYWRkaW5nVG9wJyxcclxuICAgICAgICAgICAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICAgICAgICAgICAnbWFyZ2luTGVmdCcsXHJcbiAgICAgICAgICAgICdtYXJnaW5SaWdodCcsXHJcbiAgICAgICAgICAgICdtYXJnaW5Ub3AnLFxyXG4gICAgICAgICAgICAnbWFyZ2luQm90dG9tJyxcclxuICAgICAgICAgICAgJ2JvcmRlckxlZnRXaWR0aCcsXHJcbiAgICAgICAgICAgICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAgICAgICAgICAgJ2JvcmRlclRvcFdpZHRoJyxcclxuICAgICAgICAgICAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgaW5uZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGlubmVySGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgb3V0ZXJXaWR0aDogMCxcclxuICAgICAgICAgICAgICAgIG91dGVySGVpZ2h0OiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gICAgICAgIHZhciBpc1NldHVwID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGdldFN0eWxlLCBib3hTaXppbmdQcm9wLCBpc0JveFNpemVPdXRlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBzZXR1cCB2YXJzIGFuZCBmdW5jdGlvbnNcclxuICAgICAgICAqIGRvIGl0IG9uIGluaXRpYWwgZ2V0U2l6ZSgpLCByYXRoZXIgdGhhbiBvbiBzY3JpcHQgbG9hZFxyXG4gICAgICAgICogRm9yIEZpcmVmb3ggYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgICAgICAgICAgIC8vIHNldHVwIG9uY2VcclxuICAgICAgICAgICAgaWYgKCBpc1NldHVwICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlzU2V0dXAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGdldENvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZTtcclxuICAgICAgICAgICAgZ2V0U3R5bGUgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdldFN0eWxlRm4gPSBnZXRDb21wdXRlZFN0eWxlID9cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XHJcbiAgICAgICAgICAgICAgICB9IDpcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlRm4oIGVsZW0gKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoICFzdHlsZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXJyb3IoICdTdHlsZSByZXR1cm5lZCAnICsgc3R5bGUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vYml0Lmx5L2dldHNpemVidWcxJyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYm94IHNpemluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAgICAgICAgICAgYm94U2l6aW5nUHJvcCA9IGdldFN0eWxlUHJvcGVydHkoJ2JveFNpemluZycpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICogV2ViS2l0IG1lYXN1cmVzIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICAgICAgICAgICogSUUgJiBGaXJlZm94IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAoIGJveFNpemluZ1Byb3AgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMXB4IDJweCAzcHggNHB4JztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XHJcbiAgICAgICAgICAgICAgICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZVsgYm94U2l6aW5nUHJvcCBdID0gJ2JvcmRlci1ib3gnO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCBkaXYgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpc0JveFNpemVPdXRlciA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSA9PT0gMjAwO1xyXG4gICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XHJcbiAgICAgICAgICAgIHNldHVwKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXHJcbiAgICAgICAgICAgIGlmICggdHlwZW9mIGVsZW0gPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAgICAgICAgICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZG8gbm90IHByb2NlZWQgb24gbm9uLW9iamVjdHNcclxuICAgICAgICAgICAgaWYgKCAhZWxlbSB8fCB0eXBlb2YgZWxlbSAhPT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxyXG4gICAgICAgICAgICBpZiAoIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHt9O1xyXG4gICAgICAgICAgICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSAhISggYm94U2l6aW5nUHJvcCAmJlxyXG4gICAgICAgICAgICAgICAgc3R5bGVbIGJveFNpemluZ1Byb3AgXSAmJiBzdHlsZVsgYm94U2l6aW5nUHJvcCBdID09PSAnYm9yZGVyLWJveCcgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgICAgICAgICAgIGZvciAoIHZhciBpPTAsIGxlbiA9IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xyXG4gICAgICAgICAgICAgICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXHJcbiAgICAgICAgICAgICAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwYWRkaW5nV2lkdGggPSBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5wYWRkaW5nUmlnaHQ7XHJcbiAgICAgICAgICAgIHZhciBwYWRkaW5nSGVpZ2h0ID0gc2l6ZS5wYWRkaW5nVG9wICsgc2l6ZS5wYWRkaW5nQm90dG9tO1xyXG4gICAgICAgICAgICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgbWFyZ2luSGVpZ2h0ID0gc2l6ZS5tYXJnaW5Ub3AgKyBzaXplLm1hcmdpbkJvdHRvbTtcclxuICAgICAgICAgICAgdmFyIGJvcmRlcldpZHRoID0gc2l6ZS5ib3JkZXJMZWZ0V2lkdGggKyBzaXplLmJvcmRlclJpZ2h0V2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuICAgICAgICAgICAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXHJcbiAgICAgICAgICAgIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gICAgICAgICAgICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHN0eWxlV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxyXG4gICAgICAgICAgICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xyXG4gICAgICAgICAgICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxyXG4gICAgICAgICAgICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNpemUuaW5uZXJXaWR0aCA9IHNpemUud2lkdGggLSAoIHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XHJcbiAgICAgICAgICAgIHNpemUuaW5uZXJIZWlnaHQgPSBzaXplLmhlaWdodCAtICggcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gICAgICAgICAgICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBnZXRTaXplO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRFbGVtZW50U2l6ZShlbGUpIHtcclxuICAgICAgICByZXR1cm4gX2dldFNpemUoKShlbGUpO1xyXG4gICAgfVxyXG59KTsiXX0=
