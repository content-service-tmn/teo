!function(t){var i;window.UIkit2&&(i=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-grid",["uikit"],function(){return i||t(UIkit2)})}(function(y){"use strict";y.component("grid",{defaults:{colwidth:"auto",animation:!0,duration:300,gutter:0,controls:!1,filter:!1,origin:y.langdirection},boot:function(){y.ready(function(t){y.$("[data-uk-grid]",t).each(function(){var t=y.$(this);t.data("grid")||y.grid(t,y.Utils.options(t.attr("data-uk-grid")))})})},init:function(){var e=this,t=String(this.options.gutter).trim().split(" ");this.gutterv=parseInt(t[0],10),this.gutterh=parseInt(t[1]||t[0],10),this.element.css({position:"relative"}),this.controls=null,this.origin=this.options.origin,this.options.controls&&(this.controls=y.$(this.options.controls),this.controls.on("click","[data-uk-filter]",function(t){t.preventDefault(),e.filter(y.$(this).attr("data-uk-filter"))}),this.controls.on("click","[data-uk-sort]",function(t){t.preventDefault();var i=y.$(this).attr("data-uk-sort").split(":");e.sort(i[0],i[1])})),y.$win.on("load resize orientationchange",y.Utils.debounce(function(){e.currentfilter?e.filter(e.currentfilter):this.update()}.bind(this),100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.update()}),y.domObserve(this.element,function(t){e.update()}),!1!==this.options.filter?this.filter(this.options.filter):this.update()},_prepareElements:function(){var t,i=this.element.children(":not([data-grid-prepared])");i.length&&(t={position:"absolute",boxSizing:"border-box",width:"auto"==this.options.colwidth?"":this.options.colwidth},this.options.gutter&&(t["padding-"+this.origin]=this.gutterh,t["padding-bottom"]=this.gutterv,this.element.css("margin-"+this.origin,-1*this.gutterh)),i.attr("data-grid-prepared","true").css(t))},update:function(t){var e=this;this._prepareElements();var n,r,o,s,a,d,i,h,u,l=t=t||this.element.children(":visible"),c=this.element.width()+2*this.gutterh+2,f=0,p=0,g=[];this.trigger("beforeupdate.uk.grid",[l]),l.each(function(t){var i;for(i=this,u=function(){var o="Webkit Moz ms Ms O".split(" "),s=document.documentElement.style;function b(t){var i=parseFloat(t),e=-1===t.indexOf("%")&&!isNaN(i);return e&&i}var y,k,w,a="undefined"==typeof console?function(){}:function(t){console.error(t)},x=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],d=!1;function W(){if(!d){d=!0;var e,i=window.getComputedStyle;if(e=i?function(t){return i(t,null)}:function(t){return t.currentStyle},y=function(t){var i=e(t);return i||a("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),i},k=function(t){if(t){if("string"==typeof s[t])return t;var i;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,n=o.length;e<n;e++)if(i=o[e]+t,"string"==typeof s[i])return i}}("boxSizing")){var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style[k]="border-box";var n=document.body||document.documentElement;n.appendChild(t);var r=y(t);w=200===b(r.width),n.removeChild(t)}}}return function(t){if(W(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var i=y(t);if("none"===i.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},i=0,e=x.length;i<e;i++){var n=x[i];t[n]=0}return t}();var e={};e.width=t.offsetWidth,e.height=t.offsetHeight;for(var n=e.isBorderBox=!(!k||!i[k]||"border-box"!==i[k]),r=0,o=x.length;r<o;r++){var s=x[r],a=i[s],d=parseFloat(a);e[s]=isNaN(d)?0:d}var h=e.paddingLeft+e.paddingRight,u=e.paddingTop+e.paddingBottom,l=e.marginLeft+e.marginRight,c=e.marginTop+e.marginBottom,f=e.borderLeftWidth+e.borderRightWidth,p=e.borderTopWidth+e.borderBottomWidth,g=n&&w,m=b(i.width);!1!==m&&(e.width=m+(g?0:h+f));var v=b(i.height);return!1!==v&&(e.height=v+(g?0:u+p)),e.innerWidth=e.width-(h+f),e.innerHeight=e.height-(u+p),e.outerWidth=e.width+l,e.outerHeight=e.height+c,e}}}()(i),n=y.$(this),r=u.outerWidth,o=u.outerHeight,d=p=f=0,h=g.length;d<h;d++)s=g[d],f<=s.aX&&(f=s.aX),c<f+r&&(f=0),p<=s.aY&&(p=s.aY);(a={ele:n,top:p,width:r,height:o,aY:p+o,aX:f+r})[e.origin]=f,g.push(a)});var m,v,b=0;for(d=0,h=g.length;d<h;d++){for(s=g[d],i=p=0;i<d;i++)m=g[i],s[this.origin]<m.aX&&m[this.origin]+1<s.aX&&(p=m.aY);s.top=p,s.aY=p+s.height,b=Math.max(b,s.aY)}b-=this.gutterv,this.options.animation?(this.element.stop().animate({height:b},100),g.forEach(function(t){(v={top:t.top,opacity:1})[e.origin]=t[e.origin],t.ele.stop().animate(v,this.options.duration)}.bind(this))):(this.element.css("height",b),g.forEach(function(t){(v={top:t.top,opacity:1})[e.origin]=t[e.origin],t.ele.css(v)}.bind(this))),setTimeout(function(){y.$doc.trigger("scrolling.uk.document")},2*this.options.duration*(this.options.animation?1:0)),this.trigger("afterupdate.uk.grid",[l])},filter:function(r){"number"==typeof(r=(this.currentfilter=r)||[])&&(r=r.toString()),"string"==typeof r&&(r=r.split(/,/).map(function(t){return t.trim()}));var t=this.element.children(),o={visible:[],hidden:[]};t.each(function(t){var i=y.$(this),e=i.attr("data-uk-filter"),n=!r.length;e&&(e=e.split(/,/).map(function(t){return t.trim()}),r.forEach(function(t){-1<e.indexOf(t)&&(n=!0)})),o[n?"visible":"hidden"].push(i)}),o.hidden=y.$(o.hidden).map(function(){return this[0]}),o.visible=y.$(o.visible).map(function(){return this[0]}),o.hidden.attr("aria-hidden","true").filter(":visible").fadeOut(this.options.duration),o.visible.attr("aria-hidden","false").filter(":hidden").css("opacity",0).show(),this.update(o.visible),this.controls&&this.controls.length&&this.controls.find("[data-uk-filter]").removeClass("uk-active").filter('[data-uk-filter="'+r+'"]').addClass("uk-active")},sort:function(e,n){"string"==typeof(n=n||1)&&(n="desc"==n.toLowerCase()?-1:1);var t=this.element.children();t.sort(function(t,i){return t=y.$(t),((i=y.$(i)).data(e)||"")<(t.data(e)||"")?n:-1*n}).appendTo(this.element),this.update(t.filter(":visible")),this.controls&&this.controls.length&&this.controls.find("[data-uk-sort]").removeClass("uk-active").filter('[data-uk-sort="'+e+":"+(-1==n?"desc":"asc")+'"]').addClass("uk-active")}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
