!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-timepicker",["uikit"],function(){return e||t(UIkit2)})}(function(o){"use strict";o.component("timepicker",{defaults:{format:"24h",delay:0,start:0,end:24},boot:function(){o.$html.on("focus.timepicker.uikit","[data-uk-timepicker]",function(t){var e=o.$(this);if(!e.data("timepicker")){var i=o.timepicker(e,o.Utils.options(e.attr("data-uk-timepicker")));setTimeout(function(){i.autocomplete.input.focus()},40)}})},init:function(){var t,e=this,i=function(t,e){e=e||24;var i,o,a={"12h":[],"24h":[]};for(i=t=t||0,o="";i<e;i++)o=""+i,i<10&&(o="0"+o),a["24h"].push({value:o+":00"}),a["24h"].push({value:o+":30"}),0===i&&(o=12,a["12h"].push({value:o+":00 AM"}),a["12h"].push({value:o+":30 AM"})),0<i&&i<13&&12!==i&&(a["12h"].push({value:o+":00 AM"}),a["12h"].push({value:o+":30 AM"})),12<=i&&(0===(o-=12)&&(o=12),o<10&&(o="0"+String(o)),a["12h"].push({value:o+":00 PM"}),a["12h"].push({value:o+":30 PM"}));return a}(this.options.start,this.options.end);this.options.minLength=0,this.options.template='<ul class="uk-nav uk-nav-autocomplete uk-autocomplete-results">{{~items}}<li data-value="{{$item.value}}"><a>{{$item.value}}</a></li>{{/items}}</ul>',this.options.source=function(t){t(i[e.options.format]||i["12h"])},this.element.is("input")?(this.element.wrap('<div class="uk-autocomplete"></div>'),t=this.element.parent()):t=this.element.addClass("uk-autocomplete"),this.autocomplete=o.autocomplete(t,this.options),this.autocomplete.dropdown.addClass("uk-dropdown-small uk-dropdown-scrollable"),this.autocomplete.on("show.uk.autocomplete",function(){var t=e.autocomplete.dropdown.find('[data-value="'+e.autocomplete.input.val()+'"]');setTimeout(function(){e.autocomplete.pick(t,!0)},10)}),this.autocomplete.input.on("focus",function(){e.autocomplete.value=Math.random(),e.autocomplete.triggercomplete()}).on("blur",o.Utils.debounce(function(){e.checkTime()},100)),this.element.data("timepicker",this)},checkTime:function(){var t,e,i,o,a="AM",u=this.autocomplete.input.val();"12h"==this.options.format?(e=(t=u.split(" "))[0].split(":"),a=t[1]):e=u.split(":"),i=parseInt(e[0],10),o=parseInt(e[1],10),isNaN(i)&&(i=0),isNaN(o)&&(o=0),"12h"==this.options.format?(12<i?i=12:i<0&&(i=12),"am"===a||"a"===a?a="AM":"pm"!==a&&"p"!==a||(a="PM"),"AM"!==a&&"PM"!==a&&(a="AM")):24<=i?i=23:i<0&&(i=0),o<0?o=0:60<=o&&(o=0),this.autocomplete.input.val(this.formatTime(i,o,a)).trigger("change")},formatTime:function(t,e,i){return(t=t<10?"0"+t:t)+":"+(e=e<10?"0"+e:e)+("12h"==this.options.format?" "+i:"")}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGltZXBpY2tlci5qcyJdLCJuYW1lcyI6WyJhZGRvbiIsImNvbXBvbmVudCIsIndpbmRvdyIsIlVJa2l0MiIsImRlZmluZSIsImFtZCIsIlVJIiwiZGVmYXVsdHMiLCJmb3JtYXQiLCJkZWxheSIsInN0YXJ0IiwiZW5kIiwiYm9vdCIsIiRodG1sIiwib24iLCJlIiwiZWxlIiwiJCIsInRoaXMiLCJkYXRhIiwib2JqIiwidGltZXBpY2tlciIsIlV0aWxzIiwib3B0aW9ucyIsImF0dHIiLCJzZXRUaW1lb3V0IiwiYXV0b2NvbXBsZXRlIiwiaW5wdXQiLCJmb2N1cyIsImluaXQiLCJjb250YWluZXIiLCIkdGhpcyIsInRpbWVzIiwiaSIsImgiLCIxMmgiLCIyNGgiLCJwdXNoIiwidmFsdWUiLCJTdHJpbmciLCJnZXRUaW1lUmFuZ2UiLCJtaW5MZW5ndGgiLCJ0ZW1wbGF0ZSIsInNvdXJjZSIsInJlbGVhc2UiLCJlbGVtZW50IiwiaXMiLCJ3cmFwIiwicGFyZW50IiwiYWRkQ2xhc3MiLCJkcm9wZG93biIsInNlbGVjdGVkIiwiZmluZCIsInZhbCIsInBpY2siLCJNYXRoIiwicmFuZG9tIiwidHJpZ2dlcmNvbXBsZXRlIiwiZGVib3VuY2UiLCJjaGVja1RpbWUiLCJhcnIiLCJ0aW1lQXJyYXkiLCJob3VyIiwibWludXRlIiwibWVyaWRpYW4iLCJ0aW1lIiwic3BsaXQiLCJwYXJzZUludCIsImlzTmFOIiwiZm9ybWF0VGltZSIsInRyaWdnZXIiXSwibWFwcGluZ3MiOiJDQUNBLFNBQVVBLEdBRU4sSUFBSUMsRUFFQUMsT0FBT0MsU0FDUEYsRUFBWUQsRUFBTUcsU0FHRCxtQkFBVkMsUUFBd0JBLE9BQU9DLEtBQ3RDRCxPQUFPLG1CQUFvQixDQUFDLFNBQVUsV0FDbEMsT0FBT0gsR0FBYUQsRUFBTUcsVUFWdEMsQ0FjRyxTQUFTRyxHQUVSLGFBR0FBLEVBQUdMLFVBQVUsYUFBYyxDQUV2Qk0sU0FBVSxDQUNOQyxPQUFTLE1BQ1RDLE1BQVMsRUFD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TSxLQUN6QkYsRUFBV0osRUFBSSxJQUVmQyxFQUFZSSxFQUFLQyxNQUFNLEtBRzNCSixFQUFTSyxTQUFTTixFQUFVLEdBQUksSUFDaENFLEVBQVNJLFNBQVNOLEVBQVUsR0FBSSxJQUU1Qk8sTUFBTU4sS0FBU0EsRUFBTyxHQUN0Qk0sTUFBTUwsS0FBU0EsRUFBUyxHQUVELE9BQXZCN0MsS0FBS0ssUUFBUWYsUUFDRixHQUFQc0QsRUFDQUEsRUFBTyxHQUNBQSxFQUFPLElBQ2RBLEVBQU8sSUFHTSxPQUFiRSxHQUFrQyxNQUFiQSxFQUNyQkEsRUFBVyxLQUNTLE9BQWJBLEdBQWtDLE1BQWJBLElBQzVCQSxFQUFXLE1BR0UsT0FBYkEsR0FBa0MsT0FBYkEsSUFDckJBLEVBQVcsT0FLSCxJQUFSRixFQUNBQSxFQUFPLEdBQ0FBLEVBQU8sSUFDZEEsRUFBTyxHQUlYQyxFQUFTLEVBQ1RBLEVBQVMsRUFDUSxJQUFWQSxJQUNQQSxFQUFTLEdBR2I3QyxLQUFLUSxhQUFhQyxNQUFNMEIsSUFBSW5DLEtBQUttRCxXQUFXUCxFQUFNQyxFQUFRQyxJQUFXTSxRQUFRLFdBR2pGRCxXQUFZLFNBQVNQLEVBQU1DLEVBQVFDLEdBRy9CLE9BRkFGLEVBQU9BLEVBQU8sR0FBSyxJQUFNQSxFQUFPQSxHQUVsQixLQURkQyxFQUFTQSxFQUFTLEdBQUssSUFBTUEsRUFBU0EsSUFDZSxPQUF2QjdDLEtBQUtLLFFBQVFmLE9BQWtCLElBQU13RCxFQUFXIiwiZmlsZSI6ImNvbXBvbmVudHMvdGltZXBpY2tlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBVSWtpdCAyLjI3LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKGFkZG9uKSB7XHJcblxyXG4gICAgdmFyIGNvbXBvbmVudDtcclxuXHJcbiAgICBpZiAod2luZG93LlVJa2l0Mikge1xyXG4gICAgICAgIGNvbXBvbmVudCA9IGFkZG9uKFVJa2l0Mik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKCd1aWtpdC10aW1lcGlja2VyJywgWyd1aWtpdCddLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50IHx8IGFkZG9uKFVJa2l0Mik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KShmdW5jdGlvbihVSSl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cclxuICAgIFVJLmNvbXBvbmVudCgndGltZXBpY2tlcicsIHtcclxuXHJcbiAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgZm9ybWF0IDogJzI0aCcsXHJcbiAgICAgICAgICAgIGRlbGF5ICA6IDAsXHJcbiAgICAgICAgICAgIHN0YXJ0ICA6IDAsXHJcbiAgICAgICAgICAgIGVuZCAgICA6IDI0XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYm9vdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkuJGh0bWwub24oJ2ZvY3VzLnRpbWVwaWNrZXIudWlraXQnLCAnW2RhdGEtdWstdGltZXBpY2tlcl0nLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGUuZGF0YSgndGltZXBpY2tlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IFVJLnRpbWVwaWNrZXIoZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKCdkYXRhLXVrLXRpbWVwaWNrZXInKSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5hdXRvY29tcGxldGUuaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA0MCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzICA9IHRoaXMsIHRpbWVzID0gZ2V0VGltZVJhbmdlKHRoaXMub3B0aW9ucy5zdGFydCwgdGhpcy5vcHRpb25zLmVuZCksIGNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW5MZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudGVtcGxhdGUgID0gJzx1bCBjbGFzcz1cInVrLW5hdiB1ay1uYXYtYXV0b2NvbXBsZXRlIHVrLWF1dG9jb21wbGV0ZS1yZXN1bHRzXCI+e3t+aXRlbXN9fTxsaSBkYXRhLXZhbHVlPVwie3skaXRlbS52YWx1ZX19XCI+PGE+e3skaXRlbS52YWx1ZX19PC9hPjwvbGk+e3svaXRlbXN9fTwvdWw+JztcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zb3VyY2UgPSBmdW5jdGlvbihyZWxlYXNlKSB7XHJcbiAgICAgICAgICAgICAgICByZWxlYXNlKHRpbWVzWyR0aGlzLm9wdGlvbnMuZm9ybWF0XSB8fCB0aW1lc1snMTJoJ10pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5pcygnaW5wdXQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LndyYXAoJzxkaXYgY2xhc3M9XCJ1ay1hdXRvY29tcGxldGVcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5wYXJlbnQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5hZGRDbGFzcygndWstYXV0b2NvbXBsZXRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gVUkuYXV0b2NvbXBsZXRlKGNvbnRhaW5lciwgdGhpcy5vcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuZHJvcGRvd24uYWRkQ2xhc3MoJ3VrLWRyb3Bkb3duLXNtYWxsIHVrLWRyb3Bkb3duLXNjcm9sbGFibGUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLm9uKCdzaG93LnVrLmF1dG9jb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9ICR0aGlzLmF1dG9jb21wbGV0ZS5kcm9wZG93bi5maW5kKCdbZGF0YS12YWx1ZT1cIicrJHRoaXMuYXV0b2NvbXBsZXRlLmlucHV0LnZhbCgpKydcIl0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuYXV0b2NvbXBsZXRlLnBpY2soc2VsZWN0ZWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmlucHV0Lm9uKCdmb2N1cycsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgJHRoaXMuYXV0b2NvbXBsZXRlLnZhbHVlID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLmF1dG9jb21wbGV0ZS50cmlnZ2VyY29tcGxldGUoKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCdibHVyJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5jaGVja1RpbWUoKTtcclxuICAgICAgICAgICAgfSwgMTAwKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZGF0YShcInRpbWVwaWNrZXJcIiwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tUaW1lOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBhcnIsIHRpbWVBcnJheSwgbWVyaWRpYW4gPSAnQU0nLCBob3VyLCBtaW51dGUsIHRpbWUgPSB0aGlzLmF1dG9jb21wbGV0ZS5pbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZm9ybWF0ID09ICcxMmgnKSB7XHJcbiAgICAgICAgICAgICAgICBhcnIgPSB0aW1lLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICB0aW1lQXJyYXkgPSBhcnJbMF0uc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgIG1lcmlkaWFuID0gYXJyWzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGltZUFycmF5ID0gdGltZS5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBob3VyICAgPSBwYXJzZUludCh0aW1lQXJyYXlbMF0sIDEwKTtcclxuICAgICAgICAgICAgbWludXRlID0gcGFyc2VJbnQodGltZUFycmF5WzFdLCAxMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNOYU4oaG91cikpICAgaG91ciA9IDA7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihtaW51dGUpKSBtaW51dGUgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mb3JtYXQgPT0gJzEyaCcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChob3VyID4gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3VyID0gMTI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IDEyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZXJpZGlhbiA9PT0gJ2FtJyB8fCBtZXJpZGlhbiA9PT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpYW4gPSAnQU0nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGlhbiA9PT0gJ3BtJyB8fCBtZXJpZGlhbiA9PT0gJ3AnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpYW4gPSAnUE0nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZXJpZGlhbiAhPT0gJ0FNJyAmJiBtZXJpZGlhbiAhPT0gJ1BNJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWFuID0gJ0FNJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPj0gMjQpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3VyID0gMjM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtaW51dGUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBtaW51dGUgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1pbnV0ZSA+PSA2MCkge1xyXG4gICAgICAgICAgICAgICAgbWludXRlID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuaW5wdXQudmFsKHRoaXMuZm9ybWF0VGltZShob3VyLCBtaW51dGUsIG1lcmlkaWFuKSkudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZm9ybWF0VGltZTogZnVuY3Rpb24oaG91ciwgbWludXRlLCBtZXJpZGlhbikge1xyXG4gICAgICAgICAgICBob3VyID0gaG91ciA8IDEwID8gJzAnICsgaG91ciA6IGhvdXI7XHJcbiAgICAgICAgICAgIG1pbnV0ZSA9IG1pbnV0ZSA8IDEwID8gJzAnICsgbWludXRlIDogbWludXRlO1xyXG4gICAgICAgICAgICByZXR1cm4gaG91ciArICc6JyArIG1pbnV0ZSArICh0aGlzLm9wdGlvbnMuZm9ybWF0ID09ICcxMmgnID8gJyAnICsgbWVyaWRpYW4gOiAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaGVscGVyXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VGltZVJhbmdlKHN0YXJ0LCBlbmQpIHtcclxuXHJcbiAgICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xyXG4gICAgICAgIGVuZCAgID0gZW5kIHx8IDI0O1xyXG5cclxuICAgICAgICB2YXIgdGltZXMgPSB7JzEyaCc6W10sICcyNGgnOltdfSwgaSwgaDtcclxuXHJcbiAgICAgICAgZm9yIChpID0gc3RhcnQsIGg9Jyc7IGk8ZW5kOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGggPSAnJytpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGk8MTApICBoID0gJzAnK2g7XHJcblxyXG4gICAgICAgICAgICB0aW1lc1snMjRoJ10ucHVzaCh7dmFsdWU6IChoKyc6MDAnKX0pO1xyXG4gICAgICAgICAgICB0aW1lc1snMjRoJ10ucHVzaCh7dmFsdWU6IChoKyc6MzAnKX0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGggPSAxMjtcclxuICAgICAgICAgICAgICAgIHRpbWVzWycxMmgnXS5wdXNoKHt2YWx1ZTogKGgrJzowMCBBTScpfSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lc1snMTJoJ10ucHVzaCh7dmFsdWU6IChoKyc6MzAgQU0nKX0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgaTwxMyAmJiBpIT09MTIpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVzWycxMmgnXS5wdXNoKHt2YWx1ZTogKGgrJzowMCBBTScpfSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lc1snMTJoJ10ucHVzaCh7dmFsdWU6IChoKyc6MzAgQU0nKX0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaSA+PSAxMikge1xyXG5cclxuICAgICAgICAgICAgICAgIGggPSBoLTEyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGggPT09IDApIGggPSAxMjtcclxuICAgICAgICAgICAgICAgIGlmIChoIDwgMTApIGggPSAnMCcrU3RyaW5nKGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpbWVzWycxMmgnXS5wdXNoKHt2YWx1ZTogKGgrJzowMCBQTScpfSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lc1snMTJoJ10ucHVzaCh7dmFsdWU6IChoKyc6MzAgUE0nKX0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGltZXM7XHJcbiAgICB9XHJcblxyXG59KTsiXX0=
