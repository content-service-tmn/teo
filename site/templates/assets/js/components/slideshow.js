!function(i){var t;window.UIkit2&&(t=i(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-slideshow",["uikit"],function(){return t||i(UIkit2)})}(function(l){"use strict";var u,p=0;l.component("slideshow",{defaults:{animation:"fade",duration:500,height:"auto",start:0,autoplay:!1,autoplayInterval:7e3,videoautoplay:!0,videomute:!0,slices:15,pauseOnHover:!0,kenburns:!1,kenburnsanimations:["uk-animation-middle-left","uk-animation-top-right","uk-animation-bottom-left","uk-animation-top-center","","uk-animation-bottom-right"]},current:!1,interval:null,hovering:!1,boot:function(){l.ready(function(i){l.$("[data-uk-slideshow]",i).each(function(){var i=l.$(this);i.data("slideshow")||l.slideshow(i,l.Utils.options(i.attr("data-uk-slideshow")))})})},init:function(){var s=this;this.container=this.element.hasClass("uk-slideshow")?this.element:l.$(this.find(".uk-slideshow:first")),this.current=this.options.start,this.animating=!1,this.fixFullscreen=navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&this.container.hasClass("uk-slideshow-fullscreen"),this.options.kenburns&&(this.kbanimduration=!0===this.options.kenburns?"15s":this.options.kenburns,String(this.kbanimduration).match(/(ms|s)$/)||(this.kbanimduration+="ms"),"string"==typeof this.options.kenburnsanimations&&(this.options.kenburnsanimations=this.options.kenburnsanimations.split(","))),this.update(),this.on("click.uk.slideshow","[data-uk-slideshow-item]",function(i){i.preventDefault();var t=l.$(this).attr("data-uk-slideshow-item");if(s.current!=t){switch(t){case"next":case"previous":s["next"==t?"next":"previous"]();break;default:s.show(parseInt(t,10))}s.stop()}}),l.$win.on("resize load",l.Utils.debounce(function(){s.resize(),s.fixFullscreen&&(s.container.css("height",window.innerHeight),s.slides.css("height",window.innerHeight))},100)),setTimeout(function(){s.resize()},80),this.options.autoplay&&this.start(),this.options.videoautoplay&&this.slides.eq(this.current).data("media")&&this.playmedia(this.slides.eq(this.current).data("media")),this.options.kenburns&&this.applyKenBurns(this.slides.eq(this.current)),this.container.on({mouseenter:function(){s.options.pauseOnHover&&(s.hovering=!0)},mouseleave:function(){s.hovering=!1}}),this.on("swipeRight swipeLeft",function(i){s["swipeLeft"==i.type?"next":"previous"]()}),this.on("display.uk.check",function(){s.element.is(":visible")&&(s.resize(),s.fixFullscreen&&(s.container.css("height",window.innerHeight),s.slides.css("height",window.innerHeight)))}),l.domObserve(this.element,function(i){s.container.children(":not([data-slideshow-slide])").not(".uk-slideshow-ghost").length&&s.update(!0)})},update:function(i){var u,h=this,c=0;this.slides=this.container.children(),this.slidesCount=this.slides.length,this.slides.eq(this.current).length||(this.current=0),this.slides.each(function(s){var i=l.$(this);if(!i.data("processed")){var e=i.children("img,video,iframe").eq(0),t="html";if(i.data("media",e),i.data("sizer",e),e.length){var a;switch(t=e[0].nodeName.toLowerCase(),e[0].nodeName){case"IMG":var n=l.$('<div class="uk-cover-background uk-position-cover"></div>').css({"background-image":"url("+e.attr("src")+")"});e.attr("width")&&e.attr("height")&&(a=l.$("<canvas></canvas>").attr({width:e.attr("width"),height:e.attr("height")}),e.replaceWith(a),e=a,a=void 0),e.css({width:"100%",height:"auto",opacity:0}),i.prepend(n).data("cover",n);break;case"IFRAME":var o=e[0].src,r="sw-"+ ++p;e.attr("src","").on("load",function(){if((s!==h.current||s==h.current&&!h.options.videoautoplay)&&h.pausemedia(e),h.options.videomute){h.mutemedia(e);var i=setInterval((t=0,function(){h.mutemedia(e),4<=++t&&clearInterval(i)}),250)}var t}).data("slideshow",h).attr("data-player-id",r).attr("src",[o,-1<o.indexOf("?")?"&":"?","enablejsapi=1&api=1&player_id="+r].join("")).addClass("uk-position-absolute"),l.support.touch||e.css("pointer-events","none"),a=!0,l.cover&&(l.cover(e),e.attr("data-uk-cover","{}"));break;case"VIDEO":e.addClass("uk-cover-object uk-position-absolute"),a=!0,h.options.videomute&&h.mutemedia(e)}if(a){u=l.$("<canvas></canvas>").attr({width:e[0].width,height:e[0].height});var d=l.$('<img style="width:100%;height:auto;">').attr("src",u[0].toDataURL());i.prepend(d),i.data("sizer",d)}}else i.data("sizer",i);h.hasKenBurns(i)&&i.data("cover").css({"-webkit-animation-duration":h.kbanimduration,"animation-duration":h.kbanimduration}),i.data("processed",++c),i.attr("data-slideshow-slide",t)}}),c&&(this.triggers=this.find("[data-uk-slideshow-item]"),this.slides.attr("aria-hidden","true").removeClass("uk-active").eq(this.current).addClass("uk-active").attr("aria-hidden","false"),this.triggers.filter('[data-uk-slideshow-item="'+this.current+'"]').addClass("uk-active")),i&&c&&this.resize()},resize:function(){if(!this.container.hasClass("uk-slideshow-fullscreen")){var i=this.options.height;"auto"===this.options.height&&(i=0,this.slides.css("height","").each(function(){i=Math.max(i,l.$(this).height())})),this.container.css("height",i),this.slides.css("height",i)}},show:function(i,t){if(!this.animating&&this.current!=i){this.animating=!0;var s=this,e=this.slides.eq(this.current),a=this.slides.eq(i),n=t||(this.current<i?1:-1),o=e.data("media"),r=u[this.options.animation]?this.options.animation:"fade",d=a.data("media");s.applyKenBurns(a),l.support.animation||(r="none"),e=l.$(e),a=l.$(a),s.trigger("beforeshow.uk.slideshow",[a,e,s]),u[r].apply(this,[e,a,n]).then(function(){s.animating&&(o&&o.is("video,iframe")&&s.pausemedia(o),d&&d.is("video,iframe")&&s.playmedia(d),a.addClass("uk-active").attr("aria-hidden","false"),e.removeClass("uk-active").attr("aria-hidden","true"),s.animating=!1,s.current=i,l.Utils.checkDisplay(a,'[class*="uk-animation-"]:not(.uk-cover-background.uk-position-cover)'),s.trigger("show.uk.slideshow",[a,e,s]))}),s.triggers.removeClass("uk-active"),s.triggers.filter('[data-uk-slideshow-item="'+i+'"]').addClass("uk-active")}},applyKenBurns:function(i){if(this.hasKenBurns(i)){var t=this.options.kenburnsanimations,s=this.kbindex||0;i.data("cover").attr("class","uk-cover-background uk-position-cover").width(),i.data("cover").addClass(["uk-animation-scale","uk-animation-reverse",t[s].trim()].join(" ")),this.kbindex=t[s+1]?s+1:0}},hasKenBurns:function(i){return this.options.kenburns&&i.data("cover")},next:function(){this.show(this.slides[this.current+1]?this.current+1:0,1)},previous:function(){this.show(this.slides[this.current-1]?this.current-1:this.slides.length-1,-1)},start:function(){this.stop();var i=this;this.interval=setInterval(function(){i.hovering||i.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},playmedia:function(i){if(i&&i[0])switch(i[0].nodeName){case"VIDEO":this.options.videomute||(i[0].muted=!1),i[0].play();break;case"IFRAME":this.options.videomute||i[0].contentWindow.postMessage('{ "event": "command", "func": "unmute", "method":"setVolume", "value":1}',"*"),i[0].contentWindow.postMessage('{ "event": "command", "func": "playVideo", "method":"play"}',"*")}},pausemedia:function(i){switch(i[0].nodeName){case"VIDEO":i[0].pause();break;case"IFRAME":i[0].contentWindow.postMessage('{ "event": "command", "func": "pauseVideo", "method":"pause"}',"*")}},mutemedia:function(i){switch(i[0].nodeName){case"VIDEO":i[0].muted=!0;break;case"IFRAME":i[0].contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}}}),u={none:function(){var i=l.$.Deferred();return i.resolve(),i.promise()},scroll:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1).one(l.support.animation.end,function(){i.css("opacity",0).removeClass(-1==s?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),t.removeClass(-1==s?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),e.resolve()}.bind(this)),i.addClass(-1==s?"uk-slideshow-scroll-backward-out":"uk-slideshow-scroll-forward-out"),t.addClass(-1==s?"uk-slideshow-scroll-backward-in":"uk-slideshow-scroll-forward-in"),t.width(),e.promise()},swipe:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1).one(l.support.animation.end,function(){i.css("opacity",0).removeClass(-1===s?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),t.removeClass(-1===s?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),e.resolve()}.bind(this)),i.addClass(-1==s?"uk-slideshow-swipe-backward-out":"uk-slideshow-swipe-forward-out"),t.addClass(-1==s?"uk-slideshow-swipe-backward-in":"uk-slideshow-swipe-forward-in"),t.width(),e.promise()},scale:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1),i.one(l.support.animation.end,function(){i.css("opacity",0).removeClass("uk-slideshow-scale-out"),e.resolve()}.bind(this)),i.addClass("uk-slideshow-scale-out"),i.width(),e.promise()},fade:function(i,t,s){var e=l.$.Deferred();return i.css("animation-duration",this.options.duration+"ms"),t.css("animation-duration",this.options.duration+"ms"),t.css("opacity",1),t.data("cover")||t.data("placeholder")||t.css("opacity",1).one(l.support.animation.end,function(){t.removeClass("uk-slideshow-fade-in")}).addClass("uk-slideshow-fade-in"),i.one(l.support.animation.end,function(){i.css("opacity",0).removeClass("uk-slideshow-fade-out"),e.resolve()}.bind(this)),i.addClass("uk-slideshow-fade-out"),i.width(),e.promise()}},l.slideshow.animations=u,window.addEventListener("message",function(i){var t,s=i.data;if("string"==typeof s)try{s=JSON.parse(s)}catch(i){s={}}i.origin&&-1<i.origin.indexOf("vimeo")&&"ready"==s.event&&s.player_id&&(t=l.$('[data-player-id="'+s.player_id+'"]')).length&&t.data("slideshow").mutemedia(t)},!1)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
