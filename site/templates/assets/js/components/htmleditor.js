!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-htmleditor",["uikit"],function(){return e||t(UIkit2)})}(function(s){"use strict";var e=[];return s.component("htmleditor",{defaults:{iframe:!1,mode:"split",markdown:!1,autocomplete:!0,enablescripts:!1,height:500,maxsplitsize:1e3,codemirror:{mode:"htmlmixed",lineWrapping:!0,dragDrop:!1,autoCloseTags:!0,matchTags:!0,autoCloseBrackets:!0,matchBrackets:!0,indentUnit:4,indentWithTabs:!1,tabSize:4,hintOptions:{completionSingle:!1}},toolbar:["bold","italic","strike","link","image","blockquote","listUl","listOl"],lblPreview:"Preview",lblCodeview:"HTML",lblMarkedview:"Markdown"},boot:function(){s.ready(function(t){s.$("textarea[data-uk-htmleditor]",t).each(function(){var t=s.$(this);t.data("htmleditor")||s.htmleditor(t,s.Utils.options(t.attr("data-uk-htmleditor")))})})},init:function(){var o=this,t=s.components.htmleditor.template;this.CodeMirror=this.options.CodeMirror||CodeMirror,this.buttons={},t=(t=t.replace(/\{:lblPreview}/g,this.options.lblPreview)).replace(/\{:lblCodeview}/g,this.options.lblCodeview),this.htmleditor=s.$(t),this.content=this.htmleditor.find(".uk-htmleditor-content"),this.toolbar=this.htmleditor.find(".uk-htmleditor-toolbar"),this.preview=this.htmleditor.find(".uk-htmleditor-preview").children().eq(0),this.code=this.htmleditor.find(".uk-htmleditor-code"),this.element.before(this.htmleditor).appendTo(this.code),this.editor=this.CodeMirror.fromTextArea(this.element[0],this.options.codemirror),(this.editor.htmleditor=this).editor.on("change",s.Utils.debounce(function(){o.render()},150)),this.editor.on("change",function(){o.editor.save(),o.element.trigger("input")}),this.code.find(".CodeMirror").css("height",this.options.height),this.options.iframe?(this.iframe=s.$('<iframe class="uk-htmleditor-iframe" frameborder="0" scrolling="auto" height="100" width="100%"></iframe>'),this.preview.append(this.iframe),this.iframe[0].contentWindow.document.open(),this.iframe[0].contentWindow.document.close(),this.preview.container=s.$(this.iframe[0].contentWindow.document).find("body"),"string"==typeof this.options.iframe&&this.preview.container.parent().append('<link rel="stylesheet" href="'+this.options.iframe+'">')):this.preview.container=this.preview,s.$win.on("resize load",s.Utils.debounce(function(){o.fit()},200));var n=this.iframe?this.preview.container:o.preview.parent(),r=this.code.find(".CodeMirror-sizer"),l=this.code.find(".CodeMirror-scroll").on("scroll",s.Utils.debounce(function(){if("tab"!=o.htmleditor.attr("data-mode")){var t=r.height()-l.height(),e=(n[0].scrollHeight-(o.iframe?o.iframe.height():n.height()))/t,i=l.scrollTop()*e;n.scrollTop(i)}},10));this.htmleditor.on("click",".uk-htmleditor-button-code, .uk-htmleditor-button-preview",function(t){t.preventDefault(),"tab"==o.htmleditor.attr("data-mode")&&(o.htmleditor.find(".uk-htmleditor-button-code, .uk-htmleditor-button-preview").removeClass("uk-active").filter(this).addClass("uk-active"),o.activetab=s.$(this).hasClass("uk-htmleditor-button-code")?"code":"preview",o.htmleditor.attr("data-active-tab",o.activetab),o.editor.refresh())}),this.htmleditor.on("click","a[data-htmleditor-button]",function(){o.code.is(":visible")&&o.trigger("action."+s.$(this).data("htmleditor-button"),[o.editor])}),this.preview.parent().css("height",this.code.height()),this.options.autocomplete&&this.CodeMirror.showHint&&this.CodeMirror.hint&&this.CodeMirror.hint.html&&this.editor.on("inputRead",s.Utils.debounce(function(){var t=o.editor.getDoc().getCursor();if("xml"==o.CodeMirror.innerMode(o.editor.getMode(),o.editor.getTokenAt(t).state).mode.name){var e=o.editor.getCursor(),i=o.editor.getTokenAt(e);"<"!=i.string.charAt(0)&&"attribute"!=i.type||o.CodeMirror.showHint(o.editor,o.CodeMirror.hint.html,{completeSingle:!1})}},100)),this.debouncedRedraw=s.Utils.debounce(function(){o.redraw()},5),this.on("init.uk.component",function(){o.debouncedRedraw()}),this.element.attr("data-uk-check-display",1).on("display.uk.check",function(t){this.htmleditor.is(":visible")&&this.fit()}.bind(this)),e.push(this)},addButton:function(t,e){this.buttons[t]=e},addButtons:function(t){s.$.extend(this.buttons,t)},replaceInPreview:function(t,i){var o=this.editor,n=[],r=o.getValue(),l=-1,s=0;function a(t){var e=o.getValue().substring(0,t).split("\n");return{line:e.length-1,ch:e[e.length-1].length}}return this.currentvalue=this.currentvalue.replace(t,function(){var e={matches:arguments,from:a(l=r.indexOf(arguments[0],++l)),to:a(l+arguments[0].length),replace:function(t){o.replaceRange(t,e.from,e.to)},inRange:function(t){return t.line===e.from.line&&t.line===e.to.line?t.ch>=e.from.ch&&t.ch<e.to.ch:t.line===e.from.line&&t.ch>=e.from.ch||t.line>e.from.line&&t.line<e.to.line||t.line===e.to.line&&t.ch<e.to.ch}},t="string"==typeof i?i:i(e,s);return t||""===t?(s++,n.push(e),t):arguments[0]}),n},_buildtoolbar:function(){if(this.options.toolbar&&this.options.toolbar.length){var i=this,o=[];this.toolbar.empty(),this.options.toolbar.forEach(function(t){if(i.buttons[t]){var e=i.buttons[t].title?i.buttons[t].title:t;o.push('<li><a data-htmleditor-button="'+t+'" title="'+e+'" data-uk-tooltip>'+i.buttons[t].label+"</a></li>")}}),this.toolbar.html(o.join("\n"))}},fit:function(){var t=this.options.mode;"split"==t&&this.htmleditor.width()<this.options.maxsplitsize&&(t="tab"),"tab"==t&&(this.activetab||(this.activetab="code",this.htmleditor.attr("data-active-tab",this.activetab)),this.htmleditor.find(".uk-htmleditor-button-code, .uk-htmleditor-button-preview").removeClass("uk-active").filter("code"==this.activetab?".uk-htmleditor-button-code":".uk-htmleditor-button-preview").addClass("uk-active")),this.editor.refresh(),this.preview.parent().css("height",this.code.height()),this.htmleditor.attr("data-mode",t)},redraw:function(){this._buildtoolbar(),this.render(),this.fit()},getMode:function(){return this.editor.getOption("mode")},getCursorMode:function(){var t={mode:"html"};return this.trigger("cursorMode",[t]),t.mode},render:function(){if(this.currentvalue=this.editor.getValue(),this.options.enablescripts||(this.currentvalue=this.currentvalue.replace(/<(script|style)\b[^<]*(?:(?!<\/(script|style)>)<[^<]*)*<\/(script|style)>/gim,"")),!this.currentvalue)return this.element.val(""),void this.preview.container.html("");this.trigger("render",[this]),this.trigger("renderLate",[this]),this.preview.container.html(this.currentvalue)},addShortcut:function(t,e){var i={};return s.$.isArray(t)||(t=[t]),t.forEach(function(t){i[t]=e}),this.editor.addKeyMap(i),i},addShortcutAction:function(t,e){var i=this;this.addShortcut(e,function(){i.element.trigger("action."+t,[i.editor])})},replaceSelection:function(t){var e=this.editor.getSelection();if(!e.length){for(var i=this.editor.getCursor(),o=this.editor.getLine(i.line),n=i.ch,r=n;r<o.length&&/[\w$]+/.test(o.charAt(r));)++r;for(;n&&/[\w$]+/.test(o.charAt(n-1));)--n;var l=n!=r&&o.slice(n,r);l&&(this.editor.setSelection({line:i.line,ch:n},{line:i.line,ch:r}),e=l)}var s=t.replace("$1",e);this.editor.replaceSelection(s,"end"),this.editor.focus()},replaceLine:function(t){var e=this.editor.getDoc().getCursor(),i=this.editor.getLine(e.line),o=t.replace("$1",i);this.editor.replaceRange(o,{line:e.line,ch:0},{line:e.line,ch:i.length}),this.editor.setCursor({line:e.line,ch:o.length}),this.editor.focus()},save:function(){this.editor.save()}}),s.components.htmleditor.template=['<div class="uk-htmleditor uk-clearfix" data-mode="split">','<div class="uk-htmleditor-navbar">','<ul class="uk-htmleditor-navbar-nav uk-htmleditor-toolbar"></ul>','<div class="uk-htmleditor-navbar-flip">','<ul class="uk-htmleditor-navbar-nav">','<li class="uk-htmleditor-button-code"><a>{:lblCodeview}</a></li>','<li class="uk-htmleditor-button-preview"><a>{:lblPreview}</a></li>','<li><a data-htmleditor-button="fullscreen"><i class="uk-icon-expand"></i></a></li>',"</ul>","</div>","</div>",'<div class="uk-htmleditor-content">','<div class="uk-htmleditor-code"></div>','<div class="uk-htmleditor-preview"><div></div></div>',"</div>","</div>"].join(""),s.plugin("htmleditor","base",{init:function(a){a.addButtons({fullscreen:{title:"Fullscreen",label:'<i class="uk-icon-expand"></i>'},bold:{title:"Bold",label:'<i class="uk-icon-bold"></i>'},italic:{title:"Italic",label:'<i class="uk-icon-italic"></i>'},strike:{title:"Strikethrough",label:'<i class="uk-icon-strikethrough"></i>'},blockquote:{title:"Blockquote",label:'<i class="uk-icon-quote-right"></i>'},link:{title:"Link",label:'<i class="uk-icon-link"></i>'},image:{title:"Image",label:'<i class="uk-icon-picture-o"></i>'},listUl:{title:"Unordered List",label:'<i class="uk-icon-list-ul"></i>'},listOl:{title:"Ordered List",label:'<i class="uk-icon-list-ol"></i>'}}),e("bold","<strong>$1</strong>"),e("italic","<em>$1</em>"),e("strike","<del>$1</del>"),e("blockquote","<blockquote><p>$1</p></blockquote>","replaceLine"),e("link",'<a href="http://">$1</a>'),e("image",'<img src="http://" alt="$1">');var t=function(t){if("html"==a.getCursorMode()){t=t||"ul";for(var e=a.editor,i=e.getDoc(),o=i.getCursor(!0),n=i.getCursor(!1),r=CodeMirror.innerMode(e.getMode(),e.getTokenAt(e.getCursor()).state),l=r&&r.state&&r.state.context&&-1!=["ul","ol"].indexOf(r.state.context.tagName),s=o.line;s<n.line+1;s++)e.replaceRange("<li>"+e.getLine(s)+"</li>",{line:s,ch:0},{line:s,ch:e.getLine(s).length});l?e.setCursor({line:n.line,ch:e.getLine(n.line).length}):(e.replaceRange("<"+t+">\n"+e.getLine(o.line),{line:o.line,ch:0},{line:o.line,ch:e.getLine(o.line).length}),e.replaceRange(e.getLine(n.line+1)+"\n</"+t+">",{line:n.line+1,ch:0},{line:n.line+1,ch:e.getLine(n.line+1).length}),e.setCursor({line:n.line+1,ch:e.getLine(n.line+1).length})),e.focus()}};function e(t,e,i){a.on("action."+t,function(){"html"==a.getCursorMode()&&a["replaceLine"==i?"replaceLine":"replaceSelection"](e)})}a.on("action.listUl",function(){t("ul")}),a.on("action.listOl",function(){t("ol")}),a.htmleditor.on("click",'a[data-htmleditor-button="fullscreen"]',function(){a.htmleditor.toggleClass("uk-htmleditor-fullscreen");var t=a.editor.getWrapperElement();if(a.htmleditor.hasClass("uk-htmleditor-fullscreen")){var e=!1,i=a.htmleditor.parents().each(function(){"fixed"!=s.$(this).css("position")||s.$(this).is("html")||(e=s.$(this))});if(a.htmleditor.data("fixedParents",!1),e){var o=[];e=e.parent().find(i).each(function(){"none"!=s.$(this).css("transform")&&o.push(s.$(this).data("transform-reset",{transform:this.style.transform,"-webkit-transform":this.style.webkitTransform,"-webkit-transition":this.style.webkitTransition,transition:this.style.transition}).css({transform:"none","-webkit-transform":"none","-webkit-transition":"none",transition:"none"}))}),a.htmleditor.data("fixedParents",o)}a.editor.state.fullScreenRestore={scrollTop:window.pageYOffset,scrollLeft:window.pageXOffset,width:t.style.width,height:t.style.height},t.style.width="",t.style.height=a.content.height()+"px",document.documentElement.style.overflow="hidden"}else{document.documentElement.style.overflow="";var n=a.editor.state.fullScreenRestore;t.style.width=n.width,t.style.height=n.height,window.scrollTo(n.scrollLeft,n.scrollTop),a.htmleditor.data("fixedParents")&&a.htmleditor.data("fixedParents").forEach(function(t){t.css(t.data("transform-reset"))})}setTimeout(function(){a.fit(),s.$win.trigger("resize")},50)}),a.addShortcut(["Ctrl-S","Cmd-S"],function(){a.element.trigger("htmleditor-save",[a])}),a.addShortcutAction("bold",["Ctrl-B","Cmd-B"])}}),s.plugin("htmleditor","markdown",{init:function(l){var t=l.options.mdparser||window.marked||null;function e(){l.editor.setOption("mode","gfm"),l.htmleditor.find(".uk-htmleditor-button-code a").html(l.options.lblMarkedview)}function i(t,e,i){l.on("action."+t,function(){"markdown"==l.getCursorMode()&&l["replaceLine"==i?"replaceLine":"replaceSelection"](e)})}t&&(l.options.markdown&&e(),i("bold","**$1**"),i("italic","*$1*"),i("strike","~~$1~~"),i("blockquote","> $1","replaceLine"),i("link","[$1](http://)"),i("image","![$1](http://)"),l.on("action.listUl",function(){if("markdown"==l.getCursorMode()){for(var t=l.editor,e=t.getDoc().getCursor(!0),i=t.getDoc().getCursor(!1),o=e.line;o<i.line+1;o++)t.replaceRange("* "+t.getLine(o),{line:o,ch:0},{line:o,ch:t.getLine(o).length});t.setCursor({line:i.line,ch:t.getLine(i.line).length}),t.focus()}}),l.on("action.listOl",function(){if("markdown"==l.getCursorMode()){var t,e=l.editor,i=e.getDoc().getCursor(!0),o=e.getDoc().getCursor(!1),n=1;if(0<i.line)(t=e.getLine(i.line-1).match(/^(\d+)\./))&&(n=Number(t[1])+1);for(var r=i.line;r<o.line+1;r++)e.replaceRange(n+". "+e.getLine(r),{line:r,ch:0},{line:r,ch:e.getLine(r).length}),n++;e.setCursor({line:o.line,ch:e.getLine(o.line).length}),e.focus()}}),l.on("renderLate",function(){"gfm"==l.editor.options.mode&&(l.currentvalue=t(l.currentvalue))}),l.on("cursorMode",function(t,e){if("gfm"==l.editor.options.mode){var i=l.editor.getDoc().getCursor();l.editor.getTokenAt(i).state.base.htmlState||(e.mode="markdown")}}),s.$.extend(l,{enableMarkdown:function(){e(),this.render()},disableMarkdown:function(){this.editor.setOption("mode","htmlmixed"),this.htmleditor.find(".uk-htmleditor-button-code a").html(this.options.lblCodeview),this.render()}}),l.on({enableMarkdown:function(){l.enableMarkdown()},disableMarkdown:function(){l.disableMarkdown()}}))}}),s.htmleditor});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
