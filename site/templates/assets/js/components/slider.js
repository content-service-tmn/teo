!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-slider",["uikit"],function(){return e||t(UIkit2)})}(function(r){"use strict";var f,u,e,s,l={};return r.component("slider",{defaults:{center:!1,threshold:10,infinite:!0,autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0,activecls:"uk-active"},boot:function(){r.ready(function(t){setTimeout(function(){r.$("[data-uk-slider]",t).each(function(){var t=r.$(this);t.data("slider")||r.slider(t,r.Utils.options(t.attr("data-uk-slider")))})},0)})},init:function(){var i=this;this.container=this.element.find(".uk-slider"),this.focus=0,r.$win.on("resize load",r.Utils.debounce(function(){i.update(!0)},100)),this.on("click.uk.slider","[data-uk-slider-item]",function(t){t.preventDefault();var e=r.$(this).attr("data-uk-slider-item");if(i.focus!=e)switch(i.stop(),e){case"next":case"previous":i["next"==e?"next":"previous"]();break;default:i.updateFocus(parseInt(e,10))}}),this.container.on({"touchstart mousedown":function(t){t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),t.button&&2==t.button||!i.active||(i.stop(),e=r.$(t.target).is("a")?r.$(t.target):r.$(t.target).parents("a:first"),s=!1,e.length&&e.one("click",function(t){s&&t.preventDefault()}),(u=function(t){s=!0,f=i,l={touchx:parseInt(t.pageX,10),dir:1,focus:i.focus,base:i.options.center?"center":"area"},t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),f.element.data({"pointer-start":{x:parseInt(t.pageX,10),y:parseInt(t.pageY,10)},"pointer-pos-start":i.pos}),i.container.addClass("uk-drag"),u=!1}).x=parseInt(t.pageX,10),u.threshold=i.options.threshold)},mouseenter:function(){i.options.pauseOnHover&&(i.hovering=!0)},mouseleave:function(){i.hovering=!1}}),this.update(!0),this.on("display.uk.check",function(){i.element.is(":visible")&&i.update(!0)}),this.element.find("a,img").attr("draggable","false"),this.options.autoplay&&this.start(),r.domObserve(this.element,function(t){i.element.children(":not([data-slider-slide])").length&&i.update(!0)})},update:function(t){var e,i,s,n,a=this,o=0,h=0;if(this.items=this.container.children().filter(":visible"),this.vp=this.element[0].getBoundingClientRect().width,this.container.css({"min-width":"","min-height":""}),this.items.each(function(t){e=r.$(this).attr("data-slider-slide",t),n=e.css({left:"",width:""})[0].getBoundingClientRect(),i=n.width,s=e.width(),h=Math.max(h,n.height),e.css({left:o,width:i}).data({idx:t,left:o,width:i,cwidth:s,area:o+i,center:o-(a.vp/2-s/2)}),o+=i}),this.container.css({"min-width":o,"min-height":h}),this.options.infinite&&(o<=2*this.vp||this.items.length<5)&&!this.itemsResized)return this.container.children().each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}).each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}),this.itemsResized=!0,this.update();this.cw=o,this.pos=0,this.active=o>=this.vp,this.container.css({"-ms-transform":"","-webkit-transform":"",transform:""}),t&&this.updateFocus(this.focus)},updatePos:function(t){this.pos=t,this.container.css({"-ms-transform":"translateX("+t+"px)","-webkit-transform":"translateX("+t+"px)",transform:"translateX("+t+"px)"})},updateFocus:function(e,t){if(this.active){t=t||(e>this.focus?1:-1);var i,s,n=this.items.eq(e);if(this.options.infinite&&this.infinite(e,t),this.options.center)this.updatePos(-1*n.data("center")),this.items.filter("."+this.options.activecls).removeClass(this.options.activecls),n.addClass(this.options.activecls);else if(this.options.infinite)this.updatePos(-1*n.data("left"));else{for(i=0,s=e;s<this.items.length;s++)i+=this.items.eq(s).data("width");if(i>this.vp)this.updatePos(-1*n.data("left"));else if(1==t){for(i=0,s=this.items.length-1;0<=s;s--){if((i+=this.items.eq(s).data("width"))==this.vp){e=s;break}if(i>this.vp){e=s<this.items.length-1?s+1:s;break}}i>this.vp?this.updatePos(-1*(this.container.width()-this.vp)):this.updatePos(-1*this.items.eq(e).data("left"))}}var a=this.items.eq(e).data("left");this.items.removeClass("uk-slide-before uk-slide-after").each(function(t){t!==e&&r.$(this).addClass(r.$(this).data("left")<a?"uk-slide-before":"uk-slide-after")}),this.focus=e,this.trigger("focusitem.uk.slider",[e,this.items.eq(e),this])}},next:function(){var t=this.items[this.focus+1]?this.focus+1:this.options.infinite?0:this.focus;this.updateFocus(t,1)},previous:function(){var t=this.items[this.focus-1]?this.focus-1:this.options.infinite?this.items[this.focus-1]?this.items-1:this.items.length-1:this.focus;this.updateFocus(t,-1)},start:function(){this.stop();var t=this;this.interval=setInterval(function(){t.hovering||t.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},infinite:function(t,e){var i,s=this,n=this.items.eq(t),a=t,o=[],h=0;if(1==e){for(i=0;i<this.items.length&&(a!=t&&(h+=this.items.eq(a).data("width"),o.push(this.items.eq(a))),!(h>this.vp));i++)a=a+1==this.items.length?0:a+1;o.length&&o.forEach(function(t){var e=n.data("area");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(s.vp/2-t.data("cwidth")/2)}),n=t})}else{for(i=this.items.length-1;-1<i&&(h+=this.items.eq(a).data("width"),a!=t&&o.push(this.items.eq(a)),!(h>this.vp));i--)a=a-1==-1?this.items.length-1:a-1;o.length&&o.forEach(function(t){var e=n.data("left")-t.data("width");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(s.vp/2-t.data("cwidth")/2)}),n=t})}}}),r.$doc.on("mousemove.uk.slider touchmove.uk.slider",function(t){if(t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),u&&Math.abs(t.pageX-u.x)>u.threshold&&(window.getSelection().toString()?f=u=!1:u(t)),f){var e,i,s,n,a,o,h,r,c,d;if(t.clientX||t.clientY?e=t.clientX:(t.pageX||t.pageY)&&(e=t.pageX-document.body.scrollLeft-document.documentElement.scrollLeft),a=l.focus,i=e-f.element.data("pointer-start").x,s=f.element.data("pointer-pos-start")+i,n=e>f.element.data("pointer-start").x?-1:1,o=f.items.eq(l.focus),1==n)for(h=o.data("left")+Math.abs(i),r=0,c=l.focus;r<f.items.length;r++){if(d=f.items.eq(c),c!=l.focus&&d.data("left")<h&&d.data("area")>h){a=c;break}c=c+1==f.items.length?0:c+1}else for(h=o.data("left")-Math.abs(i),r=0,c=l.focus;r<f.items.length;r++){if(d=f.items.eq(c),c!=l.focus&&d.data("area")<=o.data("left")&&d.data("center")<h){a=c;break}c=c-1==-1?f.items.length-1:c-1}f.options.infinite&&a!=l._focus&&f.infinite(a,n),f.updatePos(s),l.dir=n,l._focus=a,l.touchx=parseInt(t.pageX,10),l.diff=h}}),r.$doc.on("mouseup.uk.slider touchend.uk.slider",function(t){if(f){f.container.removeClass("uk-drag"),f.items.eq(l.focus);var e,i,s,n=!1;if(1==l.dir){for(i=0,s=l.focus;i<f.items.length;i++){if(e=f.items.eq(s),s!=l.focus&&e.data("left")>l.diff){n=s;break}s=s+1==f.items.length?0:s+1}f.options.infinite||n||(n=f.items.length)}else{for(i=0,s=l.focus;i<f.items.length;i++){if(e=f.items.eq(s),s!=l.focus&&e.data("left")<l.diff){n=s;break}s=s-1==-1?f.items.length-1:s-1}f.options.infinite||n||(n=0)}f.updateFocus(!1!==n?n:l._focus)}f=u=!1}),r.slider});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
