!function(t){var e;window.UIkit2&&(e=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-datepicker",["uikit"],function(){return e||t(UIkit2)})}(function(h){"use strict";var i,y,r=!1;return h.component("datepicker",{defaults:{mobile:!1,weekstart:1,i18n:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekdays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},format:"YYYY-MM-DD",offsettop:5,maxDate:!1,minDate:!1,pos:"auto",template:function(t,e){var n,a="";if(a+='<div class="uk-datepicker-nav">',a+='<a href="" class="uk-datepicker-previous"></a>',a+='<a href="" class="uk-datepicker-next"></a>',h.formSelect){var s,i,r,o=(new Date).getFullYear(),u=[];for(n=0;n<e.i18n.months.length;n++)n==t.month?u.push('<option value="'+n+'" selected>'+e.i18n.months[n]+"</option>"):u.push('<option value="'+n+'">'+e.i18n.months[n]+"</option>");for(s='<span class="uk-form-select">'+e.i18n.months[t.month]+'<select class="update-picker-month">'+u.join("")+"</select></span>",u=[],i=t.minDate?t.minDate.year():o-50,r=t.maxDate?t.maxDate.year():o+20,n=i;n<=r;n++)n==t.year?u.push('<option value="'+n+'" selected>'+n+"</option>"):u.push('<option value="'+n+'">'+n+"</option>");a+='<div class="uk-datepicker-heading">'+s+" "+('<span class="uk-form-select">'+t.year+'<select class="update-picker-year">'+u.join("")+"</select></span>")+"</div>"}else a+='<div class="uk-datepicker-heading">'+e.i18n.months[t.month]+" "+t.year+"</div>";for(a+="</div>",a+='<table class="uk-datepicker-table">',a+="<thead>",n=0;n<t.weekdays.length;n++)t.weekdays[n]&&(a+="<th>"+t.weekdays[n]+"</th>");for(a+="</thead>",a+="<tbody>",n=0;n<t.days.length;n++)if(t.days[n]&&t.days[n].length){a+="<tr>";for(var c=0;c<t.days[n].length;c++)if(t.days[n][c]){var d=t.days[n][c],l=[];d.inmonth||l.push("uk-datepicker-table-muted"),d.selected&&l.push("uk-active"),d.disabled&&l.push("uk-datepicker-date-disabled uk-datepicker-table-muted"),a+='<td><a href="" class="'+l.join(" ")+'" data-date="'+d.day.format()+'">'+d.day.format("D")+"</a></td>"}a+="</tr>"}return a+="</tbody>",a+="</table>"}},boot:function(){h.$win.on("resize orientationchange",function(){r&&r.hide()}),h.$html.on("focus.datepicker.uikit","[data-uk-datepicker]",function(t){var e=h.$(this);e.data("datepicker")||(t.preventDefault(),h.datepicker(e,h.Utils.options(e.attr("data-uk-datepicker"))),e.trigger("focus"))}),h.$html.on("click focus","*",function(t){var e=h.$(t.target);!r||e[0]==i[0]||e.data("datepicker")||e.parents(".uk-datepicker:first").length||r.hide()})},init:function(){if(!h.support.touch||"date"!=this.element.attr("type")||this.options.mobile){var t=this;this.current=this.element.val()?y(this.element.val(),this.options.format):y(),this.on("click focus",function(){r!==t&&t.pick(this.value?this.value:"")}).on("change",function(){t.element.val()&&!y(t.element.val(),t.options.format).isValid()&&t.element.val(y().format(t.options.format))}),i||((i=h.$('<div class="uk-dropdown uk-datepicker"></div>')).on("click",".uk-datepicker-next, .uk-datepicker-previous, [data-date]",function(t){t.stopPropagation(),t.preventDefault();var e=h.$(this);if(e.hasClass("uk-datepicker-date-disabled"))return!1;e.is("[data-date]")?(r.current=y(e.data("date")),r.element.val(r.current.isValid()?r.current.format(r.options.format):null).trigger("change"),r.hide()):r.add(e.hasClass("uk-datepicker-next")?1:-1,"months")}),i.on("change",".update-picker-month, .update-picker-year",function(){var t=h.$(this);r[t.is(".update-picker-year")?"setYear":"setMonth"](Number(t.val()))}),i.appendTo("body"))}},pick:function(t){var e=this.element.offset(),n={left:e.left,right:""};this.current=isNaN(t)?y(t,this.options.format):y(),this.initdate=this.current.format("YYYY-MM-DD"),this.update(),"right"==h.langdirection&&(n.right=window.innerWidth-(n.left+this.element.outerWidth()),n.left="");var a=e.top-this.element.outerHeight()+this.element.height()-this.options.offsettop-i.outerHeight(),s=e.top+this.element.outerHeight()+this.options.offsettop;n.top=s,"top"==this.options.pos?n.top=a:"auto"==this.options.pos&&window.innerHeight-s-i.outerHeight()<0&&0<=a&&(n.top=a),i.css(n).show(),this.trigger("show.uk.datepicker"),r=this},add:function(t,e){this.current.add(t,e),this.update()},setMonth:function(t){this.current.month(t),this.update()},setYear:function(t){this.current.year(t),this.update()},update:function(){var t=this.getRows(this.current.year(),this.current.month()),e=this.options.template(t,this.options);i.html(e),this.trigger("update.uk.datepicker")},getRows:function(t,e){var a=this.options,n=y().format("YYYY-MM-DD"),s=[31,t%4==0&&t%100!=0||t%400==0?29:28,31,30,31,30,31,31,30,31,30,31][e],i=new Date(t,e,1,12).getDay(),r={month:e,year:t,weekdays:[],days:[],maxDate:!1,minDate:!1},o=[];!1!==a.maxDate&&(r.maxDate=isNaN(a.maxDate)?y(a.maxDate,a.format).startOf("day").hours(12):y().add(a.maxDate,"days").startOf("day").hours(12)),!1!==a.minDate&&(r.minDate=isNaN(a.minDate)?y(a.minDate,a.format).startOf("day").hours(12):y().add(a.minDate-1,"days").startOf("day").hours(12)),r.weekdays=function(){for(var t=0,e=[];t<7;t++){for(var n=t+(a.weekstart||0);7<=n;)n-=7;e.push(a.i18n.weekdays[n])}return e}(),a.weekstart&&0<a.weekstart&&(i-=a.weekstart)<0&&(i+=7);for(var u,c,d,l,h,f=s+i,m=f;7<m;)m-=7;f+=7-m;for(var _=0,p=0;_<f;_++)u=new Date(t,e,_-i+1,12),c=r.minDate&&r.minDate>u||r.maxDate&&u>r.maxDate,h=!(_<i||s+i<=_),u=y(u),d=this.initdate==u.format("YYYY-MM-DD"),l=n==u.format("YYYY-MM-DD"),o.push({selected:d,today:l,disabled:c,day:u,inmonth:h}),7==++p&&(r.days.push(o),o=[],p=0);return r},hide:function(){r&&r===this&&(i.hide(),r=!1,this.trigger("hide.uk.datepicker"))}}),y=function(c){"undefined"!=typeof global&&global;var _,t,f=Math.round,n=Object.prototype.hasOwnProperty,p=0,u=1,l=2,h=3,m=4,y=5,D=6,a={},i=[],s="undefined"!=typeof module&&module.exports,o=/^\/?Date\((\-?\d+)/i,k=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,g=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,d=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,r=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,v=/\d\d?/,M=/\d{1,3}/,w=/\d{1,4}/,Y=/[+\-]?\d{1,6}/,b=/\d+/,T=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,S=/Z|[\+\-]\d\d:?\d\d/gi,O=/T/i,W=/[\+\-]?\d+(\.\d{1,3})?/,F=/\d{1,2}/,U=/\d/,G=/\d\d/,C=/\d{3}/,z=/\d{4}/,I=/[+-]?\d{6}/,x=/[+-]?\d+/,L=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,H=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],P=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],A=/([\+\-]|\d\d)/gi,e=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),N={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},Z={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},j={},E={s:45,m:45,h:22,d:26,M:11},$="DDD w W M D d".split(" "),V="M D H h m s w W".split(" "),J={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return ut(this.year()%100,2)},YYYY:function(){return ut(this.year(),4)},YYYYY:function(){return ut(this.year(),5)},YYYYYY:function(){var t=this.year();return(0<=t?"+":"-")+ut(Math.abs(t),6)},gg:function(){return ut(this.weekYear()%100,2)},gggg:function(){return ut(this.weekYear(),4)},ggggg:function(){return ut(this.weekYear(),5)},GG:function(){return ut(this.isoWeekYear()%100,2)},GGGG:function(){return ut(this.isoWeekYear(),4)},GGGGG:function(){return ut(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return yt(this.milliseconds()/100)},SS:function(){return ut(yt(this.milliseconds()/10),2)},SSS:function(){return ut(this.milliseconds(),3)},SSSS:function(){return ut(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return t<0&&(t=-t,e="-"),e+ut(yt(t/60),2)+":"+ut(yt(t)%60,2)},ZZ:function(){var t=-this.zone(),e="+";return t<0&&(t=-t,e="-"),e+ut(yt(t/60),2)+ut(yt(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},q={},Q=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];function R(t,e,n){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:n;default:throw new Error("Implement me")}}function X(t,e){return n.call(t,e)}function B(t){!1===_.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function K(t,e){var n=!0;return it(function(){return n&&(B(t),n=!1),e.apply(this,arguments)},e)}function tt(e,n){return function(t){return ut(e.call(this,t),n)}}function et(e,n){return function(t){return this.localeData().ordinal(e.call(this,t),n)}}for(;$.length;)t=$.pop(),J[t+"o"]=et(J[t],t);for(;V.length;)t=V.pop(),J[t+t]=tt(J[t],2);function nt(){}function at(t,e){!1!==e&&Mt(t),rt(this,t),this._d=new Date(+t._d)}function st(t){var e=_t(t),n=e.year||0,a=e.quarter||0,s=e.month||0,i=e.week||0,r=e.day||0,o=e.hour||0,u=e.minute||0,c=e.second||0,d=e.millisecond||0;this._milliseconds=+d+1e3*c+6e4*u+36e5*o,this._days=+r+7*i,this._months=+s+3*a+12*n,this._data={},this._locale=_.localeData(),this._bubble()}function it(t,e){for(var n in e)X(e,n)&&(t[n]=e[n]);return X(e,"toString")&&(t.toString=e.toString),X(e,"valueOf")&&(t.valueOf=e.valueOf),t}function rt(t,e){var n,a,s;if(void 0!==e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),void 0!==e._i&&(t._i=e._i),void 0!==e._f&&(t._f=e._f),void 0!==e._l&&(t._l=e._l),void 0!==e._strict&&(t._strict=e._strict),void 0!==e._tzm&&(t._tzm=e._tzm),void 0!==e._isUTC&&(t._isUTC=e._isUTC),void 0!==e._offset&&(t._offset=e._offset),void 0!==e._pf&&(t._pf=e._pf),void 0!==e._locale&&(t._locale=e._locale),0<i.length)for(n in i)void 0!==(s=e[a=i[n]])&&(t[a]=s);return t}function ot(t){return t<0?Math.ceil(t):Math.floor(t)}function ut(t,e,n){for(var a=""+Math.abs(t),s=0<=t;a.length<e;)a="0"+a;return(s?n?"+":"":"-")+a}function ct(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function dt(i,r){return function(t,e){var n,a,s;return null===e||isNaN(+e)||(s="moment()."+(a=r)+"(period, number) is deprecated. Please use moment()."+r+"(number, period).",q[a]||(B(s),q[a]=!0),n=t,t=e,e=n),t="string"==typeof t?+t:t,lt(this,_.duration(t,e),i),this}}function lt(t,e,n,a){var s=e._milliseconds,i=e._days,r=e._months;a=null==a||a,s&&t._d.setTime(+t._d+s*n),i&&jt(t,"Date",Zt(t,"Date")+i*n),r&&Nt(t,Zt(t,"Month")+r*n),a&&_.updateOffset(t,i||r)}function ht(t){return"[object Array]"===Object.prototype.toString.call(t)}function ft(t,e,n){var a,s=Math.min(t.length,e.length),i=Math.abs(t.length-e.length),r=0;for(a=0;a<s;a++)(n&&t[a]!==e[a]||!n&&yt(t[a])!==yt(e[a]))&&r++;return r+i}function mt(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=N[t]||Z[e]||e}return t}function _t(t){var e,n,a={};for(n in t)X(t,n)&&(e=mt(n))&&(a[e]=t[n]);return a}function pt(r){var o,u;if(0===r.indexOf("week"))o=7,u="day";else{if(0!==r.indexOf("month"))return;o=12,u="month"}_[r]=function(n,t){var e,a,s=_._locale[r],i=[];if("number"==typeof n&&(t=n,n=c),a=function(t){var e=_().utc().set(u,t);return s.call(_._locale,e,n||"")},null!=t)return a(t);for(e=0;e<o;e++)i.push(a(e));return i}}function yt(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=0<=e?Math.floor(e):Math.ceil(e)),n}function Dt(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function kt(t,e,n){return Ht(_([t,11,31+e-n]),e,n).week}function gt(t){return vt(t)?366:365}function vt(t){return t%4==0&&t%100!=0||t%400==0}function Mt(t){var e;t._a&&-2===t._pf.overflow&&(e=t._a[u]<0||11<t._a[u]?u:t._a[l]<1||t._a[l]>Dt(t._a[p],t._a[u])?l:t._a[h]<0||23<t._a[h]?h:t._a[m]<0||59<t._a[m]?m:t._a[y]<0||59<t._a[y]?y:t._a[D]<0||999<t._a[D]?D:-1,t._pf._overflowDayOfYear&&(e<p||l<e)&&(e=l),t._pf.overflow=e)}function wt(t){return null==t._isValid&&(t._isValid=!isNaN(t._d.getTime())&&t._pf.overflow<0&&!t._pf.empty&&!t._pf.invalidMonth&&!t._pf.nullInput&&!t._pf.invalidFormat&&!t._pf.userInvalidated,t._strict&&(t._isValid=t._isValid&&0===t._pf.charsLeftOver&&0===t._pf.unusedTokens.length)),t._isValid}function Yt(t){return t?t.toLowerCase().replace("_","-"):t}function bt(t){var e=null;if(!a[t]&&s)try{e=_.locale(),require("./locale/"+t),_.locale(e)}catch(t){}return a[t]}function Tt(t,e){return e._isUTC?_(t).zone(e._offset||0):_(t).local()}function St(t,e){return t.isValid()?(e=Ot(e,t.localeData()),j[e]||(j[e]=function(n){var a,s,t,i=n.match(d);for(a=0,s=i.length;a<s;a++)J[i[a]]?i[a]=J[i[a]]:i[a]=(t=i[a]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(t){var e="";for(a=0;a<s;a++)e+=i[a]instanceof Function?i[a].call(t,n):i[a];return e}}(e)),j[e](t)):t.localeData().invalidDate()}function Ot(t,e){var n=5;function a(t){return e.longDateFormat(t)||t}for(r.lastIndex=0;0<=n&&r.test(t);)t=t.replace(r,a),r.lastIndex=0,n-=1;return t}function Wt(t,e){var n,a=e._strict;switch(t){case"Q":return U;case"DDDD":return C;case"YYYY":case"GGGG":case"gggg":return a?z:w;case"Y":case"G":case"g":return x;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return a?I:Y;case"S":if(a)return U;case"SS":if(a)return G;case"SSS":if(a)return C;case"DDD":return M;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return T;case"a":case"A":return e._locale._meridiemParse;case"X":return W;case"Z":case"ZZ":return S;case"T":return O;case"SSSS":return b;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return a?G:v;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return v;case"Do":return F;default:return new RegExp((n=t.replace("\\",""),n.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,a,s){return e||n||a||s}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")))}}function Ft(t){var e=(t=t||"").match(S)||[],n=((e[e.length-1]||[])+"").match(A)||["-",0,0],a=60*n[1]+yt(n[2]);return"+"===n[0]?-a:a}function Ut(t,e,n){var a,s=n._a;switch(t){case"Q":null!=e&&(s[u]=3*(yt(e)-1));break;case"M":case"MM":null!=e&&(s[u]=yt(e)-1);break;case"MMM":case"MMMM":null!=(a=n._locale.monthsParse(e))?s[u]=a:n._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(s[l]=yt(e));break;case"Do":null!=e&&(s[l]=yt(parseInt(e,10)));break;case"DDD":case"DDDD":null!=e&&(n._dayOfYear=yt(e));break;case"YY":s[p]=_.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":s[p]=yt(e);break;case"a":case"A":n._isPm=n._locale.isPM(e);break;case"H":case"HH":case"h":case"hh":s[h]=yt(e);break;case"m":case"mm":s[m]=yt(e);break;case"s":case"ss":s[y]=yt(e);break;case"S":case"SS":case"SSS":case"SSSS":s[D]=yt(1e3*("0."+e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=Ft(e);break;case"dd":case"ddd":case"dddd":null!=(a=n._locale.weekdaysParse(e))?(n._w=n._w||{},n._w.d=a):n._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(n._w=n._w||{},n._w[t]=yt(e));break;case"gg":case"GG":n._w=n._w||{},n._w[t]=_.parseTwoDigitYear(e)}}function Gt(t){var e,n,a,s,i,r,o,u,c,d,l,h,f,m;null!=(e=t._w).GG||null!=e.W||null!=e.E?(i=1,r=4,n=R(e.GG,t._a[p],Ht(_(),1,4).year),a=R(e.W,1),s=R(e.E,1)):(i=t._locale._week.dow,r=t._locale._week.doy,n=R(e.gg,t._a[p],Ht(_(),i,r).year),a=R(e.w,1),null!=e.d?(s=e.d)<i&&++a:s=null!=e.e?e.e+i:i),c=a,d=s,l=r,h=i,m=Lt(u=n,0,1).getUTCDay(),o={year:0<(f=7*(c-1)+((d=null!=d?d:h)-h)+(h-(m=0===m?7:m)+(l<m?7:0)-(m<h?7:0))+1)?u:u-1,dayOfYear:0<f?f:gt(u-1)+f},t._a[p]=o.year,t._dayOfYear=o.dayOfYear}function Ct(t){var e,n,a,s,i=[];if(!t._d){var r,o;for(r=t,o=new Date,a=r._useUTC?[o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate()]:[o.getFullYear(),o.getMonth(),o.getDate()],t._w&&null==t._a[l]&&null==t._a[u]&&Gt(t),t._dayOfYear&&(s=R(t._a[p],a[p]),t._dayOfYear>gt(s)&&(t._pf._overflowDayOfYear=!0),n=Lt(s,0,t._dayOfYear),t._a[u]=n.getUTCMonth(),t._a[l]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=i[e]=a[e];for(;e<7;e++)t._a[e]=i[e]=null==t._a[e]?2===e?1:0:t._a[e];t._d=(t._useUTC?Lt:function(t,e,n,a,s,i,r){var o=new Date(t,e,n,a,s,i,r);t<1970&&o.setFullYear(t);return o}).apply(null,i),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()+t._tzm)}}function zt(t){if(t._f!==_.ISO_8601){t._a=[],t._pf.empty=!0;var e,n,a,s,i,r=""+t._i,o=r.length,u=0;for(a=Ot(t._f,t._locale).match(d)||[],e=0;e<a.length;e++)s=a[e],(n=(r.match(Wt(s,t))||[])[0])&&(0<(i=r.substr(0,r.indexOf(n))).length&&t._pf.unusedInput.push(i),r=r.slice(r.indexOf(n)+n.length),u+=n.length),J[s]?(n?t._pf.empty=!1:t._pf.unusedTokens.push(s),Ut(s,n,t)):t._strict&&!n&&t._pf.unusedTokens.push(s);t._pf.charsLeftOver=o-u,0<r.length&&t._pf.unusedInput.push(r),t._isPm&&t._a[h]<12&&(t._a[h]+=12),!1===t._isPm&&12===t._a[h]&&(t._a[h]=0),Ct(t),Mt(t)}else It(t)}function It(t){var e,n,a=t._i,s=L.exec(a);if(s){for(t._pf.iso=!0,e=0,n=H.length;e<n;e++)if(H[e][1].exec(a)){t._f=H[e][0]+(s[6]||" ");break}for(e=0,n=P.length;e<n;e++)if(P[e][1].exec(a)){t._f+=P[e][0];break}a.match(S)&&(t._f+="Z"),zt(t)}else t._isValid=!1}function xt(t){var e,n,a,s,i,r=t._i;r===c?t._d=new Date:(i=r,"[object Date]"===Object.prototype.toString.call(i)||i instanceof Date?t._d=new Date(+r):null!==(e=o.exec(r))?t._d=new Date(+e[1]):"string"==typeof r?(It(s=t),!1===s._isValid&&(delete s._isValid,_.createFromInputFallback(s))):ht(r)?(t._a=function(t,e){var n,a=[];for(n=0;n<t.length;++n)a.push(e(t[n],n));return a}(r.slice(0),function(t){return parseInt(t,10)}),Ct(t)):"object"==typeof r?(n=t)._d||(a=_t(n._i),n._a=[a.year,a.month,a.day,a.hour,a.minute,a.second,a.millisecond],Ct(n)):"number"==typeof r?t._d=new Date(r):_.createFromInputFallback(t))}function Lt(t){var e=new Date(Date.UTC.apply(null,arguments));return t<1970&&e.setUTCFullYear(t),e}function Ht(t,e,n){var a,s=n-e,i=n-t.day();return s<i&&(i-=7),i<s-7&&(i+=7),a=_(t).add(i,"d"),{week:Math.ceil(a.dayOfYear()/7),year:a.year()}}function Pt(t){var e=t._i,n=t._f;return t._locale=t._locale||_.localeData(t._l),null===e||n===c&&""===e?_.invalid({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),_.isMoment(e)?new at(e,!0):(n?ht(n)?function(t){var e,n,a,s,i;if(0===t._f.length)return t._pf.invalidFormat=!0,t._d=new Date(NaN);for(s=0;s<t._f.length;s++)i=0,e=rt({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1},e._f=t._f[s],zt(e),wt(e)&&(i+=e._pf.charsLeftOver,i+=10*e._pf.unusedTokens.length,e._pf.score=i,(null==a||i<a)&&(a=i,n=e));it(t,n||e)}(t):zt(t):xt(t),new at(t)))}function At(t,e){var n,a;if(1===e.length&&ht(e[0])&&(e=e[0]),!e.length)return _();for(n=e[0],a=1;a<e.length;++a)e[a][t](n)&&(n=e[a]);return n}for(J.DDDD=tt(J.DDD,3),it(nt.prototype,{set:function(t){var e,n;for(n in t)"function"==typeof(e=t[n])?this[n]=e:this["_"+n]=e},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t){var e,n,a;for(this._monthsParse||(this._monthsParse=[]),e=0;e<12;e++)if(this._monthsParse[e]||(n=_.utc([2e3,e]),a="^"+this.months(n,"")+"|^"+this.monthsShort(n,""),this._monthsParse[e]=new RegExp(a.replace(".",""),"i")),this._monthsParse[e].test(t))return e},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,a;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;e<7;e++)if(this._weekdaysParse[e]||(n=_([2e3,1]).day(e),a="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(a.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return 11<t?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e){var n=this._calendar[t];return"function"==typeof n?n.apply(e):n},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,a){var s=this._relativeTime[n];return"function"==typeof s?s(t,e,n,a):s.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[0<t?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",preparse:function(t){return t},postformat:function(t){return t},week:function(t){return Ht(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),(_=function(t,e,n,a){var s;return"boolean"==typeof n&&(a=n,n=c),(s={_isAMomentObject:!0})._i=t,s._f=e,s._l=n,s._strict=a,s._isUTC=!1,s._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1},Pt(s)}).suppressDeprecationWarnings=!1,_.createFromInputFallback=K("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i)}),_.min=function(){return At("isBefore",[].slice.call(arguments,0))},_.max=function(){return At("isAfter",[].slice.call(arguments,0))},_.utc=function(t,e,n,a){var s;return"boolean"==typeof n&&(a=n,n=c),(s={_isAMomentObject:!0,_useUTC:!0,_isUTC:!0})._l=n,s._i=t,s._f=e,s._strict=a,s._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1},Pt(s).utc()},_.unix=function(t){return _(1e3*t)},_.duration=function(t,e){var n,a,s,i,r,o,u,c=t,d=null;return _.isDuration(t)?c={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(c={},e?c[e]=t:c.milliseconds=t):(d=k.exec(t))?(n="-"===d[1]?-1:1,c={y:0,d:yt(d[l])*n,h:yt(d[h])*n,m:yt(d[m])*n,s:yt(d[y])*n,ms:yt(d[D])*n}):(d=g.exec(t))?(n="-"===d[1]?-1:1,c={y:(s=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*n})(d[2]),M:s(d[3]),d:s(d[4]),h:s(d[5]),m:s(d[6]),s:s(d[7]),w:s(d[8])}):"object"==typeof c&&("from"in c||"to"in c)&&(r=_(c.from),o=Tt(o=_(c.to),r),r.isBefore(o)?u=ct(r,o):((u=ct(o,r)).milliseconds=-u.milliseconds,u.months=-u.months),(c={}).ms=(i=u).milliseconds,c.M=i.months),a=new st(c),_.isDuration(t)&&X(t,"_locale")&&(a._locale=t._locale),a},_.version="2.8.3",_.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",_.ISO_8601=function(){},_.momentProperties=i,_.updateOffset=function(){},_.relativeTimeThreshold=function(t,e){return E[t]!==c&&(e===c?E[t]:(E[t]=e,!0))},_.lang=K("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return _.locale(t,e)}),_.locale=function(t,e){var n;return t&&(n=void 0!==e?_.defineLocale(t,e):_.localeData(t))&&(_.duration._locale=_._locale=n),_._locale._abbr},_.defineLocale=function(t,e){return null!==e?(e.abbr=t,a[t]||(a[t]=new nt),a[t].set(e),_.locale(t),a[t]):(delete a[t],null)},_.langData=K("moment.langData is deprecated. Use moment.localeData instead.",function(t){return _.localeData(t)}),_.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return _._locale;if(!ht(t)){if(e=bt(t))return e;t=[t]}return function(t){for(var e,n,a,s,i=0;i<t.length;){for(e=(s=Yt(t[i]).split("-")).length,n=(n=Yt(t[i+1]))?n.split("-"):null;0<e;){if(a=bt(s.slice(0,e).join("-")))return a;if(n&&n.length>=e&&ft(s,n,!0)>=e-1)break;e--}i++}return null}(t)},_.isMoment=function(t){return t instanceof at||null!=t&&X(t,"_isAMomentObject")},_.isDuration=function(t){return t instanceof st},t=Q.length-1;0<=t;--t)pt(Q[t]);function Nt(t,e){var n;return"string"==typeof e&&"number"!=typeof(e=t.localeData().monthsParse(e))||(n=Math.min(t.date(),Dt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n)),t}function Zt(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function jt(t,e,n){return"Month"===e?Nt(t,n):t._d["set"+(t._isUTC?"UTC":"")+e](n)}function Et(e,n){return function(t){return null!=t?(jt(this,e,t),_.updateOffset(this,n),this):Zt(this,e)}}function $t(t){return 400*t/146097}function Vt(t){return 146097*t/400}function Jt(t){_.duration.fn[t]=function(){return this._data[t]}}for(t in _.normalizeUnits=function(t){return mt(t)},_.invalid=function(t){var e=_.utc(NaN);return null!=t?it(e._pf,t):e._pf.userInvalidated=!0,e},_.parseZone=function(){return _.apply(null,arguments).parseZone()},_.parseTwoDigitYear=function(t){return yt(t)+(68<yt(t)?1900:2e3)},it(_.fn=at.prototype,{clone:function(){return _(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var t=_(this).utc();return 0<t.year()&&t.year()<=9999?St(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):St(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return wt(this)},isDSTShifted:function(){return!!this._a&&(this.isValid()&&0<ft(this._a,(this._isUTC?_.utc(this._a):_(this._a)).toArray()))},parsingFlags:function(){return it({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.zone(0,t)},local:function(t){return this._isUTC&&(this.zone(0,t),this._isUTC=!1,t&&this.add(this._dateTzOffset(),"m")),this},format:function(t){var e=St(this,t||_.defaultFormat);return this.localeData().postformat(e)},add:dt(1,"add"),subtract:dt(-1,"subtract"),diff:function(t,e,n){var a,s,i,r=Tt(t,this),o=6e4*(this.zone()-r.zone());return"year"===(e=mt(e))||"month"===e?(a=432e5*(this.daysInMonth()+r.daysInMonth()),s=12*(this.year()-r.year())+(this.month()-r.month()),i=this-_(this).startOf("month")-(r-_(r).startOf("month")),s+=(i-=6e4*(this.zone()-_(this).startOf("month").zone()-(r.zone()-_(r).startOf("month").zone())))/a,"year"===e&&(s/=12)):(a=this-r,s="second"===e?a/1e3:"minute"===e?a/6e4:"hour"===e?a/36e5:"day"===e?(a-o)/864e5:"week"===e?(a-o)/6048e5:a),n?s:ot(s)},from:function(t,e){return _.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(_(),t)},calendar:function(t){var e=Tt(t||_(),this).startOf("day"),n=this.diff(e,"days",!0),a=n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse";return this.format(this.localeData().calendar(a,this))},isLeapYear:function(){return vt(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){if("string"==typeof t)if(isNaN(t)){if("number"!=typeof(t=e.weekdaysParse(t)))return null}else t=parseInt(t,10);return t}(t,this.localeData()),this.add(t-e,"d")):e},month:Et("Month",!0),startOf:function(t){switch(t=mt(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(t){return t=mt(t),this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")},isAfter:function(t,e){return"millisecond"===(e=mt(void 0!==e?e:"millisecond"))?+(t=_.isMoment(t)?t:_(t))<+this:+this.clone().startOf(e)>+_(t).startOf(e)},isBefore:function(t,e){return"millisecond"===(e=mt(void 0!==e?e:"millisecond"))?+this<+(t=_.isMoment(t)?t:_(t)):+this.clone().startOf(e)<+_(t).startOf(e)},isSame:function(t,e){return"millisecond"===(e=mt(e||"millisecond"))?+this==+(t=_.isMoment(t)?t:_(t)):+this.clone().startOf(e)==+Tt(t,this).startOf(e)},min:K("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return(t=_.apply(null,arguments))<this?this:t}),max:K("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return this<(t=_.apply(null,arguments))?this:t}),zone:function(t,e){var n,a=this._offset||0;return null==t?this._isUTC?a:this._dateTzOffset():("string"==typeof t&&(t=Ft(t)),Math.abs(t)<16&&(t*=60),!this._isUTC&&e&&(n=this._dateTzOffset()),this._offset=t,this._isUTC=!0,null!=n&&this.subtract(n,"m"),a!==t&&(!e||this._changeInProgress?lt(this,_.duration(a-t,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,_.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(t){return t=t?_(t).zone():0,(this.zone()-t)%60==0},daysInMonth:function(){return Dt(this.year(),this.month())},dayOfYear:function(t){var e=f((_(this).startOf("day")-_(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=Ht(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=Ht(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=Ht(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return kt(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return kt(this.year(),t.dow,t.doy)},get:function(t){return this[t=mt(t)]()},set:function(t,e){return"function"==typeof this[t=mt(t)]&&this[t](e),this},locale:function(t){var e;return t===c?this._locale._abbr:(null!=(e=_.localeData(t))&&(this._locale=e),this)},lang:K("moment().lang() is deprecated. Use moment().localeData() instead.",function(t){return t===c?this.localeData():this.locale(t)}),localeData:function(){return this._locale},_dateTzOffset:function(){return 15*Math.round(this._d.getTimezoneOffset()/15)}}),_.fn.millisecond=_.fn.milliseconds=Et("Milliseconds",!1),_.fn.second=_.fn.seconds=Et("Seconds",!1),_.fn.minute=_.fn.minutes=Et("Minutes",!1),_.fn.hour=_.fn.hours=Et("Hours",!0),_.fn.date=Et("Date",!0),_.fn.dates=K("dates accessor is deprecated. Use date instead.",Et("Date",!0)),_.fn.year=Et("FullYear",!0),_.fn.years=K("years accessor is deprecated. Use year instead.",Et("FullYear",!0)),_.fn.days=_.fn.day,_.fn.months=_.fn.month,_.fn.weeks=_.fn.week,_.fn.isoWeeks=_.fn.isoWeek,_.fn.quarters=_.fn.quarter,_.fn.toJSON=_.fn.toISOString,it(_.duration.fn=st.prototype,{_bubble:function(){var t,e,n,a=this._milliseconds,s=this._days,i=this._months,r=this._data,o=0;r.milliseconds=a%1e3,t=ot(a/1e3),r.seconds=t%60,e=ot(t/60),r.minutes=e%60,n=ot(e/60),r.hours=n%24,s+=ot(n/24),i+=ot((s-=ot(Vt(o=ot($t(s)))))/30),s%=30,o+=ot(i/12),i%=12,r.days=s,r.months=i,r.years=o},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return ot(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*yt(this._months/12)},humanize:function(t){var e,n,a,s,i,r,o,u,c,d,l,h=(n=!t,a=(e=this).localeData(),s=_.duration(e).abs(),i=f(s.as("s")),r=f(s.as("m")),o=f(s.as("h")),u=f(s.as("d")),c=f(s.as("M")),d=f(s.as("y")),(l=i<E.s&&["s",i]||1===r&&["m"]||r<E.m&&["mm",r]||1===o&&["h"]||o<E.h&&["hh",o]||1===u&&["d"]||u<E.d&&["dd",u]||1===c&&["M"]||c<E.M&&["MM",c]||1===d&&["y"]||["yy",d])[2]=n,l[3]=0<+e,l[4]=a,function(t,e,n,a,s){return s.relativeTime(e||1,!!n,t,a)}.apply({},l));return t&&(h=this.localeData().pastFuture(+this,h)),this.localeData().postformat(h)},add:function(t,e){var n=_.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=_.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return this[(t=mt(t)).toLowerCase()+"s"]()},as:function(t){var e,n;if("month"===(t=mt(t))||"year"===t)return e=this._days+this._milliseconds/864e5,n=this._months+12*$t(e),"month"===t?n:n/12;switch(e=this._days+Vt(this._months/12),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:_.fn.lang,locale:_.fn.locale,toIsoString:K("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),n=Math.abs(this.days()),a=Math.abs(this.hours()),s=Math.abs(this.minutes()),i=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(a||s||i?"T":"")+(a?a+"H":"")+(s?s+"M":"")+(i?i+"S":""):"P0D"},localeData:function(){return this._locale}}),_.duration.fn.toString=_.duration.fn.toISOString,e)X(e,t)&&Jt(t.toLowerCase());return _.duration.fn.asMilliseconds=function(){return this.as("ms")},_.duration.fn.asSeconds=function(){return this.as("s")},_.duration.fn.asMinutes=function(){return this.as("m")},_.duration.fn.asHours=function(){return this.as("h")},_.duration.fn.asDays=function(){return this.as("d")},_.duration.fn.asWeeks=function(){return this.as("weeks")},_.duration.fn.asMonths=function(){return this.as("M")},_.duration.fn.asYears=function(){return this.as("y")},_.locale("en",{ordinal:function(t){var e=t%10;return t+(1===yt(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),_}.call(this),h.Utils.moment=y,h.datepicker});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
