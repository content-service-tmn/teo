!function(i){var t;window.UIkit2&&(t=i(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-slideshow-fx",["uikit"],function(){return t||i(UIkit2)})}(function(I){"use strict";var M=I.slideshow.animations;I.$.extend(I.slideshow.animations,{slice:function(i,t,e,s){if(!i.data("cover"))return M.fade.apply(this,arguments);for(var n,o=I.$.Deferred(),r=Math.ceil(this.element.width()/this.options.slices),a=t.data("cover").css("background-image"),c=I.$('<li class="uk-slideshow-ghost"></li>').css({top:0,left:0,width:this.container.width(),height:this.container.height(),opacity:1,zIndex:15}),h=c.width(),d=c.height(),p=0;p<this.options.slices;p++){"slice-up-down"==s&&((p%2+2)%2==0?"0":d);var l,u=(this.options.slices,r),f="rect(0px, "+u*(p+1)+"px, "+d+"px, "+r*p+"px)";l="rect(0px, "+u*(p+1)+"px, 0px, "+r*p+"px)",("slice-up"==s||"slice-up-down"==s&&(p%2+2)%2==0)&&(l="rect("+d+"px, "+u*(p+1)+"px, "+d+"px, "+r*p+"px)"),n=I.$('<div class="uk-cover-background"></div>').css({position:"absolute",top:0,left:0,width:h,height:d,"background-image":a,clip:l,opacity:0,transition:"all "+this.options.duration+"ms ease-in-out "+60*p+"ms","-webkit-transition":"all "+this.options.duration+"ms ease-in-out "+60*p+"ms"}).data("clip",f),c.append(n)}return this.container.append(c),c.children().last().on(I.support.transition.end,function(){setTimeout(function(){c.remove(),o.resolve()},0)}),c.width(),c.children().each(function(){(n=I.$(this)).css({clip:n.data("clip"),opacity:1})}),o.promise()},"slice-up":function(i,t,e){return M.slice.apply(this,[i,t,e,"slice-up"])},"slice-down":function(i,t,e){return M.slice.apply(this,[i,t,e,"slice-down"])},"slice-up-down":function(i,t,e){return M.slice.apply(this,[i,t,e,"slice-up-down"])},fold:function(i,t,e){if(!t.data("cover"))return M.fade.apply(this,arguments);for(var s,n=I.$.Deferred(),o=Math.ceil(this.element.width()/this.options.slices),r=t.data("cover").css("background-image"),a=I.$('<li class="uk-slideshow-ghost"></li>').css({width:t.width(),height:t.height(),opacity:1,zIndex:15}),c=t.width(),h=t.height(),d=0;d<this.options.slices;d++)s=I.$('<div class="uk-cover-background"></div>').css({position:"absolute",top:0,left:0,width:c,height:h,"background-image":r,"transform-origin":o*d+"px 0 0",clip:"rect(0px, "+o*(d+1)+"px, "+h+"px, "+o*d+"px)",opacity:0,transform:"scaleX(0.000001)",transition:"all "+this.options.duration+"ms ease-in-out "+(100+60*d)+"ms","-webkit-transition":"all "+this.options.duration+"ms ease-in-out "+(100+60*d)+"ms"}),a.prepend(s);return this.container.append(a),a.width(),a.children().first().on(I.support.transition.end,function(){setTimeout(function(){a.remove(),n.resolve()},0)}).end().css({transform:"scaleX(1)",opacity:1}),n.promise()},puzzle:function(i,t,e){if(!t.data("cover"))return M.fade.apply(this,arguments);for(var s,n,o=I.$.Deferred(),r=this,a=Math.round(this.options.slices/2),c=Math.round(t.width()/a),h=Math.round(t.height()/c),d=Math.round(t.height()/h)+1,p=t.data("cover").css("background-image"),l=I.$('<li class="uk-slideshow-ghost"></li>').css({width:this.container.width(),height:this.container.height(),opacity:1,zIndex:15}),u=this.container.width(),f=this.container.height(),m=0;m<h;m++)for(var x=0;x<a;x++)n=[d*m+"px",(x==a-1?c+2:c)*(x+1)+"px",d*(m+1)+"px",c*x+"px"],s=I.$('<div class="uk-cover-background"></div>').css({position:"absolute",top:0,left:0,opacity:0,width:u,height:f,"background-image":p,clip:"rect("+n.join(",")+")","-webkit-transform":"translateZ(0)",transform:"translateZ(0)"}),l.append(s);this.container.append(l);var w=v(l.children());return w.each(function(i){I.$(this).css({transition:"all "+r.options.duration+"ms ease-in-out "+(50+25*i)+"ms","-webkit-transition":"all "+r.options.duration+"ms ease-in-out "+(50+25*i)+"ms"})}).last().on(I.support.transition.end,function(){setTimeout(function(){l.remove(),o.resolve()},0)}),l.width(),w.css({opacity:1}),o.promise()},boxes:function(i,t,e,s){if(!t.data("cover"))return M.fade.apply(this,arguments);for(var n,o,r,a=I.$.Deferred(),c=Math.round(this.options.slices/2),h=Math.round(t.width()/c),d=Math.round(t.height()/h),p=Math.round(t.height()/d)+1,l=t.data("cover").css("background-image"),u=I.$('<li class="uk-slideshow-ghost"></li>').css({width:t.width(),height:t.height(),opacity:1,zIndex:15}),f=t.width(),m=t.height(),x=0;x<d;x++)for(r=0;r<c;r++)o=[p*x+"px",(r==c-1?h+2:h)*(r+1)+"px",p*(x+1)+"px",h*r+"px"],n=I.$('<div class="uk-cover-background"></div>').css({position:"absolute",top:0,left:0,opacity:1,width:f,height:m,"background-image":l,"transform-origin":o[3]+" "+o[0]+" 0",clip:"rect("+o.join(",")+")","-webkit-transform":"scale(0.0000000000000001)",transform:"scale(0.0000000000000001)"}),u.append(n);this.container.append(u);var w,v=0,g=0,k=0,b=[[]],y=u.children();for("boxes-reverse"==s&&(y=[].reverse.apply(y)),y.each(function(){b[v][g]=I.$(this),++g==c&&(g=0,b[++v]=[])}),w=r=0;r<c*d;r++){w=r;for(var $=0;$<d;$++)0<=w&&w<c&&b[$][w].css({transition:"all "+this.options.duration+"ms linear "+(50+k)+"ms","-webkit-transition":"all "+this.options.duration+"ms linear "+(50+k)+"ms"}),w--;k+=100}return y.last().on(I.support.transition.end,function(){setTimeout(function(){u.remove(),a.resolve()},0)}),u.width(),y.css({"-webkit-transform":"scale(1)",transform:"scale(1)"}),a.promise()},"boxes-reverse":function(i,t,e){return M.boxes.apply(this,[i,t,e,"boxes-reverse"])},"random-fx":function(){var i=["slice-up","fold","puzzle","slice-down","boxes","slice-up-down","boxes-reverse"];return this.fxIndex=(void 0===this.fxIndex?-1:this.fxIndex)+1,i[this.fxIndex]||(this.fxIndex=0),M[i[this.fxIndex]].apply(this,arguments)}});var v=function(i){for(var t,e,s=i.length;s;t=parseInt(Math.random()*s),e=i[--s],i[s]=i[t],i[t]=e);return i};return I.slideshow.animations});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
