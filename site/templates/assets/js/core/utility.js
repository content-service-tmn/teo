!function(a){"use strict";var i,e,n,s=[];a.component("stackMargin",{defaults:{cls:"uk-margin-small-top",rowfirst:!1,observe:!1},boot:function(){a.ready(function(t){a.$("[data-uk-margin]",t).each(function(){var t=a.$(this);t.data("stackMargin")||a.stackMargin(t,a.Utils.options(t.attr("data-uk-margin")))})})},init:function(){var t,i=this;a.$win.on("resize orientationchange",(t=function(){i.process()},a.$(function(){t(),a.$win.on("load",t)}),a.Utils.debounce(t,20))),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.process()}.bind(this)),this.options.observe&&a.domObserve(this.element,function(t){i.element.is(":visible")&&i.process()}),s.push(this)},process:function(){var t=this.element.children();if(a.Utils.stackMargin(t,this.options),!this.options.rowfirst||!t.length)return this;var e={},n=!1;return t.removeClass(this.options.rowfirst).each(function(t,i){i=a.$(this),"none"!=this.style.display&&(t=i.offset().left,((e[t]=e[t]||[])&&e[t]).push(this),n=!1===n?t:Math.min(n,t))}),a.$(e[n]).addClass(this.options.rowfirst),this}}),i=[],e=function(t){if(t.is(":visible")){var i=t.parent().width(),e=t.data("width"),n=i/e,s=Math.floor(n*t.data("height"));t.css({height:i<e?s:t.data("height")})}},a.component("responsiveElement",{defaults:{},boot:function(){a.ready(function(t){a.$("iframe.uk-responsive-width, [data-uk-responsive]",t).each(function(){var t=a.$(this);t.data("responsiveElement")||a.responsiveElement(t,{})})})},init:function(){var t=this.element;t.attr("width")&&t.attr("height")&&(t.data({width:t.attr("width"),height:t.attr("height")}).on("display.uk.check",function(){e(t)}),e(t),i.push(t))}}),a.$win.on("resize load",a.Utils.debounce(function(){i.forEach(function(t){e(t)})},15)),a.Utils.stackMargin=function(t,i){i=a.$.extend({cls:"uk-margin-small-top"},i),t=a.$(t).removeClass(i.cls);var s=!1;t.each(function(t,i,e,n){"none"!=(n=a.$(this)).css("display")&&(t=n.offset(),i=n.outerHeight(),e=t.top+i,n.data({ukMarginPos:e,ukMarginTop:t.top}),(!1===s||t.top<s.top)&&(s={top:t.top,left:t.left,pos:e}))}).each(function(t){"none"!=(t=a.$(this)).css("display")&&t.data("ukMarginTop")>s.top&&t.data("ukMarginPos")>s.pos&&t.addClass(i.cls)})},a.Utils.matchHeights=function(t,i){t=a.$(t).css("min-height",""),i=a.$.extend({row:!0},i);var s=function(t){if(!(t.length<2)){var e=0;t.each(function(){e=Math.max(e,a.$(this).outerHeight())}).each(function(){var t=a.$(this),i=e-("border-box"==t.css("box-sizing")?0:t.outerHeight()-t.height());t.css("min-height",i+"px")})}};i.row?(t.first().width(),setTimeout(function(){var e=!1,n=[];t.each(function(){var t=a.$(this),i=t.offset().top;i!=e&&n.length&&(s(a.$(n)),n=[],i=t.offset().top),n.push(t),e=i}),n.length&&s(a.$(n))},0)):s(t)},n={},a.Utils.inlineSvg=function(t,i){a.$(t||'img[src$=".svg"]',i||document).each(function(){var e=a.$(this),t=e.attr("src");if(!n[t]){var i=a.$.Deferred();a.$.get(t,{nc:Math.random()},function(t){i.resolve(a.$(t).find("svg"))}),n[t]=i.promise()}n[t].then(function(t){var i=a.$(t).clone();e.attr("id")&&i.attr("id",e.attr("id")),e.attr("class")&&i.attr("class",e.attr("class")),e.attr("style")&&i.attr("style",e.attr("style")),e.attr("width")&&(i.attr("width",e.attr("width")),e.attr("height")||i.removeAttr("height")),e.attr("height")&&(i.attr("height",e.attr("height")),e.attr("width")||i.removeAttr("width")),e.replaceWith(i)})})},a.ready(function(t){a.Utils.inlineSvg("[data-uk-svg]",t)}),a.Utils.getCssVar=function(t){var i,e=document.documentElement,n=e.appendChild(document.createElement("div"));n.classList.add("var-"+t);try{i=JSON.parse(i=getComputedStyle(n,":before").content.replace(/^["'](.*)["']$/,"$1"))}catch(t){i=void 0}return e.removeChild(n),i}}(UIkit2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
