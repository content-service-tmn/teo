!function(s){"use strict";var o=[];s.component("toggle",{defaults:{target:!1,cls:"uk-hidden",animation:!1,duration:200},boot:function(){s.ready(function(t){s.$("[data-uk-toggle]",t).each(function(){var t=s.$(this);if(!t.data("toggle"))s.toggle(t,s.Utils.options(t.attr("data-uk-toggle")))}),setTimeout(function(){o.forEach(function(t){t.getToggles()})},0)})},init:function(){var i=this;this.aria=-1!==this.options.cls.indexOf("uk-hidden"),this.on("click",function(t){i.element.is('a[href="#"]')&&t.preventDefault(),i.toggle()}),o.push(this)},toggle:function(){if(this.getToggles(),this.totoggle.length){if(this.options.animation&&s.support.animation){var i=this,o=this.options.animation.split(",");1==o.length&&(o[1]=o[0]),o[0]=o[0].trim(),o[1]=o[1].trim(),this.totoggle.css("animation-duration",this.options.duration+"ms"),this.totoggle.each(function(){var t=s.$(this);t.hasClass(i.options.cls)?(t.toggleClass(i.options.cls),s.Utils.animate(t,o[0]).then(function(){t.css("animation-duration",""),s.Utils.checkDisplay(t)})):s.Utils.animate(this,o[1]+" uk-animation-reverse").then(function(){t.toggleClass(i.options.cls).css("animation-duration",""),s.Utils.checkDisplay(t)})})}else this.totoggle.toggleClass(this.options.cls),s.Utils.checkDisplay(this.totoggle);this.updateAria()}},getToggles:function(){this.totoggle=this.options.target?s.$(this.options.target):[],this.updateAria()},updateAria:function(){this.aria&&this.totoggle.length&&this.totoggle.not("[aria-hidden]").each(function(){s.$(this).attr("aria-hidden",s.$(this).hasClass("uk-hidden"))})}})}(UIkit2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvdG9nZ2xlLmpzIl0sIm5hbWVzIjpbIlVJIiwidG9nZ2xlcyIsImNvbXBvbmVudCIsImRlZmF1bHRzIiwidGFyZ2V0IiwiY2xzIiwiYW5pbWF0aW9uIiwiZHVyYXRpb24iLCJib290IiwicmVhZHkiLCJjb250ZXh0IiwiJCIsImVhY2giLCJlbGUiLCJ0aGlzIiwiZGF0YSIsInRvZ2dsZSIsIlV0aWxzIiwib3B0aW9ucyIsImF0dHIiLCJzZXRUaW1lb3V0IiwiZm9yRWFjaCIsImdldFRvZ2dsZXMiLCJpbml0IiwiJHRoaXMiLCJhcmlhIiwiaW5kZXhPZiIsIm9uIiwiZSIsImVsZW1lbnQiLCJpcyIsInByZXZlbnREZWZhdWx0IiwicHVzaCIsInRvdG9nZ2xlIiwibGVuZ3RoIiwic3VwcG9ydCIsImFuaW1hdGlvbnMiLCJzcGxpdCIsInRyaW0iLCJjc3MiLCJoYXNDbGFzcyIsInRvZ2dsZUNsYXNzIiwiYW5pbWF0ZSIsInRoZW4iLCJjaGVja0Rpc3BsYXkiLCJ1cGRhdGVBcmlhIiwibm90IiwiVUlraXQyIl0sIm1hcHBpbmdzIjoiQ0FDQSxTQUFVQSxHQUVOLGFBRUEsSUFBSUMsRUFBVSxHQUVkRCxFQUFHRSxVQUFVLFNBQVUsQ0FFbkJDLFNBQVUsQ0FDTkMsUUFBWSxFQUNaQyxJQUFZLFlBQ1pDLFdBQVksRUFDWkMsU0FBWSxLQUdoQkMsS0FBTSxXQUdGUixFQUFHUyxNQUFNLFNBQVNDLEdBRWRWLEVBQUdXLEVBQUUsbUJBQW9CRCxHQUFTRSxLQUFLLFdBQ25DLElBQUlDLEVBQU1iLEVBQUdXLEVBQUVHLE1BRWYsSUFBS0QsRUFBSUUsS0FBSyxVQUNBZixFQUFHZ0IsT0FBT0gsRUFBS2IsRUFBR2lCLE1BQU1DLFFBQVFMLEVBQUlNLEtBQUssc0JBSTNEQyxXQUFXLFdBRVBuQixFQUFRb0IsUUFBUSxTQUFTTCxHQUNyQkEsRUFBT00sZ0JBR1osTUFJWEMsS0FBTSxXQUVGLElBQUlDLEVBQVFWLEtBRVpBLEtBQUtXLE1BQW1ELElBQTNDWCxLQUFLSSxRQUFRYixJQUFJcUIsUUFBUSxhQUV0Q1osS0FBS2EsR0FBRyxRQUFTLFNBQVNDLEdBRWxCSixFQUFNSyxRQUFRQyxHQUFHLGdCQUNqQkYsRUFBRUcsaUJBR05QLEVBQU1SLFdBR1ZmLEVBQVErQixLQUFLbEIsT0FHakJFLE9BQVEsV0FJSixHQUZBRixLQUFLUSxhQUVEUixLQUFLbUIsU0FBU0MsT0FBbEIsQ0FFQSxHQUFJcEIsS0FBS0ksUUFBUVosV0FBYU4sRUFBR21DLFFBQVE3QixVQUFXLENBRWhELElBQUlrQixFQUFRVixLQUFNc0IsRUFBYXRCLEtBQUtJLFFBQVFaLFVBQVUrQixNQUFNLEtBRW5DLEdBQXJCRCxFQUFXRixTQUNYRSxFQUFXLEdBQUtBLEVBQVcsSUFHL0JBLEVBQVcsR0FBS0EsRUFBVyxHQUFHRSxPQUM5QkYsRUFBVyxHQUFLQSxFQUFXLEdBQUdFLE9BRTlCeEIsS0FBS21CLFNBQVNNLElBQUkscUJBQXNCekIsS0FBS0ksUUFBUVgsU0FBUyxNQUU5RE8sS0FBS21CLFNBQVNyQixLQUFLLFdBRWYsSUFBSUMsRUFBTWIsRUFBR1csRUFBRUcsTUFFWEQsRUFBSTJCLFNBQVNoQixFQUFNTixRQUFRYixNQUUzQlEsRUFBSTRCLFlBQVlqQixFQUFNTixRQUFRYixLQUU5QkwsRUFBR2lCLE1BQU15QixRQUFRN0IsRUFBS3VCLEVBQVcsSUFBSU8sS0FBSyxXQUN0QzlCLEVBQUkwQixJQUFJLHFCQUFzQixJQUM5QnZDLEVBQUdpQixNQUFNMkIsYUFBYS9CLE1BSzFCYixFQUFHaUIsTUFBTXlCLFFBQVE1QixLQUFNc0IsRUFBVyxHQUFHLHlCQUF5Qk8sS0FBSyxXQUMvRDlCLEVBQUk0QixZQUFZakIsRUFBTU4sUUFBUWIsS0FBS2tDLElBQUkscUJBQXNCLElBQzdEdkMsRUFBR2lCLE1BQU0yQixhQUFhL0IsWUFRbENDLEtBQUttQixTQUFTUSxZQUFZM0IsS0FBS0ksUUFBUWIsS0FDdkNMLEVBQUdpQixNQUFNMkIsYUFBYTlCLEtBQUttQixVQUcvQm5CLEtBQUsrQixlQUlUdkIsV0FBWSxXQUNSUixLQUFLbUIsU0FBV25CLEtBQUtJLFFBQVFkLE9BQVNKLEVBQUdXLEVBQUVHLEtBQUtJLFFBQVFkLFFBQVEsR0FDaEVVLEtBQUsrQixjQUdUQSxXQUFZLFdBQ0ovQixLQUFLVyxNQUFRWCxLQUFLbUIsU0FBU0MsUUFDM0JwQixLQUFLbUIsU0FBU2EsSUFBSSxpQkFBaUJsQyxLQUFLLFdBQ3BDWixFQUFHVyxFQUFFRyxNQUFNSyxLQUFLLGNBQWVuQixFQUFHVyxFQUFFRyxNQUFNMEIsU0FBUyxtQkFwSHZFLENBMEhHTyIsImZpbGUiOiJjb3JlL3RvZ2dsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBVSWtpdCAyLjI3LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKFVJKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgdG9nZ2xlcyA9IFtdO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgndG9nZ2xlJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICB0YXJnZXQgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xzICAgICAgIDogJ3VrLWhpZGRlbicsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLFxyXG4gICAgICAgICAgICBkdXJhdGlvbiAgOiAyMDBcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb2RlXHJcbiAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKCdbZGF0YS11ay10b2dnbGVdJywgY29udGV4dCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGUuZGF0YSgndG9nZ2xlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IFVJLnRvZ2dsZShlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoJ2RhdGEtdWstdG9nZ2xlJykpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbih0b2dnbGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuZ2V0VG9nZ2xlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFyaWEgPSAodGhpcy5vcHRpb25zLmNscy5pbmRleE9mKCd1ay1oaWRkZW4nKSAhPT0gLTEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmVsZW1lbnQuaXMoJ2FbaHJlZj1cIiNcIl0nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkdGhpcy50b2dnbGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0b2dnbGVzLnB1c2godGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0VG9nZ2xlcygpO1xyXG5cclxuICAgICAgICAgICAgaWYoIXRoaXMudG90b2dnbGUubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiAmJiBVSS5zdXBwb3J0LmFuaW1hdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXMsIGFuaW1hdGlvbnMgPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zWzFdID0gYW5pbWF0aW9uc1swXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zWzBdID0gYW5pbWF0aW9uc1swXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zWzFdID0gYW5pbWF0aW9uc1sxXS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RvZ2dsZS5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdG9nZ2xlLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGUuaGFzQ2xhc3MoJHRoaXMub3B0aW9ucy5jbHMpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUudG9nZ2xlQ2xhc3MoJHRoaXMub3B0aW9ucy5jbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuYW5pbWF0ZShlbGUsIGFuaW1hdGlvbnNbMF0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLlV0aWxzLmNoZWNrRGlzcGxheShlbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLlV0aWxzLmFuaW1hdGUodGhpcywgYW5pbWF0aW9uc1sxXSsnIHVrLWFuaW1hdGlvbi1yZXZlcnNlJykudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnRvZ2dsZUNsYXNzKCR0aGlzLm9wdGlvbnMuY2xzKS5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLlV0aWxzLmNoZWNrRGlzcGxheShlbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG90b2dnbGUudG9nZ2xlQ2xhc3ModGhpcy5vcHRpb25zLmNscyk7XHJcbiAgICAgICAgICAgICAgICBVSS5VdGlscy5jaGVja0Rpc3BsYXkodGhpcy50b3RvZ2dsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXJpYSgpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRUb2dnbGVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy50b3RvZ2dsZSA9IHRoaXMub3B0aW9ucy50YXJnZXQgPyBVSS4kKHRoaXMub3B0aW9ucy50YXJnZXQpOltdO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGVBcmlhOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXJpYSAmJiB0aGlzLnRvdG9nZ2xlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RvZ2dsZS5ub3QoJ1thcmlhLWhpZGRlbl0nKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuJCh0aGlzKS5hdHRyKCdhcmlhLWhpZGRlbicsIFVJLiQodGhpcykuaGFzQ2xhc3MoJ3VrLWhpZGRlbicpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdDIpOyJdfQ==
