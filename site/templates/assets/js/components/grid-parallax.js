!function(t){var n;window.UIkit2&&(n=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-grid-parallax",["uikit"],function(){return n||t(UIkit2)})}(function(l){var i=[],t=function(){requestAnimationFrame(function(){for(var t=0;t<i.length;t++)i[t].process()})};function s(t){for(var n=t.children(),i=n.filter(":visible:first"),e=i[0].offsetTop+i.outerHeight(),o=0;o<n.length&&!(n[o].offsetTop>=e);o++);return o||1}l.component("gridparallax",{defaults:{target:!1,smooth:150,translate:150},boot:function(){l.$doc.on("scrolling.uk.document",t),l.$win.on("load resize orientationchange",l.Utils.debounce(function(){t()},50)),l.ready(function(t){l.$("[data-uk-grid-parallax]",t).each(function(){var t=l.$(this);t.data("gridparallax")||l.gridparallax(t,l.Utils.options(t.attr("data-uk-grid-parallax")))})})},init:function(){var t,n=this;this.initItems().process(),i.push(this),l.$win.on("load resize orientationchange",(t=function(){var t=s(n.element);n.element.css("margin-bottom",""),1<t&&n.element.css("margin-bottom",n.options.translate+parseInt(n.element.css("margin-bottom")))},l.$(function(){t()}),l.Utils.debounce(t,50)))},initItems:function(){var t=this.options.smooth;return this.items=(this.options.target?this.element.find(this.options.target):this.element.children()).each(function(){l.$(this).css({transition:"transform "+t+"ms linear",transform:""})}),this},process:function(){var t=function(t){var n,i,e,o=t.offset().top,r=t.outerHeight(),s=l.$win.scrollTop(),a=window.innerHeight;s+a<o?e=0:o+r<s?e=1:(o+r<a?e=(s<a?s:s-a)/(o+r):(n=s+a-o,i=Math.round(n/((a+r)/100)),e=i/100),o<a&&(e=e*s/(o+r-a)));return 1<e?1:e}(this.element),e=s(this.element),n=this.items,o=[e-1];if(1!=e&&t){for(;o.length<e&&o[o.length-1]-2;)o.push(o[o.length-1]-2);var r=t*this.options.translate;n.each(function(t,n,i){i=-1!=o.indexOf((t+1)%e)?r:r/8,l.$(this).css("transform","translate3d(0,"+i+"px, 0)")})}else n.css("transform","")}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
