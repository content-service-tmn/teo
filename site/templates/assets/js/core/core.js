!function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var c=window.UIkit2||t(window,window.jQuery,window.document);return c.load=function(t,n,e,o){var i,r=t.split(","),s=[],a=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!a)throw new Error("Please define base path to UIkit in the requirejs config.");for(i=0;i<r.length;i+=1){var u=r[i].replace(/\./g,"/");s.push(a+"/components/"+u)}n(s,function(){e(c)})},c}),!window.jQuery)throw new Error("UIkit 2.x requires jQuery");window&&window.jQuery&&!window.UIkit2&&t(window,window.jQuery,window.document)}(function(t,u,o){"use strict";var n,e,i,c={},r=t.UIkit||void 0;if(c.version="2.27.2",c.noConflict=function(){return r&&(t.UIkit=r,u.UIkit=r,u.fn.uk=r.fn),c},t.UIkit2=c,r||(t.UIkit=c),c.$=u,c.$doc=c.$(document),c.$win=c.$(window),c.$html=c.$("html"),c.support={},c.support.transition=(n=function(){var t,n=o.body||o.documentElement,e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in e)if(void 0!==n.style[t])return e[t]}())&&{end:n},c.support.animation=(e=function(){var t,n=o.body||o.documentElement,e={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in e)if(void 0!==n.style[t])return e[t]}())&&{end:e},function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n){var e=t[n];window.requestAnimationFrame=window[e+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e+"CancelAnimationFrame"]||window[e+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var o=0;window.requestAnimationFrame=function(t){var n=Date.now(),e=Math.max(o+16,n);return setTimeout(function(){t(o=e)},e-n)},window.cancelAnimationFrame=clearTimeout}}(),c.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&0<t.navigator.msMaxTouchPoints||t.navigator.pointerEnabled&&0<t.navigator.maxTouchPoints||!1,c.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,c.Utils={},c.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},c.Utils.str2json=function(t,n){try{return n?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,n){return'"'+n+'":'}).replace(/'([^']+)'/g,function(t,n){return'"'+n+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(t){return!1}},c.Utils.debounce=function(o,i,r){var s;return function(){var t=this,n=arguments,e=r&&!s;clearTimeout(s),s=setTimeout(function(){s=null,r||o.apply(t,n)},i),e&&o.apply(t,n)}},c.Utils.throttle=function(t,n){var e=!1;return function(){e||(t.call(),e=!0,setTimeout(function(){e=!1},n))}},c.Utils.removeCssRules=function(t){var n,e,o,i,r,s,a,u,c,d;t&&setTimeout(function(){try{for(d=document.styleSheets,i=0,a=d.length;i<a;i++){for(o=d[i],e=[],o.cssRules=o.cssRules,n=r=0,u=o.cssRules.length;r<u;n=++r)o.cssRules[n].type===CSSRule.STYLE_RULE&&t.test(o.cssRules[n].selectorText)&&e.unshift(n);for(s=0,c=e.length;s<c;s++)o.deleteRule(e[s])}}catch(t){}},0)},c.Utils.isInView=function(t,n){var e=u(t);if(!e.is(":visible"))return!1;var o=c.$win.scrollLeft(),i=c.$win.scrollTop(),r=e.offset(),s=r.left,a=r.top;return n=u.extend({topoffset:0,leftoffset:0},n),a+e.height()>=i&&a-n.topoffset<=i+c.$win.height()&&s+e.width()>=o&&s-n.leftoffset<=o+c.$win.width()},c.Utils.checkDisplay=function(t,n){var e=c.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!e.length&&(e=u(t)),e.trigger("display.uk.check"),n&&("string"!=typeof n&&(n='[class*="uk-animation-"]'),e.find(n).each(function(){var t=c.$(this),n=t.attr("class").match(/uk-animation-(.+)/);t.removeClass(n[0]).width(),t.addClass(n[0])})),e},c.Utils.options=function(t){if("string"!=u.type(t))return t;-1!=t.indexOf(":")&&"}"!=t.trim().substr(-1)&&(t="{"+t+"}");var n=t?t.indexOf("{"):-1,e={};if(-1!=n)try{e=c.Utils.str2json(t.substr(n))}catch(t){}return e},c.Utils.animate=function(t,n){var e=u.Deferred();return(t=c.$(t)).css("display","none").addClass(n).one(c.support.animation.end,function(){t.removeClass(n),e.resolve()}),t.css("display",""),e.promise()},c.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},c.Utils.template=function(t,n){for(var e,o,i,r,s=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),a=0,u=[],c=0;a<s.length;){if((e=s[a]).match(/\{\{\s*(.+?)\s*\}\}/))switch(o=(e=s[a+=1])[0],i=e.substring(e.match(/^(\^|\#|\!|\~|\:)/)?1:0),o){case"~":u.push("for(var $i=0;$i<"+i+".length;$i++) { var $item = "+i+"[$i];"),c++;break;case":":u.push("for(var $key in "+i+") { var $val = "+i+"[$key];"),c++;break;case"#":u.push("if("+i+") {"),c++;break;case"^":u.push("if(!"+i+") {"),c++;break;case"/":u.push("}"),c--;break;case"!":u.push("__ret.push("+i+");");break;default:u.push("__ret.push(escape("+i+"));")}else u.push("__ret.push('"+e.replace(/\'/g,"\\'")+"');");a+=1}return r=new Function("$data",["var __ret = [];","try {","with($data){",c?'__ret = ["Not all blocks are closed correctly."]':u.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),n?r(n):r},c.Utils.focus=function(t,n){if(!(t=u(t)).length)return t;var e,o=t.find("[autofocus]:first");return o.length?o.focus():(o=t.find(":input"+(n&&","+n||"")).first()).length?o.focus():(t.attr("tabindex")||(e=1e3,t.attr("tabindex",e)),t[0].focus(),e&&t.attr("tabindex",""),t)},c.Utils.events={},c.Utils.events.click=c.support.touch?"tap":"click",c.fn=function(t,e){var o=arguments,n=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),i=n[1],r=n[2];return c[i]?this.each(function(){var t=u(this),n=t.data(i);n||t.data(i,n=c[i](this,r?void 0:e)),r&&n[r].apply(n,Array.prototype.slice.call(o,1))}):(u.error("UIkit component ["+i+"] does not exist."),this)},u.UIkit=c,u.fn.uk=c.fn,c.langdirection="rtl"==c.$html.attr("dir")?"right":"left",c.components={},c.component=function(o,t,n){if(c.components[o]&&!n)return c.components[o];var i=function(t,n){var e=this;return this.UIkit=c,this.element=t?c.$(t):null,this.options=u.extend(!0,{},this.defaults,n),this.plugins={},this.element&&this.element.data(o,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(i.plugins)).forEach(function(t){i.plugins[t].init&&(i.plugins[t].init(e),e.plugins[t]=!0)}),this.trigger("init.uk.component",[o,this]),this};return i.plugins={},u.extend(!0,i.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,n,e){return c.$(this.element||this).on(t,n,e)},one:function(t,n,e){return c.$(this.element||this).one(t,n,e)},off:function(t){return c.$(this.element||this).off(t)},trigger:function(t,n){return c.$(this.element||this).trigger(t,n)},find:function(t){return c.$(this.element?this.element:[]).find(t)},proxy:function(n,t){var e=this;t.split(" ").forEach(function(t){e[t]||(e[t]=function(){return n[t].apply(n,arguments)})})},mixin:function(n,t){var e=this;t.split(" ").forEach(function(t){e[t]||(e[t]=n[t].bind(e))})},option:function(){if(1==arguments.length)return this.options[arguments[0]]||void 0;2==arguments.length&&(this.options[arguments[0]]=arguments[1])}},t),this.components[o]=i,this[o]=function(){var t,n;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?t=u(arguments[0]):n=arguments[0];break;case 2:t=u(arguments[0]),n=arguments[1]}return t&&t.data(o)?t.data(o):new c.components[o](t,n)},c.domready&&c.component.boot(o),i},c.plugin=function(t,n,e){this.components[t].plugins[n]=e},c.component.boot=function(t){c.components[t].prototype&&c.components[t].prototype.boot&&!c.components[t].booted&&(c.components[t].prototype.boot.apply(c,[]),c.components[t].booted=!0)},c.component.bootComponents=function(){for(var t in c.components)c.component.boot(t)},c.domObservers=[],c.domready=!1,c.ready=function(t){c.domObservers.push(t),c.domready&&t(document)},c.on=function(t,n,e){return t&&-1<t.indexOf("ready.uk.dom")&&c.domready&&n.apply(c.$doc),c.$doc.on(t,n,e)},c.one=function(t,n,e){return t&&-1<t.indexOf("ready.uk.dom")&&c.domready?(n.apply(c.$doc),c.$doc):c.$doc.one(t,n,e)},c.trigger=function(t,n){return c.$doc.trigger(t,n)},c.domObserve=function(t,o){c.support.mutationobserver&&(o=o||function(){},c.$(t).each(function(){var n=this,e=c.$(n);if(!e.data("observer"))try{var t=new c.support.mutationobserver(c.Utils.debounce(function(t){o.apply(n,[e]),e.trigger("changed.uk.dom")},50),{childList:!0,subtree:!0});t.observe(n,{childList:!0,subtree:!0}),e.data("observer",t)}catch(t){}}))},c.init=function(n){n=n||document,c.domObservers.forEach(function(t){t(n)})},c.on("domready.uk.dom",function(){c.init(),c.domready&&c.Utils.checkDisplay()}),document.addEventListener("DOMContentLoaded",(i=function(){c.$body=c.$("body"),c.trigger("beforeready.uk.dom"),c.component.bootComponents();var e,o,t,i=requestAnimationFrame((e={dir:{x:0,y:0},x:window.pageXOffset,y:window.pageYOffset},o=function(){var t=window.pageXOffset,n=window.pageYOffset;e.x==t&&e.y==n||(t!=e.x?e.dir.x=t>e.x?1:-1:e.dir.x=0,n!=e.y?e.dir.y=n>e.y?1:-1:e.dir.y=0,e.x=t,e.y=n,c.$doc.trigger("scrolling.uk.document",[{dir:{x:e.dir.x,y:e.dir.y},x:t,y:n}])),cancelAnimationFrame(i),i=requestAnimationFrame(o)},c.support.touch&&c.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",o),(e.x||e.y)&&o(),o));if(c.trigger("domready.uk.dom"),c.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&c.$win.on("load orientationchange resize",c.Utils.debounce((t=function(){return u(".uk-height-viewport").css("height",window.innerHeight),t})(),100)),c.trigger("afterready.uk.dom"),c.domready=!0,c.support.mutationobserver){var n=c.Utils.debounce(function(){requestAnimationFrame(function(){c.init(document.body)})},10);new c.support.mutationobserver(function(t){var o=!1;t.every(function(t){if("childList"!=t.type)return!0;for(var n,e=0;e<t.addedNodes.length;++e)if((n=t.addedNodes[e]).outerHTML&&-1!==n.outerHTML.indexOf("data-uk-"))return(o=!0)&&!1;return!0}),o&&n()}).observe(document.body,{childList:!0,subtree:!0})}},"complete"!=document.readyState&&"interactive"!=document.readyState||setTimeout(i),i)),c.$html.addClass(c.support.touch?"uk-touch":"uk-notouch"),c.support.touch){var s,a=!1,d="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";c.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){a&&u("."+d).removeClass(d),a=u(this).addClass(d)}).on("mouseleave touchend MSPointerUp pointerup",function(t){s=u(t.target).parents(l),a&&a.not(s).removeClass(d)})}return c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
